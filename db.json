{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"fbaa8154c2fd3a8f1b1e5c7c14b155a4f55a9f66","modified":1579258075000},{"_id":"source/README.md","hash":"4d64a4be880145dc767a0f2b35ae07130934caec","modified":1573444482000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1536141025000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1536141025000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1536141025000},{"_id":"themes/next/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1584326202000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1536141025000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1536141025000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1536141025000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1536141025000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1536141025000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1536141025000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1536141025000},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1536141025000},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1536141025000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1536141025000},{"_id":"themes/next/_config.yml","hash":"eaf3308e1630e127fa99c5737883fdcfcaa4cbfa","modified":1564372721000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1536141025000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1536141025000},{"_id":"source/_posts/.DS_Store","hash":"648644df3521a13c7adce06fa4dc50fe8ad678e0","modified":1583467330000},{"_id":"source/_posts/2018年终总结.md","hash":"c0867d75f3a9d9a231117bf8b90c50a511bf75b7","modified":1583462389000},{"_id":"source/_posts/2019年终总结.md","hash":"a5f5bda7b7cbbd55ad1eccd617fd3679c7f1a2c6","modified":1583223018000},{"_id":"source/_posts/Hexo-基础使用.md","hash":"25629d1afdc1a9d9f7fc7e2cf9dd4855996acc8e","modified":1584340994000},{"_id":"source/_posts/IP地址和子网划分.md","hash":"43b01d944ed0f12807f272c216bcbbaa1d1e779b","modified":1573703737000},{"_id":"source/_posts/Flink-初探.md","hash":"a37a0672131d623db787f294f95c15280b8cdaf1","modified":1574222675000},{"_id":"source/_posts/MarkDown语法小记.md","hash":"97801ee3d364a3735c9014a0f07b8b1c8ae2ffc3","modified":1583462495000},{"_id":"source/_posts/Linux命令行与shell脚本学习.md","hash":"cd13ba5470a102828ff2e5fbc77f40c641b360b4","modified":1583484946000},{"_id":"source/_posts/PWA-Service-Worker-小结（二）实践.md","hash":"7131ff982cf68d59607f6e993f74f04036cddcd2","modified":1584357796000},{"_id":"source/_posts/PWA-Service-Worker-小结（一）各类缓存对比.md","hash":"eec42d295895f4cc185192aec512e13ae40357e3","modified":1584338901000},{"_id":"source/_posts/Prometheus监控应用性能.md","hash":"54384e482f1aae5afd9a568eeaed3f13d2e3efcb","modified":1573714908000},{"_id":"source/_posts/z-index小结.md","hash":"4f34d69b09a6664fcf53c62598b85de27ba5be13","modified":1573444482000},{"_id":"source/_posts/《看见》-柴静.md","hash":"17672484d6ed9b3f5442ff2e1fb9ada4397f866d","modified":1573444482000},{"_id":"source/_posts/《计算机网络》-http-部分读书笔记.md","hash":"9c478ed4d9576ee10a69b53dfd9d476f2fa2842b","modified":1579256956000},{"_id":"source/_posts/前端模块化.md","hash":"0ba35c65ad5773902e43c06b061c3f585349b93e","modified":1573444482000},{"_id":"source/_posts/使用 Performance APi 进行前端性能监控.md","hash":"038ea93092de46ab0838b723cbc6613cb108fa47","modified":1583225579000},{"_id":"source/_posts/同时使用两个账号分别操作Github和Gitlab.md","hash":"a36dbebeb332fac98ee214371f5960dc9ec42534","modified":1584327670000},{"_id":"source/_posts/微信授权流程.md","hash":"4badbefbfcbf80758ff3ea50f4869bcc080e8c03","modified":1573444482000},{"_id":"source/_posts/正则表达式学习笔记.md","hash":"2db41bf31060d72a42f0ccb663dfaed79e87c0df","modified":1576142819000},{"_id":"source/about/index.md","hash":"cd28adc01359666bbde63af910fd9ca78c374ac1","modified":1573444482000},{"_id":"source/tags/index.md","hash":"117af0f5864f1fb77308532c10afd7c796d3c1cf","modified":1573444482000},{"_id":"source/categories/index.md","hash":"210af89c8ddb41767b93a5476b2f0bfb7f126578","modified":1573444482000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1536141025000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1536141025000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1536141025000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1536141025000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1536141025000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1536141025000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1536141025000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1536141025000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1536141025000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1536141025000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1536141025000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1536141025000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1536141025000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1536141025000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1536141025000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1536141025000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1536141025000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"18efe049e97b499507de776649813d3828bef134","modified":1556088027000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1536141025000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1536141025000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1536141025000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1536141025000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1536141025000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1536141025000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1536141025000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1536141025000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1536141025000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1536141025000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1536141025000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1536141025000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1536141025000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1536141025000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1536141025000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536141025000},{"_id":"source/_posts/PWA-Service-Worker-小结（一）各类缓存对比/CDN&&Nginx.jpg","hash":"4a01a5df01bc6198dd539a2917767c924cc561e8","modified":1577265228000},{"_id":"source/_posts/PWA-Service-Worker-小结（一）各类缓存对比/协商缓存命中过程.png","hash":"0f471929b52bb025498ffaed9c214db2961bb400","modified":1579244005000},{"_id":"source/_posts/PWA-Service-Worker-小结（一）各类缓存对比/web应用缓存位置图.png","hash":"d7baa3458ab7c1b0c2445828dc3025f8e3f7ccff","modified":1577354768000},{"_id":"source/_posts/PWA-Service-Worker-小结（二）实践/Service-Worker-Lifecycle.png","hash":"b801bcfb4112648500133eee45b1a377d3a34b31","modified":1579257929000},{"_id":"source/_posts/z-index小结/stacking-order.png","hash":"3364e6e9cc70ce7b8264ff8cd0e2cfa1bdf820dd","modified":1573444482000},{"_id":"source/_posts/同时使用两个账号分别操作Github和Gitlab/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1573444482000},{"_id":"source/_posts/同时使用两个账号分别操作Github和Gitlab/enter-passphrase.png","hash":"5ab1bc937fa5dd48ab38cd1e78c8b48d70c4933b","modified":1583463518000},{"_id":"source/_posts/同时使用两个账号分别操作Github和Gitlab/test-ssh-connect.png","hash":"3d2a10a7ab19235e215ae66efbf24c9ef2a1b825","modified":1573444482000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1536141025000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1536141025000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1536141025000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1536141025000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1536141025000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1536141025000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1536141025000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1536141025000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1536141025000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1536141025000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1536141025000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1536141025000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1536141025000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1536141025000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1536141025000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1536141025000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1536141025000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1536141025000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1536141025000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1536141025000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1536141025000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1536141025000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1536141025000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1536141025000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1536141025000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1536141025000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1536141025000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1536141025000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1536141025000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1536141025000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1536141025000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1536141025000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1536141025000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1536141025000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1536141025000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1536141025000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1536141025000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1536141025000},{"_id":"themes/next/source/images/avatar.jpeg","hash":"157d6b7c4638a84211cdaaa337dfb960d6939048","modified":1559186894000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1536141025000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1536141025000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1536141025000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1536141025000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1536141025000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1536141025000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1536141025000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1536141025000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1536141025000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1536141025000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1536141025000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1536141025000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1536141025000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1536141025000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1536141025000},{"_id":"source/_posts/Linux命令行与shell脚本学习/file-permissions.png","hash":"34f6f19127840ef3503441821afed1362c7de51a","modified":1570531203000},{"_id":"source/_posts/Prometheus监控应用性能/flowChart.png","hash":"a5d0eb6f25eef534ab0706a265a0919e6a642a3c","modified":1573444482000},{"_id":"source/_posts/Prometheus监控应用性能/architecture.png","hash":"9de69ee9f98ab5cdb790cc74957e8cd74e81657b","modified":1573444482000},{"_id":"source/_posts/使用 Performance APi 进行前端性能监控/performance.png","hash":"dfd42f426cd812d386633f709f028946737724d2","modified":1573444482000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536141025000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536141025000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536141025000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536141025000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536141025000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536141025000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536141025000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1536141025000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1536141025000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1536141025000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1536141025000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1536141025000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1536141025000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1536141025000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1536141025000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1536141025000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1536141025000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1536141025000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1536141025000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1536141025000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1536141025000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1536141025000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1536141025000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1536141025000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1536141025000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1536141025000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1536141025000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1536141025000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1536141025000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1536141025000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1536141025000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1536141025000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1536141025000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1536141025000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1536141025000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1536141025000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1536141025000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1536141025000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1536141025000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1536141025000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1536141025000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1536141025000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1536141025000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1536141025000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1536141025000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1536141025000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1536141025000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1536141025000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1536141025000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1536141025000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1536141025000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1536141025000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1536141025000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1536141025000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1536141025000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1536141025000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1536141025000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1536141025000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1536141025000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1536141025000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1536141025000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1536141025000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1536141025000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1536141025000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1536141025000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1536141025000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1536141025000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1536141025000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1536141025000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1536141025000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1536141025000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1536141025000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1536141025000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1536141025000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1536141025000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1536141025000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1536141025000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1536141025000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1536141025000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1536141025000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1536141025000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1536141025000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1536141025000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1536141025000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1536141025000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1536141025000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1536141025000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1536141025000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1536141025000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1536141025000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1536141025000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1536141025000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1536141025000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1536141025000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1536141025000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1536141025000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1536141025000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1536141025000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1536141025000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1536141025000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1536141025000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1536141025000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1536141025000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1536141025000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1536141025000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1536141025000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1536141025000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1536141025000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1536141025000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1536141025000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1536141025000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1536141025000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1536141025000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1536141025000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1536141025000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1536141025000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1536141025000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1536141025000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1536141025000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1536141025000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1536141025000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1536141025000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1536141025000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1536141025000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1536141025000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1536141025000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1536141025000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1536141025000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1536141025000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1536141025000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1536141025000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1536141025000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1536141025000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1536141025000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1536141025000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1536141025000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1536141025000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1536141025000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1536141025000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1536141025000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1536141025000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1536141025000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1536141025000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1536141025000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1536141025000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1536141025000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1536141025000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1536141025000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1536141025000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1536141025000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1536141025000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1536141025000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1536141025000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1536141025000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1536141025000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1536141025000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1536141025000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1536141025000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1536141025000},{"_id":"source/_posts/微信授权流程/flowChart.png","hash":"97a87939796c8bb264d2608b2e8f32841d199d53","modified":1573444482000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1536141025000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1536141025000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1536141025000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1536141025000}],"Category":[{"name":"其他小结","_id":"ck7v8vsru000796fyqbnomr1s"},{"name":"计算机相关知识","_id":"ck7v8vss0000d96fyh2of5x8u"},{"name":"大数据","_id":"ck7v8vss5000j96fy42bu4uef"},{"name":"前端","_id":"ck7v8vssd000v96fyva0aa04q"},{"name":"监控","_id":"ck7v8vssh001296fydcpqsmbb"},{"name":"闲暇读物","_id":"ck7v8vssn001f96fyudpbmspu"},{"name":"JavaScript","parent":"ck7v8vssd000v96fyva0aa04q","_id":"ck7v8vsso001j96fyi7o3jhsa"},{"name":"PWA","parent":"ck7v8vssd000v96fyva0aa04q","_id":"ck7v8vssp001n96fyi4conzw0"},{"name":"git","_id":"ck7v8vssp001r96fys232lo8x"},{"name":"CSS","parent":"ck7v8vssd000v96fyva0aa04q","_id":"ck7v8vssr002096fyy3k4yt6o"}],"Data":[],"Page":[{"title":"关于我","date":"2019-05-04T14:27:14.000Z","tags":null,"categories":null,"_content":"<br/>\n我毕业于<del>一所技术院校</del>辽宁工程技术大学，是一名通信学子。\n大一的时候学做 ppt，大二的时候搞 Ps 和 Ae ，大三上学期无意间被网页上的动画效果吸引，大四的时候迈入了前端的坑。\n\n### 关于通信\n上大学的时候，同学们都调侃，“为啥通信的学生要学这么多，几乎电信学院的各个专业各科我们都会掺和一脚”。大三上专业课的时候，学习`信号与系统`、`通信原理`，`移动通信`，...铺天盖地的数学砸下来，才知道：“哦，原来通信是搞数学的。”\n<del>用专业的话说，通信也是考量人发量的一门学科。</del>。\n\n### 关于前端\n一入前端深似海，从此学习常相伴。\n前端知识面广而杂，计算机专业基础知识的欠缺，让我无时不刻觉得<del>我应该在土里，不是在前端的坑底</del>认真学习的重要性。\nGood good study, day day up ╰(￣▽￣)╭ .\n\n### 关于我\n大三的时候，身边的大多数同学决定考研，继续研究<del>数学</del>通信。\n而当时的我，一手掐着前端的学习资料，一手抱着通信课本，毅然决然的准备成为一名准前端er。\n现在，我在一家互联网金融公司继续挖坑、填坑。\n\n### 关于辽工大\n辽工大坐落在葫芦岛兴城，四周山水环绕，风景秀美。\n除了夏日太热，冬日太冷，平常风太大以外，几乎没有缺点。\n工大er们大多热情、优秀，<del>还很逗比</del>。","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2019-05-04 22:27:14\ntags: \ncategories: \n---\n<br/>\n我毕业于<del>一所技术院校</del>辽宁工程技术大学，是一名通信学子。\n大一的时候学做 ppt，大二的时候搞 Ps 和 Ae ，大三上学期无意间被网页上的动画效果吸引，大四的时候迈入了前端的坑。\n\n### 关于通信\n上大学的时候，同学们都调侃，“为啥通信的学生要学这么多，几乎电信学院的各个专业各科我们都会掺和一脚”。大三上专业课的时候，学习`信号与系统`、`通信原理`，`移动通信`，...铺天盖地的数学砸下来，才知道：“哦，原来通信是搞数学的。”\n<del>用专业的话说，通信也是考量人发量的一门学科。</del>。\n\n### 关于前端\n一入前端深似海，从此学习常相伴。\n前端知识面广而杂，计算机专业基础知识的欠缺，让我无时不刻觉得<del>我应该在土里，不是在前端的坑底</del>认真学习的重要性。\nGood good study, day day up ╰(￣▽￣)╭ .\n\n### 关于我\n大三的时候，身边的大多数同学决定考研，继续研究<del>数学</del>通信。\n而当时的我，一手掐着前端的学习资料，一手抱着通信课本，毅然决然的准备成为一名准前端er。\n现在，我在一家互联网金融公司继续挖坑、填坑。\n\n### 关于辽工大\n辽工大坐落在葫芦岛兴城，四周山水环绕，风景秀美。\n除了夏日太热，冬日太冷，平常风太大以外，几乎没有缺点。\n工大er们大多热情、优秀，<del>还很逗比</del>。","updated":"2019-11-11T03:54:42.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck7v8vsrn000196fy67or8rca","content":"<p><br><br>我毕业于<del>一所技术院校</del>辽宁工程技术大学，是一名通信学子。<br>大一的时候学做 ppt，大二的时候搞 Ps 和 Ae ，大三上学期无意间被网页上的动画效果吸引，大四的时候迈入了前端的坑。</p>\n<h3 id=\"关于通信\"><a href=\"#关于通信\" class=\"headerlink\" title=\"关于通信\"></a>关于通信</h3><p>上大学的时候，同学们都调侃，“为啥通信的学生要学这么多，几乎电信学院的各个专业各科我们都会掺和一脚”。大三上专业课的时候，学习<code>信号与系统</code>、<code>通信原理</code>，<code>移动通信</code>，…铺天盖地的数学砸下来，才知道：“哦，原来通信是搞数学的。”<br><del>用专业的话说，通信也是考量人发量的一门学科。</del>。</p>\n<h3 id=\"关于前端\"><a href=\"#关于前端\" class=\"headerlink\" title=\"关于前端\"></a>关于前端</h3><p>一入前端深似海，从此学习常相伴。<br>前端知识面广而杂，计算机专业基础知识的欠缺，让我无时不刻觉得<del>我应该在土里，不是在前端的坑底</del>认真学习的重要性。<br>Good good study, day day up ╰(￣▽￣)╭ .</p>\n<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>大三的时候，身边的大多数同学决定考研，继续研究<del>数学</del>通信。<br>而当时的我，一手掐着前端的学习资料，一手抱着通信课本，毅然决然的准备成为一名准前端er。<br>现在，我在一家互联网金融公司继续挖坑、填坑。</p>\n<h3 id=\"关于辽工大\"><a href=\"#关于辽工大\" class=\"headerlink\" title=\"关于辽工大\"></a>关于辽工大</h3><p>辽工大坐落在葫芦岛兴城，四周山水环绕，风景秀美。<br>除了夏日太热，冬日太冷，平常风太大以外，几乎没有缺点。<br>工大er们大多热情、优秀，<del>还很逗比</del>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><br><br>我毕业于<del>一所技术院校</del>辽宁工程技术大学，是一名通信学子。<br>大一的时候学做 ppt，大二的时候搞 Ps 和 Ae ，大三上学期无意间被网页上的动画效果吸引，大四的时候迈入了前端的坑。</p>\n<h3 id=\"关于通信\"><a href=\"#关于通信\" class=\"headerlink\" title=\"关于通信\"></a>关于通信</h3><p>上大学的时候，同学们都调侃，“为啥通信的学生要学这么多，几乎电信学院的各个专业各科我们都会掺和一脚”。大三上专业课的时候，学习<code>信号与系统</code>、<code>通信原理</code>，<code>移动通信</code>，…铺天盖地的数学砸下来，才知道：“哦，原来通信是搞数学的。”<br><del>用专业的话说，通信也是考量人发量的一门学科。</del>。</p>\n<h3 id=\"关于前端\"><a href=\"#关于前端\" class=\"headerlink\" title=\"关于前端\"></a>关于前端</h3><p>一入前端深似海，从此学习常相伴。<br>前端知识面广而杂，计算机专业基础知识的欠缺，让我无时不刻觉得<del>我应该在土里，不是在前端的坑底</del>认真学习的重要性。<br>Good good study, day day up ╰(￣▽￣)╭ .</p>\n<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>大三的时候，身边的大多数同学决定考研，继续研究<del>数学</del>通信。<br>而当时的我，一手掐着前端的学习资料，一手抱着通信课本，毅然决然的准备成为一名准前端er。<br>现在，我在一家互联网金融公司继续挖坑、填坑。</p>\n<h3 id=\"关于辽工大\"><a href=\"#关于辽工大\" class=\"headerlink\" title=\"关于辽工大\"></a>关于辽工大</h3><p>辽工大坐落在葫芦岛兴城，四周山水环绕，风景秀美。<br>除了夏日太热，冬日太冷，平常风太大以外，几乎没有缺点。<br>工大er们大多热情、优秀，<del>还很逗比</del>。</p>\n"},{"date":"2018-09-07T02:16:55.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\n# title: tags\ndate: 2018-09-07 10:16:55\ntype: tags\n---\n","updated":"2019-11-11T03:54:42.000Z","path":"tags/index.html","title":"","comments":1,"layout":"page","_id":"ck7v8vsrp000396fy6cxbf70a","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-09-07T07:08:41.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-09-07 15:08:41\ntype: categories\n---\n","updated":"2019-11-11T03:54:42.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck7v8vsrt000696fyoxwedvdq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2019年终总结","date":"2019-12-31T02:37:55.000Z","_content":"2019年终总结（✖️）\n2020待做清单（✔️）\n<!--more-->\n\n* 一月：工作\n* 二月：回家过年\n* 三月：PWA 离线缓存初步探索\n* 四月：多页应用 Service Worker 合适的落地方案持续寻找中（暂缓）；前端性能指标 Performance 采集上报\n* 五月：前端性能指标尝试用 Prometheus 监控系统记录并用 Grafana 做可视化，尝试结果并不好；其他工作中过了一遍 RabbitMQ 事件队列收发流程\n* 六月：Elasticsearch 日志监控系统初探，目的是根据日志中的某些关键词，发出微信、邮件告警通知\n* 七月：elk 告警通知进行落地测试调优，微信和邮箱刚开始差点被通知给炸没了...\n* 八月：告警通知发现了很多不规范的日志，以及某些机器大清早的刷接口...持续使用中...但怎样区分业务的错误日志和代码的错误日志一直是一个问题...\n* 九月：学习计算机网络相关知识\n* 十月：Flink 实时计算性能指标探索\n* 十一月：网络工程师考试\n* 十二月：灌水\n\n今年是工作上探索新技术比较多的一年，前端的、不止前端的...虽然最终落地实践并产生结果的并不多，但是多种类型和方向的尝试让我开拓了不少眼界。纵观全年技术探索，leader 在带我们建立 FE 团队的性能监控和异常监控系统方向上做努力。19年没搞完的总结，就是20年的todolist... \n希望 2020 年的我对技术研究能上升个层次，不仅仅是学习新技术、了解新技术带来什么好处，还要能想到引入新技术带来的一系列后续的优化和落地。\n\n其他方面，就是缺少的计科知识，出来混，总要还的。报了个网工的考试督促自己系统学习下计科网络相关的知识，然后用实力证明忘的比学的快。\n\n__二月份__ 回家过年无聊的时候下了个游戏叫《守望先锋》，从人机模式简单->困难，到快速游戏，再到竞技比赛：体验团队合作游戏的乐趣 + 1，一言不合口吐芬芳 + 10086 。概括起来就是，如果这局赢了，那是队友真强；如果这局输了，那是我正常发挥。不知不觉，这游戏已经玩了一年了...\n__六月底__ 终于不堪某水果的电池续航和微信卡顿问题转战 HUAWEI 阵营，不得不说，真香...，但是安卓9下的抓包真是让我脑壳疼了好几天...\n__八月份__ gxTodo 总是莫名其妙的卡死崩溃，改用【滴答清单】了。印象笔记也是真的好用...\n__十月份__ 找房换房。没想到第一次坐在电动车后面吹着微风晒着暖阳周游北京，居然是自如管家驮着我。带我看房的自如管家是位体型娇小的南方妹子，我站在她面前就像是一个五大三粗的钢铁硬汉...怪不好意思的...\n__十一月份__ 软考北京考点在房山...(╯°□°）╯︵┻━┻)\n\n19年还算充实，虽然相比于18年更宅了一点...最大的希望就是在 2020 年懒癌和拖延症能治好，找到比较感兴趣的东西。还有，别迟到。","source":"_posts/2019年终总结.md","raw":"---\ntitle: 2019年终总结\ndate: 2019-12-31 10:37:55\ntags: [年度总结]\ncategories:\n---\n2019年终总结（✖️）\n2020待做清单（✔️）\n<!--more-->\n\n* 一月：工作\n* 二月：回家过年\n* 三月：PWA 离线缓存初步探索\n* 四月：多页应用 Service Worker 合适的落地方案持续寻找中（暂缓）；前端性能指标 Performance 采集上报\n* 五月：前端性能指标尝试用 Prometheus 监控系统记录并用 Grafana 做可视化，尝试结果并不好；其他工作中过了一遍 RabbitMQ 事件队列收发流程\n* 六月：Elasticsearch 日志监控系统初探，目的是根据日志中的某些关键词，发出微信、邮件告警通知\n* 七月：elk 告警通知进行落地测试调优，微信和邮箱刚开始差点被通知给炸没了...\n* 八月：告警通知发现了很多不规范的日志，以及某些机器大清早的刷接口...持续使用中...但怎样区分业务的错误日志和代码的错误日志一直是一个问题...\n* 九月：学习计算机网络相关知识\n* 十月：Flink 实时计算性能指标探索\n* 十一月：网络工程师考试\n* 十二月：灌水\n\n今年是工作上探索新技术比较多的一年，前端的、不止前端的...虽然最终落地实践并产生结果的并不多，但是多种类型和方向的尝试让我开拓了不少眼界。纵观全年技术探索，leader 在带我们建立 FE 团队的性能监控和异常监控系统方向上做努力。19年没搞完的总结，就是20年的todolist... \n希望 2020 年的我对技术研究能上升个层次，不仅仅是学习新技术、了解新技术带来什么好处，还要能想到引入新技术带来的一系列后续的优化和落地。\n\n其他方面，就是缺少的计科知识，出来混，总要还的。报了个网工的考试督促自己系统学习下计科网络相关的知识，然后用实力证明忘的比学的快。\n\n__二月份__ 回家过年无聊的时候下了个游戏叫《守望先锋》，从人机模式简单->困难，到快速游戏，再到竞技比赛：体验团队合作游戏的乐趣 + 1，一言不合口吐芬芳 + 10086 。概括起来就是，如果这局赢了，那是队友真强；如果这局输了，那是我正常发挥。不知不觉，这游戏已经玩了一年了...\n__六月底__ 终于不堪某水果的电池续航和微信卡顿问题转战 HUAWEI 阵营，不得不说，真香...，但是安卓9下的抓包真是让我脑壳疼了好几天...\n__八月份__ gxTodo 总是莫名其妙的卡死崩溃，改用【滴答清单】了。印象笔记也是真的好用...\n__十月份__ 找房换房。没想到第一次坐在电动车后面吹着微风晒着暖阳周游北京，居然是自如管家驮着我。带我看房的自如管家是位体型娇小的南方妹子，我站在她面前就像是一个五大三粗的钢铁硬汉...怪不好意思的...\n__十一月份__ 软考北京考点在房山...(╯°□°）╯︵┻━┻)\n\n19年还算充实，虽然相比于18年更宅了一点...最大的希望就是在 2020 年懒癌和拖延症能治好，找到比较感兴趣的东西。还有，别迟到。","slug":"2019年终总结","published":1,"updated":"2020-03-03T08:10:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7v8vsrh000096fykqfog49l","content":"<p>2019年终总结（✖️）<br>2020待做清单（✔️）<br><a id=\"more\"></a></p>\n<ul>\n<li>一月：工作</li>\n<li>二月：回家过年</li>\n<li>三月：PWA 离线缓存初步探索</li>\n<li>四月：多页应用 Service Worker 合适的落地方案持续寻找中（暂缓）；前端性能指标 Performance 采集上报</li>\n<li>五月：前端性能指标尝试用 Prometheus 监控系统记录并用 Grafana 做可视化，尝试结果并不好；其他工作中过了一遍 RabbitMQ 事件队列收发流程</li>\n<li>六月：Elasticsearch 日志监控系统初探，目的是根据日志中的某些关键词，发出微信、邮件告警通知</li>\n<li>七月：elk 告警通知进行落地测试调优，微信和邮箱刚开始差点被通知给炸没了…</li>\n<li>八月：告警通知发现了很多不规范的日志，以及某些机器大清早的刷接口…持续使用中…但怎样区分业务的错误日志和代码的错误日志一直是一个问题…</li>\n<li>九月：学习计算机网络相关知识</li>\n<li>十月：Flink 实时计算性能指标探索</li>\n<li>十一月：网络工程师考试</li>\n<li>十二月：灌水</li>\n</ul>\n<p>今年是工作上探索新技术比较多的一年，前端的、不止前端的…虽然最终落地实践并产生结果的并不多，但是多种类型和方向的尝试让我开拓了不少眼界。纵观全年技术探索，leader 在带我们建立 FE 团队的性能监控和异常监控系统方向上做努力。19年没搞完的总结，就是20年的todolist…<br>希望 2020 年的我对技术研究能上升个层次，不仅仅是学习新技术、了解新技术带来什么好处，还要能想到引入新技术带来的一系列后续的优化和落地。</p>\n<p>其他方面，就是缺少的计科知识，出来混，总要还的。报了个网工的考试督促自己系统学习下计科网络相关的知识，然后用实力证明忘的比学的快。</p>\n<p><strong>二月份</strong> 回家过年无聊的时候下了个游戏叫《守望先锋》，从人机模式简单-&gt;困难，到快速游戏，再到竞技比赛：体验团队合作游戏的乐趣 + 1，一言不合口吐芬芳 + 10086 。概括起来就是，如果这局赢了，那是队友真强；如果这局输了，那是我正常发挥。不知不觉，这游戏已经玩了一年了…<br><strong>六月底</strong> 终于不堪某水果的电池续航和微信卡顿问题转战 HUAWEI 阵营，不得不说，真香…，但是安卓9下的抓包真是让我脑壳疼了好几天…<br><strong>八月份</strong> gxTodo 总是莫名其妙的卡死崩溃，改用【滴答清单】了。印象笔记也是真的好用…<br><strong>十月份</strong> 找房换房。没想到第一次坐在电动车后面吹着微风晒着暖阳周游北京，居然是自如管家驮着我。带我看房的自如管家是位体型娇小的南方妹子，我站在她面前就像是一个五大三粗的钢铁硬汉…怪不好意思的…<br><strong>十一月份</strong> 软考北京考点在房山…(╯°□°）╯︵┻━┻)</p>\n<p>19年还算充实，虽然相比于18年更宅了一点…最大的希望就是在 2020 年懒癌和拖延症能治好，找到比较感兴趣的东西。还有，别迟到。</p>\n","site":{"data":{}},"excerpt":"<p>2019年终总结（✖️）<br>2020待做清单（✔️）<br></p>","more":"<p></p>\n<ul>\n<li>一月：工作</li>\n<li>二月：回家过年</li>\n<li>三月：PWA 离线缓存初步探索</li>\n<li>四月：多页应用 Service Worker 合适的落地方案持续寻找中（暂缓）；前端性能指标 Performance 采集上报</li>\n<li>五月：前端性能指标尝试用 Prometheus 监控系统记录并用 Grafana 做可视化，尝试结果并不好；其他工作中过了一遍 RabbitMQ 事件队列收发流程</li>\n<li>六月：Elasticsearch 日志监控系统初探，目的是根据日志中的某些关键词，发出微信、邮件告警通知</li>\n<li>七月：elk 告警通知进行落地测试调优，微信和邮箱刚开始差点被通知给炸没了…</li>\n<li>八月：告警通知发现了很多不规范的日志，以及某些机器大清早的刷接口…持续使用中…但怎样区分业务的错误日志和代码的错误日志一直是一个问题…</li>\n<li>九月：学习计算机网络相关知识</li>\n<li>十月：Flink 实时计算性能指标探索</li>\n<li>十一月：网络工程师考试</li>\n<li>十二月：灌水</li>\n</ul>\n<p>今年是工作上探索新技术比较多的一年，前端的、不止前端的…虽然最终落地实践并产生结果的并不多，但是多种类型和方向的尝试让我开拓了不少眼界。纵观全年技术探索，leader 在带我们建立 FE 团队的性能监控和异常监控系统方向上做努力。19年没搞完的总结，就是20年的todolist…<br>希望 2020 年的我对技术研究能上升个层次，不仅仅是学习新技术、了解新技术带来什么好处，还要能想到引入新技术带来的一系列后续的优化和落地。</p>\n<p>其他方面，就是缺少的计科知识，出来混，总要还的。报了个网工的考试督促自己系统学习下计科网络相关的知识，然后用实力证明忘的比学的快。</p>\n<p><strong>二月份</strong> 回家过年无聊的时候下了个游戏叫《守望先锋》，从人机模式简单-&gt;困难，到快速游戏，再到竞技比赛：体验团队合作游戏的乐趣 + 1，一言不合口吐芬芳 + 10086 。概括起来就是，如果这局赢了，那是队友真强；如果这局输了，那是我正常发挥。不知不觉，这游戏已经玩了一年了…<br><strong>六月底</strong> 终于不堪某水果的电池续航和微信卡顿问题转战 HUAWEI 阵营，不得不说，真香…，但是安卓9下的抓包真是让我脑壳疼了好几天…<br><strong>八月份</strong> gxTodo 总是莫名其妙的卡死崩溃，改用【滴答清单】了。印象笔记也是真的好用…<br><strong>十月份</strong> 找房换房。没想到第一次坐在电动车后面吹着微风晒着暖阳周游北京，居然是自如管家驮着我。带我看房的自如管家是位体型娇小的南方妹子，我站在她面前就像是一个五大三粗的钢铁硬汉…怪不好意思的…<br><strong>十一月份</strong> 软考北京考点在房山…(╯°□°）╯︵┻━┻)</p>\n<p>19年还算充实，虽然相比于18年更宅了一点…最大的希望就是在 2020 年懒癌和拖延症能治好，找到比较感兴趣的东西。还有，别迟到。</p>"},{"title":"Hexo 基础使用","date":"2018-11-17T04:00:30.000Z","_content":"\n### 安装\nnode 环境下，全局安装 hexo-cli\n````\nnpm install hexo-cli -g\n````\n### 初始化\n进入到一个放置blog的**空文件夹**\n````\n    hexo init \n    hexo generate\n    hexo server # 默认4000端口\n    hexo s -p 4001 # 在自定义端口启动\n````\n浏览器输入localhost:4000，出现blog界面\n\n### 换主题\nHexo官网提供了一些主题  [https://hexo.io/themes/ ](https://hexo.io/themes/) \n* git clone 主题地址到 blog 目录下，将全局_condig.yml中的theme名字改为clone下来的文件夹的名字\n* 主题中有可供选择的几套样式，更改主题 _config.yml 里的 scheme \n* 设置代码高亮样式 更改主题 _condig.yml 里的 hightlight_theme\n* 切换Hexo语言 在全局 _condig.yml 里的 language 改成 zh-Hans 即为主题下的简体中文（默认为英文）\n* (更换完主题，需要重启应用，方能生效)\n* __由于主题也是一个git仓库，下载后记得删除.git文件，否则主题文件是无法提交的__\n  \n### 生成文章\n````\n    hexo new \"postName\" # /source/_post/postName & .md\n    hexo new page \"pageName\" # /source/pageName/index & index.md\n    hexo generate # /source/.md -> /public/.html\n    hexo server \n    hexo deploy #将.deploy目录部署到GitHub\n````\n\n### 删除文章\n````\n    hexo clean # delete /public\n    hexo generate # regenerate /public\n    hexo deploy\n````\n\n### 其他\n- **插入本地图片**\n每次`hexo new 'postName'`时，都会创建一个与文章名相同的文件夹，将文章所需资源放入该文件夹里，引用的时候直接写文件名即可。\n- **页面增加“阅读更多”按钮**\n在 .md 文件中增加`<!--more-->`注释，如果想自动添加“阅读更多”按钮，可在主题下的`_config.yml`中将`auto_excerpt`下的`enable`设置为`true`。\n\n### 插件\n* [hexo-deployer-git](https://github.com/hexojs/hexo-deployer-git) 一键部署到 GitPage\n* [hexo-douban](https://github.com/mythsman/hexo-douban) 爬取豆瓣相关信息\n* [hexo-generator-search](https://github.com/wzpan/hexo-generator-search) 全文搜索功能\n\n### 部署\n`hexo d`部署前，需要安装`npm install hexo-deployer-git --save`。\n修改全局 `_config.yml` 中的配置：\n````\n    deploy:\n        type: git\n        repo: <repository url>\n        branch: [branch]\n        message: [message]\n        name: [git user] \n        email: [git email]\n        extend_dirs: [extend directory] #其他要提交的目录\n        ignore_hidden: true #忽略隐藏文件\n        ignore_pattern: regexp #忽略正则匹配的隐藏文件\n````\n之后，只需要`hexo d -g`一条命令就可以生成和部署了。关于 hexo-deployer-git 这个插件的参数[hexo官方文档](https://hexo.io/zh-cn/docs/deployment.html)介绍的并不全面，建议去[hexo-deployer-git官方文档](https://github.com/hexojs/hexo-deployer-git)查看相关配置参数。\n\n__注意:__ \n* 默认部署，只将生成的HTML相关文件(/public)推送到 github\n* 若想把本地的生成器项目相关文件也推送到 github，则要配置 `extend_dirs: /`\n* message、name、email 的内容要用引号括起来\n* name、email 的配置信息用来覆盖全局的 git config 中的配置，更改这两项后，需要删除根目录下的`.deploy_git`，部署时才会生效\n* master 只能放`/public`下的文件，将项目所有文件放到 master 分支下，会导致页面 build 失败。若想将本地代码全部提交，可部署在其他分支（在`_config.yml`中增加其他分支配置信息，详情参考文档）\n* 不提交 node_modules 的话，注意在项目下新建`.gitignore`文件（为什么不使用 extend_dirs ？因为需要添加的文件夹太多...）\n\n### 搜索功能\n全局安装插件`npm install hexo-generator-search --save`\n修改全局`_config.yml`中的配置：\n````\n    search:\n        path: search.xml\n        field: post\n        content: true\n````\n\n修改主题`themes/next/_config.yml`中的配置：\n````\n    local_search:\n        enable: true\n        trigger: auto\n````\n\n生效：`hexo clean`、`hexo g`、`hexo s`\n### Hexo目录解析\n````\n    ├── node_modules # 依赖包-安装插件及所需nodejs模块。\n    ├── public  # 最终网页信息。即存放通过 markdown 渲染出来的 html文件。\n    ├── scaffolds # 模板文件夹。即新建文章时，根据 scaffold 生成文件。\n    ├── source  # 资源文件夹。即存放用户资源。\n    |   └── _posts # 博客文章目录。\n    └── themes #存放主题。Hexo根据主题生成静态页面。\n    ├── _config.yml #网站的全局配置信息。标题、网站名称等。\n    ├── db.json：# source 解析所得到的缓存文件。\n    ├── package.json  # 应用程序信息。即配置Hexo运行需要js包。\n````\n\n### 参考资料\n[利用 hexo + Gitpage 开发自己的博客](https://cherryblog.site/Use-Gitpagehexo-to-develop-their-own-blog.html)\n[hexo浅析原理](https://www.jianshu.com/p/a938da5ddb5d)","source":"_posts/Hexo-基础使用.md","raw":"---\ntitle: Hexo 基础使用\ndate: 2018-11-17 12:00:30\ntags: [Hexo]\ncategories: 其他小结\n---\n\n### 安装\nnode 环境下，全局安装 hexo-cli\n````\nnpm install hexo-cli -g\n````\n### 初始化\n进入到一个放置blog的**空文件夹**\n````\n    hexo init \n    hexo generate\n    hexo server # 默认4000端口\n    hexo s -p 4001 # 在自定义端口启动\n````\n浏览器输入localhost:4000，出现blog界面\n\n### 换主题\nHexo官网提供了一些主题  [https://hexo.io/themes/ ](https://hexo.io/themes/) \n* git clone 主题地址到 blog 目录下，将全局_condig.yml中的theme名字改为clone下来的文件夹的名字\n* 主题中有可供选择的几套样式，更改主题 _config.yml 里的 scheme \n* 设置代码高亮样式 更改主题 _condig.yml 里的 hightlight_theme\n* 切换Hexo语言 在全局 _condig.yml 里的 language 改成 zh-Hans 即为主题下的简体中文（默认为英文）\n* (更换完主题，需要重启应用，方能生效)\n* __由于主题也是一个git仓库，下载后记得删除.git文件，否则主题文件是无法提交的__\n  \n### 生成文章\n````\n    hexo new \"postName\" # /source/_post/postName & .md\n    hexo new page \"pageName\" # /source/pageName/index & index.md\n    hexo generate # /source/.md -> /public/.html\n    hexo server \n    hexo deploy #将.deploy目录部署到GitHub\n````\n\n### 删除文章\n````\n    hexo clean # delete /public\n    hexo generate # regenerate /public\n    hexo deploy\n````\n\n### 其他\n- **插入本地图片**\n每次`hexo new 'postName'`时，都会创建一个与文章名相同的文件夹，将文章所需资源放入该文件夹里，引用的时候直接写文件名即可。\n- **页面增加“阅读更多”按钮**\n在 .md 文件中增加`<!--more-->`注释，如果想自动添加“阅读更多”按钮，可在主题下的`_config.yml`中将`auto_excerpt`下的`enable`设置为`true`。\n\n### 插件\n* [hexo-deployer-git](https://github.com/hexojs/hexo-deployer-git) 一键部署到 GitPage\n* [hexo-douban](https://github.com/mythsman/hexo-douban) 爬取豆瓣相关信息\n* [hexo-generator-search](https://github.com/wzpan/hexo-generator-search) 全文搜索功能\n\n### 部署\n`hexo d`部署前，需要安装`npm install hexo-deployer-git --save`。\n修改全局 `_config.yml` 中的配置：\n````\n    deploy:\n        type: git\n        repo: <repository url>\n        branch: [branch]\n        message: [message]\n        name: [git user] \n        email: [git email]\n        extend_dirs: [extend directory] #其他要提交的目录\n        ignore_hidden: true #忽略隐藏文件\n        ignore_pattern: regexp #忽略正则匹配的隐藏文件\n````\n之后，只需要`hexo d -g`一条命令就可以生成和部署了。关于 hexo-deployer-git 这个插件的参数[hexo官方文档](https://hexo.io/zh-cn/docs/deployment.html)介绍的并不全面，建议去[hexo-deployer-git官方文档](https://github.com/hexojs/hexo-deployer-git)查看相关配置参数。\n\n__注意:__ \n* 默认部署，只将生成的HTML相关文件(/public)推送到 github\n* 若想把本地的生成器项目相关文件也推送到 github，则要配置 `extend_dirs: /`\n* message、name、email 的内容要用引号括起来\n* name、email 的配置信息用来覆盖全局的 git config 中的配置，更改这两项后，需要删除根目录下的`.deploy_git`，部署时才会生效\n* master 只能放`/public`下的文件，将项目所有文件放到 master 分支下，会导致页面 build 失败。若想将本地代码全部提交，可部署在其他分支（在`_config.yml`中增加其他分支配置信息，详情参考文档）\n* 不提交 node_modules 的话，注意在项目下新建`.gitignore`文件（为什么不使用 extend_dirs ？因为需要添加的文件夹太多...）\n\n### 搜索功能\n全局安装插件`npm install hexo-generator-search --save`\n修改全局`_config.yml`中的配置：\n````\n    search:\n        path: search.xml\n        field: post\n        content: true\n````\n\n修改主题`themes/next/_config.yml`中的配置：\n````\n    local_search:\n        enable: true\n        trigger: auto\n````\n\n生效：`hexo clean`、`hexo g`、`hexo s`\n### Hexo目录解析\n````\n    ├── node_modules # 依赖包-安装插件及所需nodejs模块。\n    ├── public  # 最终网页信息。即存放通过 markdown 渲染出来的 html文件。\n    ├── scaffolds # 模板文件夹。即新建文章时，根据 scaffold 生成文件。\n    ├── source  # 资源文件夹。即存放用户资源。\n    |   └── _posts # 博客文章目录。\n    └── themes #存放主题。Hexo根据主题生成静态页面。\n    ├── _config.yml #网站的全局配置信息。标题、网站名称等。\n    ├── db.json：# source 解析所得到的缓存文件。\n    ├── package.json  # 应用程序信息。即配置Hexo运行需要js包。\n````\n\n### 参考资料\n[利用 hexo + Gitpage 开发自己的博客](https://cherryblog.site/Use-Gitpagehexo-to-develop-their-own-blog.html)\n[hexo浅析原理](https://www.jianshu.com/p/a938da5ddb5d)","slug":"Hexo-基础使用","published":1,"updated":"2020-03-16T06:43:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7v8vsrn000296fy91i82fbi","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>node 环境下，全局安装 hexo-cli<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>进入到一个放置blog的<strong>空文件夹</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init </span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo server # 默认4000端口</span><br><span class=\"line\">hexo s -p 4001 # 在自定义端口启动</span><br></pre></td></tr></table></figure></p>\n<p>浏览器输入localhost:4000，出现blog界面</p>\n<h3 id=\"换主题\"><a href=\"#换主题\" class=\"headerlink\" title=\"换主题\"></a>换主题</h3><p>Hexo官网提供了一些主题  <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/ </a> </p>\n<ul>\n<li>git clone 主题地址到 blog 目录下，将全局_condig.yml中的theme名字改为clone下来的文件夹的名字</li>\n<li>主题中有可供选择的几套样式，更改主题 _config.yml 里的 scheme </li>\n<li>设置代码高亮样式 更改主题 _condig.yml 里的 hightlight_theme</li>\n<li>切换Hexo语言 在全局 _condig.yml 里的 language 改成 zh-Hans 即为主题下的简体中文（默认为英文）</li>\n<li>(更换完主题，需要重启应用，方能生效)</li>\n<li><strong>由于主题也是一个git仓库，下载后记得删除.git文件，否则主题文件是无法提交的</strong></li>\n</ul>\n<h3 id=\"生成文章\"><a href=\"#生成文章\" class=\"headerlink\" title=\"生成文章\"></a>生成文章</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;postName&quot; # /source/_post/postName &amp; .md</span><br><span class=\"line\">hexo new page &quot;pageName&quot; # /source/pageName/index &amp; index.md</span><br><span class=\"line\">hexo generate # /source/.md -&gt; /public/.html</span><br><span class=\"line\">hexo server </span><br><span class=\"line\">hexo deploy #将.deploy目录部署到GitHub</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除文章\"><a href=\"#删除文章\" class=\"headerlink\" title=\"删除文章\"></a>删除文章</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean # delete /public</span><br><span class=\"line\">hexo generate # regenerate /public</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><strong>插入本地图片</strong><br>每次<code>hexo new &#39;postName&#39;</code>时，都会创建一个与文章名相同的文件夹，将文章所需资源放入该文件夹里，引用的时候直接写文件名即可。</li>\n<li><strong>页面增加“阅读更多”按钮</strong><br>在 .md 文件中增加<code>&lt;!--more--&gt;</code>注释，如果想自动添加“阅读更多”按钮，可在主题下的<code>_config.yml</code>中将<code>auto_excerpt</code>下的<code>enable</code>设置为<code>true</code>。</li>\n</ul>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><ul>\n<li><a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"noopener\">hexo-deployer-git</a> 一键部署到 GitPage</li>\n<li><a href=\"https://github.com/mythsman/hexo-douban\" target=\"_blank\" rel=\"noopener\">hexo-douban</a> 爬取豆瓣相关信息</li>\n<li><a href=\"https://github.com/wzpan/hexo-generator-search\" target=\"_blank\" rel=\"noopener\">hexo-generator-search</a> 全文搜索功能</li>\n</ul>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><p><code>hexo d</code>部署前，需要安装<code>npm install hexo-deployer-git --save</code>。<br>修改全局 <code>_config.yml</code> 中的配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repo: &lt;repository url&gt;</span><br><span class=\"line\">    branch: [branch]</span><br><span class=\"line\">    message: [message]</span><br><span class=\"line\">    name: [git user] </span><br><span class=\"line\">    email: [git email]</span><br><span class=\"line\">    extend_dirs: [extend directory] #其他要提交的目录</span><br><span class=\"line\">    ignore_hidden: true #忽略隐藏文件</span><br><span class=\"line\">    ignore_pattern: regexp #忽略正则匹配的隐藏文件</span><br></pre></td></tr></table></figure></p>\n<p>之后，只需要<code>hexo d -g</code>一条命令就可以生成和部署了。关于 hexo-deployer-git 这个插件的参数<a href=\"https://hexo.io/zh-cn/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">hexo官方文档</a>介绍的并不全面，建议去<a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"noopener\">hexo-deployer-git官方文档</a>查看相关配置参数。</p>\n<p><strong>注意:</strong> </p>\n<ul>\n<li>默认部署，只将生成的HTML相关文件(/public)推送到 github</li>\n<li>若想把本地的生成器项目相关文件也推送到 github，则要配置 <code>extend_dirs: /</code></li>\n<li>message、name、email 的内容要用引号括起来</li>\n<li>name、email 的配置信息用来覆盖全局的 git config 中的配置，更改这两项后，需要删除根目录下的<code>.deploy_git</code>，部署时才会生效</li>\n<li>master 只能放<code>/public</code>下的文件，将项目所有文件放到 master 分支下，会导致页面 build 失败。若想将本地代码全部提交，可部署在其他分支（在<code>_config.yml</code>中增加其他分支配置信息，详情参考文档）</li>\n<li>不提交 node_modules 的话，注意在项目下新建<code>.gitignore</code>文件（为什么不使用 extend_dirs ？因为需要添加的文件夹太多…）</li>\n</ul>\n<h3 id=\"搜索功能\"><a href=\"#搜索功能\" class=\"headerlink\" title=\"搜索功能\"></a>搜索功能</h3><p>全局安装插件<code>npm install hexo-generator-search --save</code><br>修改全局<code>_config.yml</code>中的配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">    path: search.xml</span><br><span class=\"line\">    field: post</span><br><span class=\"line\">    content: true</span><br></pre></td></tr></table></figure></p>\n<p>修改主题<code>themes/next/_config.yml</code>中的配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local_search:</span><br><span class=\"line\">    enable: true</span><br><span class=\"line\">    trigger: auto</span><br></pre></td></tr></table></figure></p>\n<p>生效：<code>hexo clean</code>、<code>hexo g</code>、<code>hexo s</code></p>\n<h3 id=\"Hexo目录解析\"><a href=\"#Hexo目录解析\" class=\"headerlink\" title=\"Hexo目录解析\"></a>Hexo目录解析</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── node_modules # 依赖包-安装插件及所需nodejs模块。</span><br><span class=\"line\">├── public  # 最终网页信息。即存放通过 markdown 渲染出来的 html文件。</span><br><span class=\"line\">├── scaffolds # 模板文件夹。即新建文章时，根据 scaffold 生成文件。</span><br><span class=\"line\">├── source  # 资源文件夹。即存放用户资源。</span><br><span class=\"line\">|   └── _posts # 博客文章目录。</span><br><span class=\"line\">└── themes #存放主题。Hexo根据主题生成静态页面。</span><br><span class=\"line\">├── _config.yml #网站的全局配置信息。标题、网站名称等。</span><br><span class=\"line\">├── db.json：# source 解析所得到的缓存文件。</span><br><span class=\"line\">├── package.json  # 应用程序信息。即配置Hexo运行需要js包。</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://cherryblog.site/Use-Gitpagehexo-to-develop-their-own-blog.html\" target=\"_blank\" rel=\"noopener\">利用 hexo + Gitpage 开发自己的博客</a><br><a href=\"https://www.jianshu.com/p/a938da5ddb5d\" target=\"_blank\" rel=\"noopener\">hexo浅析原理</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>node 环境下，全局安装 hexo-cli<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>进入到一个放置blog的<strong>空文件夹</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init </span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo server # 默认4000端口</span><br><span class=\"line\">hexo s -p 4001 # 在自定义端口启动</span><br></pre></td></tr></table></figure></p>\n<p>浏览器输入localhost:4000，出现blog界面</p>\n<h3 id=\"换主题\"><a href=\"#换主题\" class=\"headerlink\" title=\"换主题\"></a>换主题</h3><p>Hexo官网提供了一些主题  <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/themes/ </a> </p>\n<ul>\n<li>git clone 主题地址到 blog 目录下，将全局_condig.yml中的theme名字改为clone下来的文件夹的名字</li>\n<li>主题中有可供选择的几套样式，更改主题 _config.yml 里的 scheme </li>\n<li>设置代码高亮样式 更改主题 _condig.yml 里的 hightlight_theme</li>\n<li>切换Hexo语言 在全局 _condig.yml 里的 language 改成 zh-Hans 即为主题下的简体中文（默认为英文）</li>\n<li>(更换完主题，需要重启应用，方能生效)</li>\n<li><strong>由于主题也是一个git仓库，下载后记得删除.git文件，否则主题文件是无法提交的</strong></li>\n</ul>\n<h3 id=\"生成文章\"><a href=\"#生成文章\" class=\"headerlink\" title=\"生成文章\"></a>生成文章</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;postName&quot; # /source/_post/postName &amp; .md</span><br><span class=\"line\">hexo new page &quot;pageName&quot; # /source/pageName/index &amp; index.md</span><br><span class=\"line\">hexo generate # /source/.md -&gt; /public/.html</span><br><span class=\"line\">hexo server </span><br><span class=\"line\">hexo deploy #将.deploy目录部署到GitHub</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除文章\"><a href=\"#删除文章\" class=\"headerlink\" title=\"删除文章\"></a>删除文章</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean # delete /public</span><br><span class=\"line\">hexo generate # regenerate /public</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><strong>插入本地图片</strong><br>每次<code>hexo new &#39;postName&#39;</code>时，都会创建一个与文章名相同的文件夹，将文章所需资源放入该文件夹里，引用的时候直接写文件名即可。</li>\n<li><strong>页面增加“阅读更多”按钮</strong><br>在 .md 文件中增加<code>&lt;!--more--&gt;</code>注释，如果想自动添加“阅读更多”按钮，可在主题下的<code>_config.yml</code>中将<code>auto_excerpt</code>下的<code>enable</code>设置为<code>true</code>。</li>\n</ul>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><ul>\n<li><a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"noopener\">hexo-deployer-git</a> 一键部署到 GitPage</li>\n<li><a href=\"https://github.com/mythsman/hexo-douban\" target=\"_blank\" rel=\"noopener\">hexo-douban</a> 爬取豆瓣相关信息</li>\n<li><a href=\"https://github.com/wzpan/hexo-generator-search\" target=\"_blank\" rel=\"noopener\">hexo-generator-search</a> 全文搜索功能</li>\n</ul>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><p><code>hexo d</code>部署前，需要安装<code>npm install hexo-deployer-git --save</code>。<br>修改全局 <code>_config.yml</code> 中的配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repo: &lt;repository url&gt;</span><br><span class=\"line\">    branch: [branch]</span><br><span class=\"line\">    message: [message]</span><br><span class=\"line\">    name: [git user] </span><br><span class=\"line\">    email: [git email]</span><br><span class=\"line\">    extend_dirs: [extend directory] #其他要提交的目录</span><br><span class=\"line\">    ignore_hidden: true #忽略隐藏文件</span><br><span class=\"line\">    ignore_pattern: regexp #忽略正则匹配的隐藏文件</span><br></pre></td></tr></table></figure></p>\n<p>之后，只需要<code>hexo d -g</code>一条命令就可以生成和部署了。关于 hexo-deployer-git 这个插件的参数<a href=\"https://hexo.io/zh-cn/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">hexo官方文档</a>介绍的并不全面，建议去<a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"noopener\">hexo-deployer-git官方文档</a>查看相关配置参数。</p>\n<p><strong>注意:</strong> </p>\n<ul>\n<li>默认部署，只将生成的HTML相关文件(/public)推送到 github</li>\n<li>若想把本地的生成器项目相关文件也推送到 github，则要配置 <code>extend_dirs: /</code></li>\n<li>message、name、email 的内容要用引号括起来</li>\n<li>name、email 的配置信息用来覆盖全局的 git config 中的配置，更改这两项后，需要删除根目录下的<code>.deploy_git</code>，部署时才会生效</li>\n<li>master 只能放<code>/public</code>下的文件，将项目所有文件放到 master 分支下，会导致页面 build 失败。若想将本地代码全部提交，可部署在其他分支（在<code>_config.yml</code>中增加其他分支配置信息，详情参考文档）</li>\n<li>不提交 node_modules 的话，注意在项目下新建<code>.gitignore</code>文件（为什么不使用 extend_dirs ？因为需要添加的文件夹太多…）</li>\n</ul>\n<h3 id=\"搜索功能\"><a href=\"#搜索功能\" class=\"headerlink\" title=\"搜索功能\"></a>搜索功能</h3><p>全局安装插件<code>npm install hexo-generator-search --save</code><br>修改全局<code>_config.yml</code>中的配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">    path: search.xml</span><br><span class=\"line\">    field: post</span><br><span class=\"line\">    content: true</span><br></pre></td></tr></table></figure></p>\n<p>修改主题<code>themes/next/_config.yml</code>中的配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local_search:</span><br><span class=\"line\">    enable: true</span><br><span class=\"line\">    trigger: auto</span><br></pre></td></tr></table></figure></p>\n<p>生效：<code>hexo clean</code>、<code>hexo g</code>、<code>hexo s</code></p>\n<h3 id=\"Hexo目录解析\"><a href=\"#Hexo目录解析\" class=\"headerlink\" title=\"Hexo目录解析\"></a>Hexo目录解析</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── node_modules # 依赖包-安装插件及所需nodejs模块。</span><br><span class=\"line\">├── public  # 最终网页信息。即存放通过 markdown 渲染出来的 html文件。</span><br><span class=\"line\">├── scaffolds # 模板文件夹。即新建文章时，根据 scaffold 生成文件。</span><br><span class=\"line\">├── source  # 资源文件夹。即存放用户资源。</span><br><span class=\"line\">|   └── _posts # 博客文章目录。</span><br><span class=\"line\">└── themes #存放主题。Hexo根据主题生成静态页面。</span><br><span class=\"line\">├── _config.yml #网站的全局配置信息。标题、网站名称等。</span><br><span class=\"line\">├── db.json：# source 解析所得到的缓存文件。</span><br><span class=\"line\">├── package.json  # 应用程序信息。即配置Hexo运行需要js包。</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://cherryblog.site/Use-Gitpagehexo-to-develop-their-own-blog.html\" target=\"_blank\" rel=\"noopener\">利用 hexo + Gitpage 开发自己的博客</a><br><a href=\"https://www.jianshu.com/p/a938da5ddb5d\" target=\"_blank\" rel=\"noopener\">hexo浅析原理</a></p>\n"},{"title":"IP地址和子网划分","date":"2019-06-02T13:47:33.000Z","_content":"计算机知识补全计划：ip地址、子网掩码相关笔记。\n<!--more-->\n\nMAC地址：决定下跳给哪个设备\nIP地址：决定数据最终到达的计算机\n子网掩码：用来判断两台机器的ip地址是否处于同一网段\n__[课程链接](https://www.bilibili.com/video/av17905625)__\n\n一、IP地址\n    IP地址是由32位二进制组成的，写成十进制，每四位以逗号分隔：如`192.168.30.10`。IP地址分为两部分，一部分是网络部分，另一部分是主机部分；在同一网段的计算机，网络部分一样，主机部分不一样，`子网掩码`就是用来区分主机与网段的。\n1. 子网掩码\n   两台计算机在通信之前，首先需要判断需要进行通信的设备与当前的设备是否处于同一网段之中：`IP地址`和`子网掩码`做`与运算`得出的结果就是网络部分，网络部分相同则处于同一网段。\n   例如：A计算机想与B计算机通信，首先A将A的子网掩码和A的IP地址进行与运算，再将A的子网掩码和B的IP地址进行运算，若二者结果相同，则处于同一网段。\n2. IP地址的分类\n   * A类：1-127  缺省子网掩码：255.0.0.0\n   * B类：128-191 缺省子网掩码：255.255.0.0\n   * C类：192-223 缺省子网掩码：255.255.255.0\n   * D类（组播）：224-239 缺省子网掩码：无\n   * E类（研究）：240-255 缺省子网掩码：无\n````\n[0----------128-----192---224-240-255]\n````\n在分配IP地址时注意：\n`xxx.0.0.0`：全0表示这个子网的网络号，不可用；\n`xxx.255.255.255`：全1表示这个子网的广播地址，代表网段内所有计算机，可跨网段，不可用。（注意，若全为255，则只能发送给本网段的机器，不能跨网段）\n例如C类地址，能设置的主机号只有2-254，一般路由器的ip地址为该网段内的第一个或者最后一个，避免冲突。\n3. 保留地址\n   * 保留的私网地址（不在公网上，相互之间不能通信（内网））：\n     * A 10.0.0.0 -- 10.255.255.255\n     * B 172.16.0.0 -- 172.31.255.255\n     * C 192.168.0.0 -- 192.168.255.255\n   * 本地环回地址\n     * 127.0.0.1 本机\n     * 169.254.0.0 断网地址\n     * 224.0.0.1 特殊的组播地址，代表所有主机地址\n   ","source":"_posts/IP地址和子网划分.md","raw":"---\ntitle: IP地址和子网划分\ndate: 2019-06-02 21:47:33\ntags: [计算机网络]\ncategories: 计算机相关知识\n---\n计算机知识补全计划：ip地址、子网掩码相关笔记。\n<!--more-->\n\nMAC地址：决定下跳给哪个设备\nIP地址：决定数据最终到达的计算机\n子网掩码：用来判断两台机器的ip地址是否处于同一网段\n__[课程链接](https://www.bilibili.com/video/av17905625)__\n\n一、IP地址\n    IP地址是由32位二进制组成的，写成十进制，每四位以逗号分隔：如`192.168.30.10`。IP地址分为两部分，一部分是网络部分，另一部分是主机部分；在同一网段的计算机，网络部分一样，主机部分不一样，`子网掩码`就是用来区分主机与网段的。\n1. 子网掩码\n   两台计算机在通信之前，首先需要判断需要进行通信的设备与当前的设备是否处于同一网段之中：`IP地址`和`子网掩码`做`与运算`得出的结果就是网络部分，网络部分相同则处于同一网段。\n   例如：A计算机想与B计算机通信，首先A将A的子网掩码和A的IP地址进行与运算，再将A的子网掩码和B的IP地址进行运算，若二者结果相同，则处于同一网段。\n2. IP地址的分类\n   * A类：1-127  缺省子网掩码：255.0.0.0\n   * B类：128-191 缺省子网掩码：255.255.0.0\n   * C类：192-223 缺省子网掩码：255.255.255.0\n   * D类（组播）：224-239 缺省子网掩码：无\n   * E类（研究）：240-255 缺省子网掩码：无\n````\n[0----------128-----192---224-240-255]\n````\n在分配IP地址时注意：\n`xxx.0.0.0`：全0表示这个子网的网络号，不可用；\n`xxx.255.255.255`：全1表示这个子网的广播地址，代表网段内所有计算机，可跨网段，不可用。（注意，若全为255，则只能发送给本网段的机器，不能跨网段）\n例如C类地址，能设置的主机号只有2-254，一般路由器的ip地址为该网段内的第一个或者最后一个，避免冲突。\n3. 保留地址\n   * 保留的私网地址（不在公网上，相互之间不能通信（内网））：\n     * A 10.0.0.0 -- 10.255.255.255\n     * B 172.16.0.0 -- 172.31.255.255\n     * C 192.168.0.0 -- 192.168.255.255\n   * 本地环回地址\n     * 127.0.0.1 本机\n     * 169.254.0.0 断网地址\n     * 224.0.0.1 特殊的组播地址，代表所有主机地址\n   ","slug":"IP地址和子网划分","published":1,"updated":"2019-11-14T03:55:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7v8vsrs000596fylpk57ia7","content":"<p>计算机知识补全计划：ip地址、子网掩码相关笔记。<br><a id=\"more\"></a></p>\n<p>MAC地址：决定下跳给哪个设备<br>IP地址：决定数据最终到达的计算机<br>子网掩码：用来判断两台机器的ip地址是否处于同一网段<br><strong><a href=\"https://www.bilibili.com/video/av17905625\" target=\"_blank\" rel=\"noopener\">课程链接</a></strong></p>\n<p>一、IP地址<br>    IP地址是由32位二进制组成的，写成十进制，每四位以逗号分隔：如<code>192.168.30.10</code>。IP地址分为两部分，一部分是网络部分，另一部分是主机部分；在同一网段的计算机，网络部分一样，主机部分不一样，<code>子网掩码</code>就是用来区分主机与网段的。</p>\n<ol>\n<li>子网掩码<br>两台计算机在通信之前，首先需要判断需要进行通信的设备与当前的设备是否处于同一网段之中：<code>IP地址</code>和<code>子网掩码</code>做<code>与运算</code>得出的结果就是网络部分，网络部分相同则处于同一网段。<br>例如：A计算机想与B计算机通信，首先A将A的子网掩码和A的IP地址进行与运算，再将A的子网掩码和B的IP地址进行运算，若二者结果相同，则处于同一网段。</li>\n<li>IP地址的分类<ul>\n<li>A类：1-127  缺省子网掩码：255.0.0.0</li>\n<li>B类：128-191 缺省子网掩码：255.255.0.0</li>\n<li>C类：192-223 缺省子网掩码：255.255.255.0</li>\n<li>D类（组播）：224-239 缺省子网掩码：无</li>\n<li>E类（研究）：240-255 缺省子网掩码：无<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0----------128-----192---224-240-255]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<p>在分配IP地址时注意：<br><code>xxx.0.0.0</code>：全0表示这个子网的网络号，不可用；<br><code>xxx.255.255.255</code>：全1表示这个子网的广播地址，代表网段内所有计算机，可跨网段，不可用。（注意，若全为255，则只能发送给本网段的机器，不能跨网段）<br>例如C类地址，能设置的主机号只有2-254，一般路由器的ip地址为该网段内的第一个或者最后一个，避免冲突。</p>\n<ol start=\"3\">\n<li>保留地址<ul>\n<li>保留的私网地址（不在公网上，相互之间不能通信（内网））：<ul>\n<li>A 10.0.0.0 – 10.255.255.255</li>\n<li>B 172.16.0.0 – 172.31.255.255</li>\n<li>C 192.168.0.0 – 192.168.255.255</li>\n</ul>\n</li>\n<li>本地环回地址<ul>\n<li>127.0.0.1 本机</li>\n<li>169.254.0.0 断网地址</li>\n<li>224.0.0.1 特殊的组播地址，代表所有主机地址</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>计算机知识补全计划：ip地址、子网掩码相关笔记。<br></p>","more":"<p></p>\n<p>MAC地址：决定下跳给哪个设备<br>IP地址：决定数据最终到达的计算机<br>子网掩码：用来判断两台机器的ip地址是否处于同一网段<br><strong><a href=\"https://www.bilibili.com/video/av17905625\" target=\"_blank\" rel=\"noopener\">课程链接</a></strong></p>\n<p>一、IP地址<br>    IP地址是由32位二进制组成的，写成十进制，每四位以逗号分隔：如<code>192.168.30.10</code>。IP地址分为两部分，一部分是网络部分，另一部分是主机部分；在同一网段的计算机，网络部分一样，主机部分不一样，<code>子网掩码</code>就是用来区分主机与网段的。</p>\n<ol>\n<li>子网掩码<br>两台计算机在通信之前，首先需要判断需要进行通信的设备与当前的设备是否处于同一网段之中：<code>IP地址</code>和<code>子网掩码</code>做<code>与运算</code>得出的结果就是网络部分，网络部分相同则处于同一网段。<br>例如：A计算机想与B计算机通信，首先A将A的子网掩码和A的IP地址进行与运算，再将A的子网掩码和B的IP地址进行运算，若二者结果相同，则处于同一网段。</li>\n<li>IP地址的分类<ul>\n<li>A类：1-127  缺省子网掩码：255.0.0.0</li>\n<li>B类：128-191 缺省子网掩码：255.255.0.0</li>\n<li>C类：192-223 缺省子网掩码：255.255.255.0</li>\n<li>D类（组播）：224-239 缺省子网掩码：无</li>\n<li>E类（研究）：240-255 缺省子网掩码：无<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0----------128-----192---224-240-255]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<p>在分配IP地址时注意：<br><code>xxx.0.0.0</code>：全0表示这个子网的网络号，不可用；<br><code>xxx.255.255.255</code>：全1表示这个子网的广播地址，代表网段内所有计算机，可跨网段，不可用。（注意，若全为255，则只能发送给本网段的机器，不能跨网段）<br>例如C类地址，能设置的主机号只有2-254，一般路由器的ip地址为该网段内的第一个或者最后一个，避免冲突。</p>\n<ol start=\"3\">\n<li>保留地址<ul>\n<li>保留的私网地址（不在公网上，相互之间不能通信（内网））：<ul>\n<li>A 10.0.0.0 – 10.255.255.255</li>\n<li>B 172.16.0.0 – 172.31.255.255</li>\n<li>C 192.168.0.0 – 192.168.255.255</li>\n</ul>\n</li>\n<li>本地环回地址<ul>\n<li>127.0.0.1 本机</li>\n<li>169.254.0.0 断网地址</li>\n<li>224.0.0.1 特殊的组播地址，代表所有主机地址</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>"},{"title":"Flink 初探","date":"2019-11-14T06:58:06.000Z","_content":"Apache Flink 是一个分布式处理引擎，在有界或无界数据流上进行有状态的计算。工作时偶然接触到一点点，有些概念虽然有点抽象，但是思路却值得借鉴。本文记录用 Flink 实时求均值、水印生成、以及迟到的数据元触发计算更新等等，是一篇纯探索性文章。<del>用笔记形式记录，以便忘记。</del>\n<!--more-->\n### Flink 中文官网 \n[https://flink.apachecn.org/docs/1.7-SNAPSHOT/#/](https://flink.apachecn.org/docs/1.7-SNAPSHOT/#/)\n\n### 一、Flink 简介\nFlink 是一个针对流数据和批数据的分布式处理引擎，代码主要是由 Java 实现，部分代码是 Scala。它可以处理有界的批量数据集、也可以处理无界的实时数据集。对 Flink 而言，其主要处理的场景就是流数据。<br/>\n\n### 二、流处理和批处理的区别\n__批处理__ 特点：离线、单次处理的数据量大、处理速度慢、非实时计算。常见的批处理就是数据库深夜定时跑任务，因为批量计算会占用大量资源。\n__流处理__ 特点：在线，单次处理数据量小、处理速度快、实时计算。常见的应用场景就是监控、统计、实时推荐等。\n\n### 三、学习目标\n用 Flink 消费已有数据源，实时计算数据均值，并允许数据元延迟到来时，重新触发计算。\n\n### 四、涉及到的名词概念\n1. __窗口__ (Windows)：对某段数据流进行统计，即统计区间；Windows 可以是时间驱动的（例如：每30秒）或数据驱动（例如：每100个数据元）。\n2. __时间__ (Time)：程序中引用的时间；Flink 支持三种时间：事件时间、摄取时间和处理时间。\n3. __算子__ (Operator)：Flink 内部提供的时间/数据流/数据元的处理函数。\n4. __时间戳__ (TimeStamp)/__水印__ (WaterMark)：使用数据源的时间或者系统时间为到来的数据元加上时间戳；数据流加上水印标记，为了等下个数据元到来时知道该数据元是否应该被包含在当前次计算中。\n__注：Watermark 是随数据产生的，窗口时间现在处于什么位置看 Watermark，只有新产生的一条数据超出窗口长度，这个窗口才会触发计算。(当使用事件时间窗口时，可能会发生数据元迟到的情况，则必须为数据流设置时间戳和水印)__\n   \n#### 允许迟到 allowedLateness\n只要应该属于此窗口的第一个数据元到达，就会创建一个窗口，当时间（事件或处理时间）超过其结束时间戳加上用户指定 allowed lateness 时，窗口将被完全删除。\n__allowedLateness 用来设置窗口销毁时间__，而 waterMark 是用来设置窗口激活时间。当时延迟时间超过 allowedLateness 设置的时间，这个计算窗口就会被销毁，开始下一个窗口，即使被销毁的窗口还没有触发计算。\n\n#### 窗口函数\nFlink 的窗口函数会暴露出数据流不同状态时的处理函数，具体的高级操作或者运算例如聚合、求均值等函数需要我们自己去实现。\n例如聚合窗口 `stream.aggregate` 的参数 AggregateFunction <IN, ACC, OUT>，具有三种的类型：输入类型(IN)、累加器类型(ACC)和输出类型(OUT)。\n使用 AggregateFunction 求均值（示例代码来自[官网](https://flink.apachecn.org/docs/1.7-SNAPSHOT/#/27?id=window-functions)）：\n````java\n    private static class AverageAggregate\n    implements AggregateFunction<Tuple2<String, Long>, Tuple2<Long, Long>, Double> {\n    @Override\n    public Tuple2<Long, Long> createAccumulator() {\n      return new Tuple2<>(0L, 0L);\n    }\n\n    @Override\n    public Tuple2<Long, Long> add(Tuple2<String, Long> value, Tuple2<Long, Long> accumulator) {\n      return new Tuple2<>(accumulator.f0 + value.f1, accumulator.f1 + 1L);\n    }\n\n    @Override\n    public Double getResult(Tuple2<Long, Long> accumulator) {\n      return ((double) accumulator.f0) / accumulator.f1;\n    }\n\n    @Override\n    public Tuple2<Long, Long> merge(Tuple2<Long, Long> a, Tuple2<Long, Long> b) {\n      return new Tuple2<>(a.f0 + b.f0, a.f1 + b.f1);\n    }\n\n    DataStream<Tuple2<String, Long>> input = ...;\n\n    input\n        .keyBy(<key selector>)\n        .window(<window assigner>)\n        .aggregate(new AverageAggregate());\n    }\n````\n\n### 五、遇到的问题\n* 数据流过滤后，只剩下被过滤的数据：\n  * __SingleOutputStreamOperator__ 旁路分支：这个分支用来获取被过滤掉的数据，并不是过滤后的数据。\n* 给数据流设置时间戳之后，迟到的数据没有被抛弃：\n  * __stream.assignTimestampsAndWatermarks__ 定期生成水印：最简单的特殊情况是给定源任务看到的时间戳按升序发生的情况。在这种情况下，当前时间戳始终可以充当水印，因为没有更早的时间戳会到达。且生成的时间戳会覆盖事件原有的，若存在迟到的数据元，用这个方法，则数据不会被抛弃。\n  * __BoundedOutOfOrdernessTimestampExtractor__ ：Flink 提供此参数为固定数量的迟到者分配时间戳和水印。若有数据元可能迟到的场景，请应用此方法。\n* [设置的水印时间戳，超时告警，但是数据没有被丢弃？](https://stackoverflow.com/questions/50114412/flink-watermark-and-triggers-late-elements-not-discarded-on-event-time)\n* [最新记录没有被统计，只有下一条数据写入时，之前的数据才会被触发统计？](https://developer.aliyun.com/ask/128431?spm=a2c6h.13159736)\n\n### 六、数据下沉 Data Sink\nFlink 可以自己指定数据源连接器，以及数据下沉(接收)目标。从 Flink 官网上来看连接器支持 Kalfa、Elasticsearch、HDFS、RabbitMQ 等等，公司已有 RabbitMQ 数据源，使用 RabbitMQ sink 接收数时，注意事件消费者不要和事件生产者的队列名不要相同，否则会报错。\n\n### 参考链接\n* [http://www.54tianzhisheng.cn/](http://www.54tianzhisheng.cn/)\n* [Flink 水印机制到底怎么回事](https://bbs.csdn.net/topics/392567642?list=70723145)\n* [Flink 水印机制](https://www.cnblogs.com/starzy/p/11439997.html)\n* [Flink实战--如何使用水印](https://blog.csdn.net/aA518189/article/details/85233247)\n* [Flink Window 的 Timestamps/Watermarks 和 allowedLateness 的区别](https://www.cnblogs.com/jiang-it/p/9280946.html)\n* [Flink 零基础实战教程：如何计算实时商品](http://wuchong.me/blog/2018/11/07/use-flink-calculate-hot-items/)\n* [《从0到1学习Flink》-- Flink读取 Kafka 数据写入到 RabbitMQ](https://cloud.tencent.com/developer/article/1419588)","source":"_posts/Flink-初探.md","raw":"---\ntitle: Flink 初探\ndate: 2019-11-14 14:58:06\ntags: [大数据, 流处理]\ncategories: 大数据\n---\nApache Flink 是一个分布式处理引擎，在有界或无界数据流上进行有状态的计算。工作时偶然接触到一点点，有些概念虽然有点抽象，但是思路却值得借鉴。本文记录用 Flink 实时求均值、水印生成、以及迟到的数据元触发计算更新等等，是一篇纯探索性文章。<del>用笔记形式记录，以便忘记。</del>\n<!--more-->\n### Flink 中文官网 \n[https://flink.apachecn.org/docs/1.7-SNAPSHOT/#/](https://flink.apachecn.org/docs/1.7-SNAPSHOT/#/)\n\n### 一、Flink 简介\nFlink 是一个针对流数据和批数据的分布式处理引擎，代码主要是由 Java 实现，部分代码是 Scala。它可以处理有界的批量数据集、也可以处理无界的实时数据集。对 Flink 而言，其主要处理的场景就是流数据。<br/>\n\n### 二、流处理和批处理的区别\n__批处理__ 特点：离线、单次处理的数据量大、处理速度慢、非实时计算。常见的批处理就是数据库深夜定时跑任务，因为批量计算会占用大量资源。\n__流处理__ 特点：在线，单次处理数据量小、处理速度快、实时计算。常见的应用场景就是监控、统计、实时推荐等。\n\n### 三、学习目标\n用 Flink 消费已有数据源，实时计算数据均值，并允许数据元延迟到来时，重新触发计算。\n\n### 四、涉及到的名词概念\n1. __窗口__ (Windows)：对某段数据流进行统计，即统计区间；Windows 可以是时间驱动的（例如：每30秒）或数据驱动（例如：每100个数据元）。\n2. __时间__ (Time)：程序中引用的时间；Flink 支持三种时间：事件时间、摄取时间和处理时间。\n3. __算子__ (Operator)：Flink 内部提供的时间/数据流/数据元的处理函数。\n4. __时间戳__ (TimeStamp)/__水印__ (WaterMark)：使用数据源的时间或者系统时间为到来的数据元加上时间戳；数据流加上水印标记，为了等下个数据元到来时知道该数据元是否应该被包含在当前次计算中。\n__注：Watermark 是随数据产生的，窗口时间现在处于什么位置看 Watermark，只有新产生的一条数据超出窗口长度，这个窗口才会触发计算。(当使用事件时间窗口时，可能会发生数据元迟到的情况，则必须为数据流设置时间戳和水印)__\n   \n#### 允许迟到 allowedLateness\n只要应该属于此窗口的第一个数据元到达，就会创建一个窗口，当时间（事件或处理时间）超过其结束时间戳加上用户指定 allowed lateness 时，窗口将被完全删除。\n__allowedLateness 用来设置窗口销毁时间__，而 waterMark 是用来设置窗口激活时间。当时延迟时间超过 allowedLateness 设置的时间，这个计算窗口就会被销毁，开始下一个窗口，即使被销毁的窗口还没有触发计算。\n\n#### 窗口函数\nFlink 的窗口函数会暴露出数据流不同状态时的处理函数，具体的高级操作或者运算例如聚合、求均值等函数需要我们自己去实现。\n例如聚合窗口 `stream.aggregate` 的参数 AggregateFunction <IN, ACC, OUT>，具有三种的类型：输入类型(IN)、累加器类型(ACC)和输出类型(OUT)。\n使用 AggregateFunction 求均值（示例代码来自[官网](https://flink.apachecn.org/docs/1.7-SNAPSHOT/#/27?id=window-functions)）：\n````java\n    private static class AverageAggregate\n    implements AggregateFunction<Tuple2<String, Long>, Tuple2<Long, Long>, Double> {\n    @Override\n    public Tuple2<Long, Long> createAccumulator() {\n      return new Tuple2<>(0L, 0L);\n    }\n\n    @Override\n    public Tuple2<Long, Long> add(Tuple2<String, Long> value, Tuple2<Long, Long> accumulator) {\n      return new Tuple2<>(accumulator.f0 + value.f1, accumulator.f1 + 1L);\n    }\n\n    @Override\n    public Double getResult(Tuple2<Long, Long> accumulator) {\n      return ((double) accumulator.f0) / accumulator.f1;\n    }\n\n    @Override\n    public Tuple2<Long, Long> merge(Tuple2<Long, Long> a, Tuple2<Long, Long> b) {\n      return new Tuple2<>(a.f0 + b.f0, a.f1 + b.f1);\n    }\n\n    DataStream<Tuple2<String, Long>> input = ...;\n\n    input\n        .keyBy(<key selector>)\n        .window(<window assigner>)\n        .aggregate(new AverageAggregate());\n    }\n````\n\n### 五、遇到的问题\n* 数据流过滤后，只剩下被过滤的数据：\n  * __SingleOutputStreamOperator__ 旁路分支：这个分支用来获取被过滤掉的数据，并不是过滤后的数据。\n* 给数据流设置时间戳之后，迟到的数据没有被抛弃：\n  * __stream.assignTimestampsAndWatermarks__ 定期生成水印：最简单的特殊情况是给定源任务看到的时间戳按升序发生的情况。在这种情况下，当前时间戳始终可以充当水印，因为没有更早的时间戳会到达。且生成的时间戳会覆盖事件原有的，若存在迟到的数据元，用这个方法，则数据不会被抛弃。\n  * __BoundedOutOfOrdernessTimestampExtractor__ ：Flink 提供此参数为固定数量的迟到者分配时间戳和水印。若有数据元可能迟到的场景，请应用此方法。\n* [设置的水印时间戳，超时告警，但是数据没有被丢弃？](https://stackoverflow.com/questions/50114412/flink-watermark-and-triggers-late-elements-not-discarded-on-event-time)\n* [最新记录没有被统计，只有下一条数据写入时，之前的数据才会被触发统计？](https://developer.aliyun.com/ask/128431?spm=a2c6h.13159736)\n\n### 六、数据下沉 Data Sink\nFlink 可以自己指定数据源连接器，以及数据下沉(接收)目标。从 Flink 官网上来看连接器支持 Kalfa、Elasticsearch、HDFS、RabbitMQ 等等，公司已有 RabbitMQ 数据源，使用 RabbitMQ sink 接收数时，注意事件消费者不要和事件生产者的队列名不要相同，否则会报错。\n\n### 参考链接\n* [http://www.54tianzhisheng.cn/](http://www.54tianzhisheng.cn/)\n* [Flink 水印机制到底怎么回事](https://bbs.csdn.net/topics/392567642?list=70723145)\n* [Flink 水印机制](https://www.cnblogs.com/starzy/p/11439997.html)\n* [Flink实战--如何使用水印](https://blog.csdn.net/aA518189/article/details/85233247)\n* [Flink Window 的 Timestamps/Watermarks 和 allowedLateness 的区别](https://www.cnblogs.com/jiang-it/p/9280946.html)\n* [Flink 零基础实战教程：如何计算实时商品](http://wuchong.me/blog/2018/11/07/use-flink-calculate-hot-items/)\n* [《从0到1学习Flink》-- Flink读取 Kafka 数据写入到 RabbitMQ](https://cloud.tencent.com/developer/article/1419588)","slug":"Flink-初探","published":1,"updated":"2019-11-20T04:04:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7v8vsrv000896fyvklwb8yt","content":"<p>Apache Flink 是一个分布式处理引擎，在有界或无界数据流上进行有状态的计算。工作时偶然接触到一点点，有些概念虽然有点抽象，但是思路却值得借鉴。本文记录用 Flink 实时求均值、水印生成、以及迟到的数据元触发计算更新等等，是一篇纯探索性文章。<del>用笔记形式记录，以便忘记。</del><br><a id=\"more\"></a></p>\n<h3 id=\"Flink-中文官网\"><a href=\"#Flink-中文官网\" class=\"headerlink\" title=\"Flink 中文官网\"></a>Flink 中文官网</h3><p><a href=\"https://flink.apachecn.org/docs/1.7-SNAPSHOT/#/\" target=\"_blank\" rel=\"noopener\">https://flink.apachecn.org/docs/1.7-SNAPSHOT/#/</a></p>\n<h3 id=\"一、Flink-简介\"><a href=\"#一、Flink-简介\" class=\"headerlink\" title=\"一、Flink 简介\"></a>一、Flink 简介</h3><p>Flink 是一个针对流数据和批数据的分布式处理引擎，代码主要是由 Java 实现，部分代码是 Scala。它可以处理有界的批量数据集、也可以处理无界的实时数据集。对 Flink 而言，其主要处理的场景就是流数据。<br></p>\n<h3 id=\"二、流处理和批处理的区别\"><a href=\"#二、流处理和批处理的区别\" class=\"headerlink\" title=\"二、流处理和批处理的区别\"></a>二、流处理和批处理的区别</h3><p><strong>批处理</strong> 特点：离线、单次处理的数据量大、处理速度慢、非实时计算。常见的批处理就是数据库深夜定时跑任务，因为批量计算会占用大量资源。<br><strong>流处理</strong> 特点：在线，单次处理数据量小、处理速度快、实时计算。常见的应用场景就是监控、统计、实时推荐等。</p>\n<h3 id=\"三、学习目标\"><a href=\"#三、学习目标\" class=\"headerlink\" title=\"三、学习目标\"></a>三、学习目标</h3><p>用 Flink 消费已有数据源，实时计算数据均值，并允许数据元延迟到来时，重新触发计算。</p>\n<h3 id=\"四、涉及到的名词概念\"><a href=\"#四、涉及到的名词概念\" class=\"headerlink\" title=\"四、涉及到的名词概念\"></a>四、涉及到的名词概念</h3><ol>\n<li><strong>窗口</strong> (Windows)：对某段数据流进行统计，即统计区间；Windows 可以是时间驱动的（例如：每30秒）或数据驱动（例如：每100个数据元）。</li>\n<li><strong>时间</strong> (Time)：程序中引用的时间；Flink 支持三种时间：事件时间、摄取时间和处理时间。</li>\n<li><strong>算子</strong> (Operator)：Flink 内部提供的时间/数据流/数据元的处理函数。</li>\n<li><strong>时间戳</strong> (TimeStamp)/<strong>水印</strong> (WaterMark)：使用数据源的时间或者系统时间为到来的数据元加上时间戳；数据流加上水印标记，为了等下个数据元到来时知道该数据元是否应该被包含在当前次计算中。<br><strong>注：Watermark 是随数据产生的，窗口时间现在处于什么位置看 Watermark，只有新产生的一条数据超出窗口长度，这个窗口才会触发计算。(当使用事件时间窗口时，可能会发生数据元迟到的情况，则必须为数据流设置时间戳和水印)</strong></li>\n</ol>\n<h4 id=\"允许迟到-allowedLateness\"><a href=\"#允许迟到-allowedLateness\" class=\"headerlink\" title=\"允许迟到 allowedLateness\"></a>允许迟到 allowedLateness</h4><p>只要应该属于此窗口的第一个数据元到达，就会创建一个窗口，当时间（事件或处理时间）超过其结束时间戳加上用户指定 allowed lateness 时，窗口将被完全删除。<br><strong>allowedLateness 用来设置窗口销毁时间</strong>，而 waterMark 是用来设置窗口激活时间。当时延迟时间超过 allowedLateness 设置的时间，这个计算窗口就会被销毁，开始下一个窗口，即使被销毁的窗口还没有触发计算。</p>\n<h4 id=\"窗口函数\"><a href=\"#窗口函数\" class=\"headerlink\" title=\"窗口函数\"></a>窗口函数</h4><p>Flink 的窗口函数会暴露出数据流不同状态时的处理函数，具体的高级操作或者运算例如聚合、求均值等函数需要我们自己去实现。<br>例如聚合窗口 <code>stream.aggregate</code> 的参数 AggregateFunction &lt;IN, ACC, OUT&gt;，具有三种的类型：输入类型(IN)、累加器类型(ACC)和输出类型(OUT)。<br>使用 AggregateFunction 求均值（示例代码来自<a href=\"https://flink.apachecn.org/docs/1.7-SNAPSHOT/#/27?id=window-functions\" target=\"_blank\" rel=\"noopener\">官网</a>）：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AverageAggregate</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">implements</span> <span class=\"title\">AggregateFunction</span>&lt;<span class=\"title\">Tuple2</span>&lt;<span class=\"title\">String</span>, <span class=\"title\">Long</span>&gt;, <span class=\"title\">Tuple2</span>&lt;<span class=\"title\">Long</span>, <span class=\"title\">Long</span>&gt;, <span class=\"title\">Double</span>&gt; </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Tuple2&lt;Long, Long&gt; <span class=\"title\">createAccumulator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Tuple2&lt;&gt;(<span class=\"number\">0L</span>, <span class=\"number\">0L</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Tuple2&lt;Long, Long&gt; <span class=\"title\">add</span><span class=\"params\">(Tuple2&lt;String, Long&gt; value, Tuple2&lt;Long, Long&gt; accumulator)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Tuple2&lt;&gt;(accumulator.f0 + value.f1, accumulator.f1 + <span class=\"number\">1L</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Double <span class=\"title\">getResult</span><span class=\"params\">(Tuple2&lt;Long, Long&gt; accumulator)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((<span class=\"keyword\">double</span>) accumulator.f0) / accumulator.f1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Tuple2&lt;Long, Long&gt; <span class=\"title\">merge</span><span class=\"params\">(Tuple2&lt;Long, Long&gt; a, Tuple2&lt;Long, Long&gt; b)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Tuple2&lt;&gt;(a.f0 + b.f0, a.f1 + b.f1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DataStream&lt;Tuple2&lt;String, Long&gt;&gt; input = ...;</span><br><span class=\"line\"></span><br><span class=\"line\">input</span><br><span class=\"line\">    .keyBy(&lt;key selector&gt;)</span><br><span class=\"line\">    .window(&lt;window assigner&gt;)</span><br><span class=\"line\">    .aggregate(<span class=\"keyword\">new</span> AverageAggregate());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"五、遇到的问题\"><a href=\"#五、遇到的问题\" class=\"headerlink\" title=\"五、遇到的问题\"></a>五、遇到的问题</h3><ul>\n<li>数据流过滤后，只剩下被过滤的数据：<ul>\n<li><strong>SingleOutputStreamOperator</strong> 旁路分支：这个分支用来获取被过滤掉的数据，并不是过滤后的数据。</li>\n</ul>\n</li>\n<li>给数据流设置时间戳之后，迟到的数据没有被抛弃：<ul>\n<li><strong>stream.assignTimestampsAndWatermarks</strong> 定期生成水印：最简单的特殊情况是给定源任务看到的时间戳按升序发生的情况。在这种情况下，当前时间戳始终可以充当水印，因为没有更早的时间戳会到达。且生成的时间戳会覆盖事件原有的，若存在迟到的数据元，用这个方法，则数据不会被抛弃。</li>\n<li><strong>BoundedOutOfOrdernessTimestampExtractor</strong> ：Flink 提供此参数为固定数量的迟到者分配时间戳和水印。若有数据元可能迟到的场景，请应用此方法。</li>\n</ul>\n</li>\n<li><a href=\"https://stackoverflow.com/questions/50114412/flink-watermark-and-triggers-late-elements-not-discarded-on-event-time\" target=\"_blank\" rel=\"noopener\">设置的水印时间戳，超时告警，但是数据没有被丢弃？</a></li>\n<li><a href=\"https://developer.aliyun.com/ask/128431?spm=a2c6h.13159736\" target=\"_blank\" rel=\"noopener\">最新记录没有被统计，只有下一条数据写入时，之前的数据才会被触发统计？</a></li>\n</ul>\n<h3 id=\"六、数据下沉-Data-Sink\"><a href=\"#六、数据下沉-Data-Sink\" class=\"headerlink\" title=\"六、数据下沉 Data Sink\"></a>六、数据下沉 Data Sink</h3><p>Flink 可以自己指定数据源连接器，以及数据下沉(接收)目标。从 Flink 官网上来看连接器支持 Kalfa、Elasticsearch、HDFS、RabbitMQ 等等，公司已有 RabbitMQ 数据源，使用 RabbitMQ sink 接收数时，注意事件消费者不要和事件生产者的队列名不要相同，否则会报错。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"http://www.54tianzhisheng.cn/\" target=\"_blank\" rel=\"noopener\">http://www.54tianzhisheng.cn/</a></li>\n<li><a href=\"https://bbs.csdn.net/topics/392567642?list=70723145\" target=\"_blank\" rel=\"noopener\">Flink 水印机制到底怎么回事</a></li>\n<li><a href=\"https://www.cnblogs.com/starzy/p/11439997.html\" target=\"_blank\" rel=\"noopener\">Flink 水印机制</a></li>\n<li><a href=\"https://blog.csdn.net/aA518189/article/details/85233247\" target=\"_blank\" rel=\"noopener\">Flink实战–如何使用水印</a></li>\n<li><a href=\"https://www.cnblogs.com/jiang-it/p/9280946.html\" target=\"_blank\" rel=\"noopener\">Flink Window 的 Timestamps/Watermarks 和 allowedLateness 的区别</a></li>\n<li><a href=\"http://wuchong.me/blog/2018/11/07/use-flink-calculate-hot-items/\" target=\"_blank\" rel=\"noopener\">Flink 零基础实战教程：如何计算实时商品</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1419588\" target=\"_blank\" rel=\"noopener\">《从0到1学习Flink》– Flink读取 Kafka 数据写入到 RabbitMQ</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Apache Flink 是一个分布式处理引擎，在有界或无界数据流上进行有状态的计算。工作时偶然接触到一点点，有些概念虽然有点抽象，但是思路却值得借鉴。本文记录用 Flink 实时求均值、水印生成、以及迟到的数据元触发计算更新等等，是一篇纯探索性文章。<del>用笔记形式记录，以便忘记。</del><br></p>","more":"<p></p>\n<h3 id=\"Flink-中文官网\"><a href=\"#Flink-中文官网\" class=\"headerlink\" title=\"Flink 中文官网\"></a>Flink 中文官网</h3><p><a href=\"https://flink.apachecn.org/docs/1.7-SNAPSHOT/#/\" target=\"_blank\" rel=\"noopener\">https://flink.apachecn.org/docs/1.7-SNAPSHOT/#/</a></p>\n<h3 id=\"一、Flink-简介\"><a href=\"#一、Flink-简介\" class=\"headerlink\" title=\"一、Flink 简介\"></a>一、Flink 简介</h3><p>Flink 是一个针对流数据和批数据的分布式处理引擎，代码主要是由 Java 实现，部分代码是 Scala。它可以处理有界的批量数据集、也可以处理无界的实时数据集。对 Flink 而言，其主要处理的场景就是流数据。<br></p>\n<h3 id=\"二、流处理和批处理的区别\"><a href=\"#二、流处理和批处理的区别\" class=\"headerlink\" title=\"二、流处理和批处理的区别\"></a>二、流处理和批处理的区别</h3><p><strong>批处理</strong> 特点：离线、单次处理的数据量大、处理速度慢、非实时计算。常见的批处理就是数据库深夜定时跑任务，因为批量计算会占用大量资源。<br><strong>流处理</strong> 特点：在线，单次处理数据量小、处理速度快、实时计算。常见的应用场景就是监控、统计、实时推荐等。</p>\n<h3 id=\"三、学习目标\"><a href=\"#三、学习目标\" class=\"headerlink\" title=\"三、学习目标\"></a>三、学习目标</h3><p>用 Flink 消费已有数据源，实时计算数据均值，并允许数据元延迟到来时，重新触发计算。</p>\n<h3 id=\"四、涉及到的名词概念\"><a href=\"#四、涉及到的名词概念\" class=\"headerlink\" title=\"四、涉及到的名词概念\"></a>四、涉及到的名词概念</h3><ol>\n<li><strong>窗口</strong> (Windows)：对某段数据流进行统计，即统计区间；Windows 可以是时间驱动的（例如：每30秒）或数据驱动（例如：每100个数据元）。</li>\n<li><strong>时间</strong> (Time)：程序中引用的时间；Flink 支持三种时间：事件时间、摄取时间和处理时间。</li>\n<li><strong>算子</strong> (Operator)：Flink 内部提供的时间/数据流/数据元的处理函数。</li>\n<li><strong>时间戳</strong> (TimeStamp)/<strong>水印</strong> (WaterMark)：使用数据源的时间或者系统时间为到来的数据元加上时间戳；数据流加上水印标记，为了等下个数据元到来时知道该数据元是否应该被包含在当前次计算中。<br><strong>注：Watermark 是随数据产生的，窗口时间现在处于什么位置看 Watermark，只有新产生的一条数据超出窗口长度，这个窗口才会触发计算。(当使用事件时间窗口时，可能会发生数据元迟到的情况，则必须为数据流设置时间戳和水印)</strong></li>\n</ol>\n<h4 id=\"允许迟到-allowedLateness\"><a href=\"#允许迟到-allowedLateness\" class=\"headerlink\" title=\"允许迟到 allowedLateness\"></a>允许迟到 allowedLateness</h4><p>只要应该属于此窗口的第一个数据元到达，就会创建一个窗口，当时间（事件或处理时间）超过其结束时间戳加上用户指定 allowed lateness 时，窗口将被完全删除。<br><strong>allowedLateness 用来设置窗口销毁时间</strong>，而 waterMark 是用来设置窗口激活时间。当时延迟时间超过 allowedLateness 设置的时间，这个计算窗口就会被销毁，开始下一个窗口，即使被销毁的窗口还没有触发计算。</p>\n<h4 id=\"窗口函数\"><a href=\"#窗口函数\" class=\"headerlink\" title=\"窗口函数\"></a>窗口函数</h4><p>Flink 的窗口函数会暴露出数据流不同状态时的处理函数，具体的高级操作或者运算例如聚合、求均值等函数需要我们自己去实现。<br>例如聚合窗口 <code>stream.aggregate</code> 的参数 AggregateFunction &lt;IN, ACC, OUT&gt;，具有三种的类型：输入类型(IN)、累加器类型(ACC)和输出类型(OUT)。<br>使用 AggregateFunction 求均值（示例代码来自<a href=\"https://flink.apachecn.org/docs/1.7-SNAPSHOT/#/27?id=window-functions\" target=\"_blank\" rel=\"noopener\">官网</a>）：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AverageAggregate</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">implements</span> <span class=\"title\">AggregateFunction</span>&lt;<span class=\"title\">Tuple2</span>&lt;<span class=\"title\">String</span>, <span class=\"title\">Long</span>&gt;, <span class=\"title\">Tuple2</span>&lt;<span class=\"title\">Long</span>, <span class=\"title\">Long</span>&gt;, <span class=\"title\">Double</span>&gt; </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Tuple2&lt;Long, Long&gt; <span class=\"title\">createAccumulator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Tuple2&lt;&gt;(<span class=\"number\">0L</span>, <span class=\"number\">0L</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Tuple2&lt;Long, Long&gt; <span class=\"title\">add</span><span class=\"params\">(Tuple2&lt;String, Long&gt; value, Tuple2&lt;Long, Long&gt; accumulator)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Tuple2&lt;&gt;(accumulator.f0 + value.f1, accumulator.f1 + <span class=\"number\">1L</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Double <span class=\"title\">getResult</span><span class=\"params\">(Tuple2&lt;Long, Long&gt; accumulator)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((<span class=\"keyword\">double</span>) accumulator.f0) / accumulator.f1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Tuple2&lt;Long, Long&gt; <span class=\"title\">merge</span><span class=\"params\">(Tuple2&lt;Long, Long&gt; a, Tuple2&lt;Long, Long&gt; b)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Tuple2&lt;&gt;(a.f0 + b.f0, a.f1 + b.f1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DataStream&lt;Tuple2&lt;String, Long&gt;&gt; input = ...;</span><br><span class=\"line\"></span><br><span class=\"line\">input</span><br><span class=\"line\">    .keyBy(&lt;key selector&gt;)</span><br><span class=\"line\">    .window(&lt;window assigner&gt;)</span><br><span class=\"line\">    .aggregate(<span class=\"keyword\">new</span> AverageAggregate());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"五、遇到的问题\"><a href=\"#五、遇到的问题\" class=\"headerlink\" title=\"五、遇到的问题\"></a>五、遇到的问题</h3><ul>\n<li>数据流过滤后，只剩下被过滤的数据：<ul>\n<li><strong>SingleOutputStreamOperator</strong> 旁路分支：这个分支用来获取被过滤掉的数据，并不是过滤后的数据。</li>\n</ul>\n</li>\n<li>给数据流设置时间戳之后，迟到的数据没有被抛弃：<ul>\n<li><strong>stream.assignTimestampsAndWatermarks</strong> 定期生成水印：最简单的特殊情况是给定源任务看到的时间戳按升序发生的情况。在这种情况下，当前时间戳始终可以充当水印，因为没有更早的时间戳会到达。且生成的时间戳会覆盖事件原有的，若存在迟到的数据元，用这个方法，则数据不会被抛弃。</li>\n<li><strong>BoundedOutOfOrdernessTimestampExtractor</strong> ：Flink 提供此参数为固定数量的迟到者分配时间戳和水印。若有数据元可能迟到的场景，请应用此方法。</li>\n</ul>\n</li>\n<li><a href=\"https://stackoverflow.com/questions/50114412/flink-watermark-and-triggers-late-elements-not-discarded-on-event-time\" target=\"_blank\" rel=\"noopener\">设置的水印时间戳，超时告警，但是数据没有被丢弃？</a></li>\n<li><a href=\"https://developer.aliyun.com/ask/128431?spm=a2c6h.13159736\" target=\"_blank\" rel=\"noopener\">最新记录没有被统计，只有下一条数据写入时，之前的数据才会被触发统计？</a></li>\n</ul>\n<h3 id=\"六、数据下沉-Data-Sink\"><a href=\"#六、数据下沉-Data-Sink\" class=\"headerlink\" title=\"六、数据下沉 Data Sink\"></a>六、数据下沉 Data Sink</h3><p>Flink 可以自己指定数据源连接器，以及数据下沉(接收)目标。从 Flink 官网上来看连接器支持 Kalfa、Elasticsearch、HDFS、RabbitMQ 等等，公司已有 RabbitMQ 数据源，使用 RabbitMQ sink 接收数时，注意事件消费者不要和事件生产者的队列名不要相同，否则会报错。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"http://www.54tianzhisheng.cn/\" target=\"_blank\" rel=\"noopener\">http://www.54tianzhisheng.cn/</a></li>\n<li><a href=\"https://bbs.csdn.net/topics/392567642?list=70723145\" target=\"_blank\" rel=\"noopener\">Flink 水印机制到底怎么回事</a></li>\n<li><a href=\"https://www.cnblogs.com/starzy/p/11439997.html\" target=\"_blank\" rel=\"noopener\">Flink 水印机制</a></li>\n<li><a href=\"https://blog.csdn.net/aA518189/article/details/85233247\" target=\"_blank\" rel=\"noopener\">Flink实战–如何使用水印</a></li>\n<li><a href=\"https://www.cnblogs.com/jiang-it/p/9280946.html\" target=\"_blank\" rel=\"noopener\">Flink Window 的 Timestamps/Watermarks 和 allowedLateness 的区别</a></li>\n<li><a href=\"http://wuchong.me/blog/2018/11/07/use-flink-calculate-hot-items/\" target=\"_blank\" rel=\"noopener\">Flink 零基础实战教程：如何计算实时商品</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1419588\" target=\"_blank\" rel=\"noopener\">《从0到1学习Flink》– Flink读取 Kafka 数据写入到 RabbitMQ</a></li>\n</ul>"},{"title":"Markdown 语法小记","date":"2018-09-05T10:21:06.000Z","_content":"第一个Hexo-next主题的blog，主要用来记录markdown语法\n<!--more-->\n\n### 测试文本样式\n#### 测试加粗样式\n**加粗**\n#### 测试斜体样式\n*斜体*\n#### 测试删除线样式\n~~删除线~~\n#### 测试引用样式\n> 山穷水尽疑无路，柳暗花明又一村\n\n### 测试代码样式\n#### 测试指定代码语言代码样式\n````javascript\nvar FE_developer = {\n\tname: 'Kuro',\n\tage: '22'\n};\n\nconsole.log('info', FE_developer);\n````\n#### 测试单行代码样式\n在JS中我们常用`console.log()`来输出调试信息。\n\n#### 测试代码块样式\n```\nfunction test(a, b){\n\tsetTimeout(function(){\n\t\tconsole.log(a + b);\n\t\tsetTimeout(arguments.callee, 500);\n\t\t}, 500)\n}\n```\n\n### 测试连接样式\n百度一下：[Baidu](https://www.baidu.com)\n\n### 测试首行缩进样式\n&emsp;&emsp;markdown 语法主要考虑的是英文，中文缩进需要依赖 HTML 的空格符号\n````\n    半角空格: &nbsp;\n    全角空格：&emsp;\n````\n\n### 测试表格样式\n| 左对齐 | 居中对齐 | 右对齐 |\n| - | :-: | -: | \n| Harry Potter | Gryffindor| 90 | \n| Hermione Granger | Gryffindor | 100 | \n| Draco Malfoy | Slytherin | 90 |\n\n表格使用 `|` 来分隔不同的单元格，使用 `-` 来分隔表头和其他行。\n__注意：表格前若有文本，需要空一行才能正常显示__\n\n\n### 测试插入图片\n来自百度图片: ![夏日西瓜](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1536749860&di=13b529d93aa88d542b4e7d1fece8cd85&imgtype=jpg&er=1&src=http%3A%2F%2Fpic.90sjimg.com%2Fdesign%2F00%2F89%2F85%2F87%2Fs_1024_58bd1a48a0978.png \"西瓜\")\n\n### 测试列表\ngit常用语法\n* git status\n* git add .\n* git commit -m\"XXX\"\n\n+ git stash\n+ git list\n+ git stash apply stash@{n}\n\n- git diff\n- git reset --hard\n\n1. 列表内容\n   * 列表嵌套第一条\n   * 列表嵌套第二条\n2. 列表内容\n3. 列表内容\n\n### 测试复选框样式\n- [x] 选项一\n- [ ] 选项二\n- [ ] 选项三\n\n### 测试流程图样式\n```flow\nst=>start: 开始\ne=>end: 结束\nio1=>inputoutput: 输入聚类类数k\nop1=>operation: 筛选初始质心\nop2=>operation: 计算样本点到各个质心之间的距离\n并将其归到距离其最近的质心所在簇中\nop3=>operation: 计算各簇均值，生成新的质心\nc1=>condition: 新旧质心距离小于阈值\nio2=>inputoutput: 输出聚类结果\n\nst->io1->op1->op2->op3->c1\nc1(no)->op2\nc1(yes)->io2->e\n```\n\n### 其他注意事项\n* 在 Markdown 中直接使用尖括号`<something>`会被文本默认为HTML标签语句而不予显示。\n    * 使用转义字符`&lt;`代替`<`，用`&gt;`代替`>`\n    * 或者右闭合的尖括号前加一个转义符号`\\`，例如：`<something\\>`\n","source":"_posts/MarkDown语法小记.md","raw":"---\ntitle: Markdown 语法小记\ndate: 2018-09-05 18:21:06\ntags: [Markdown]\ncategories: 其他小结\n---\n第一个Hexo-next主题的blog，主要用来记录markdown语法\n<!--more-->\n\n### 测试文本样式\n#### 测试加粗样式\n**加粗**\n#### 测试斜体样式\n*斜体*\n#### 测试删除线样式\n~~删除线~~\n#### 测试引用样式\n> 山穷水尽疑无路，柳暗花明又一村\n\n### 测试代码样式\n#### 测试指定代码语言代码样式\n````javascript\nvar FE_developer = {\n\tname: 'Kuro',\n\tage: '22'\n};\n\nconsole.log('info', FE_developer);\n````\n#### 测试单行代码样式\n在JS中我们常用`console.log()`来输出调试信息。\n\n#### 测试代码块样式\n```\nfunction test(a, b){\n\tsetTimeout(function(){\n\t\tconsole.log(a + b);\n\t\tsetTimeout(arguments.callee, 500);\n\t\t}, 500)\n}\n```\n\n### 测试连接样式\n百度一下：[Baidu](https://www.baidu.com)\n\n### 测试首行缩进样式\n&emsp;&emsp;markdown 语法主要考虑的是英文，中文缩进需要依赖 HTML 的空格符号\n````\n    半角空格: &nbsp;\n    全角空格：&emsp;\n````\n\n### 测试表格样式\n| 左对齐 | 居中对齐 | 右对齐 |\n| - | :-: | -: | \n| Harry Potter | Gryffindor| 90 | \n| Hermione Granger | Gryffindor | 100 | \n| Draco Malfoy | Slytherin | 90 |\n\n表格使用 `|` 来分隔不同的单元格，使用 `-` 来分隔表头和其他行。\n__注意：表格前若有文本，需要空一行才能正常显示__\n\n\n### 测试插入图片\n来自百度图片: ![夏日西瓜](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1536749860&di=13b529d93aa88d542b4e7d1fece8cd85&imgtype=jpg&er=1&src=http%3A%2F%2Fpic.90sjimg.com%2Fdesign%2F00%2F89%2F85%2F87%2Fs_1024_58bd1a48a0978.png \"西瓜\")\n\n### 测试列表\ngit常用语法\n* git status\n* git add .\n* git commit -m\"XXX\"\n\n+ git stash\n+ git list\n+ git stash apply stash@{n}\n\n- git diff\n- git reset --hard\n\n1. 列表内容\n   * 列表嵌套第一条\n   * 列表嵌套第二条\n2. 列表内容\n3. 列表内容\n\n### 测试复选框样式\n- [x] 选项一\n- [ ] 选项二\n- [ ] 选项三\n\n### 测试流程图样式\n```flow\nst=>start: 开始\ne=>end: 结束\nio1=>inputoutput: 输入聚类类数k\nop1=>operation: 筛选初始质心\nop2=>operation: 计算样本点到各个质心之间的距离\n并将其归到距离其最近的质心所在簇中\nop3=>operation: 计算各簇均值，生成新的质心\nc1=>condition: 新旧质心距离小于阈值\nio2=>inputoutput: 输出聚类结果\n\nst->io1->op1->op2->op3->c1\nc1(no)->op2\nc1(yes)->io2->e\n```\n\n### 其他注意事项\n* 在 Markdown 中直接使用尖括号`<something>`会被文本默认为HTML标签语句而不予显示。\n    * 使用转义字符`&lt;`代替`<`，用`&gt;`代替`>`\n    * 或者右闭合的尖括号前加一个转义符号`\\`，例如：`<something\\>`\n","slug":"MarkDown语法小记","published":1,"updated":"2020-03-06T02:41:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7v8vsrw000996fy4tmfi59i","content":"<p>第一个Hexo-next主题的blog，主要用来记录markdown语法<br><a id=\"more\"></a></p>\n<h3 id=\"测试文本样式\"><a href=\"#测试文本样式\" class=\"headerlink\" title=\"测试文本样式\"></a>测试文本样式</h3><h4 id=\"测试加粗样式\"><a href=\"#测试加粗样式\" class=\"headerlink\" title=\"测试加粗样式\"></a>测试加粗样式</h4><p><strong>加粗</strong></p>\n<h4 id=\"测试斜体样式\"><a href=\"#测试斜体样式\" class=\"headerlink\" title=\"测试斜体样式\"></a>测试斜体样式</h4><p><em>斜体</em></p>\n<h4 id=\"测试删除线样式\"><a href=\"#测试删除线样式\" class=\"headerlink\" title=\"测试删除线样式\"></a>测试删除线样式</h4><p><del>删除线</del></p>\n<h4 id=\"测试引用样式\"><a href=\"#测试引用样式\" class=\"headerlink\" title=\"测试引用样式\"></a>测试引用样式</h4><blockquote>\n<p>山穷水尽疑无路，柳暗花明又一村</p>\n</blockquote>\n<h3 id=\"测试代码样式\"><a href=\"#测试代码样式\" class=\"headerlink\" title=\"测试代码样式\"></a>测试代码样式</h3><h4 id=\"测试指定代码语言代码样式\"><a href=\"#测试指定代码语言代码样式\" class=\"headerlink\" title=\"测试指定代码语言代码样式\"></a>测试指定代码语言代码样式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> FE_developer = &#123;</span><br><span class=\"line\">\tname: <span class=\"string\">'Kuro'</span>,</span><br><span class=\"line\">\tage: <span class=\"string\">'22'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'info'</span>, FE_developer);</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试单行代码样式\"><a href=\"#测试单行代码样式\" class=\"headerlink\" title=\"测试单行代码样式\"></a>测试单行代码样式</h4><p>在JS中我们常用<code>console.log()</code>来输出调试信息。</p>\n<h4 id=\"测试代码块样式\"><a href=\"#测试代码块样式\" class=\"headerlink\" title=\"测试代码块样式\"></a>测试代码块样式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test(a, b)&#123;</span><br><span class=\"line\">\tsetTimeout(function()&#123;</span><br><span class=\"line\">\t\tconsole.log(a + b);</span><br><span class=\"line\">\t\tsetTimeout(arguments.callee, 500);</span><br><span class=\"line\">\t\t&#125;, 500)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试连接样式\"><a href=\"#测试连接样式\" class=\"headerlink\" title=\"测试连接样式\"></a>测试连接样式</h3><p>百度一下：<a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noopener\">Baidu</a></p>\n<h3 id=\"测试首行缩进样式\"><a href=\"#测试首行缩进样式\" class=\"headerlink\" title=\"测试首行缩进样式\"></a>测试首行缩进样式</h3><p>&emsp;&emsp;markdown 语法主要考虑的是英文，中文缩进需要依赖 HTML 的空格符号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">半角空格: &amp;nbsp;</span><br><span class=\"line\">全角空格：&amp;emsp;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"测试表格样式\"><a href=\"#测试表格样式\" class=\"headerlink\" title=\"测试表格样式\"></a>测试表格样式</h3><table>\n<thead>\n<tr>\n<th>左对齐</th>\n<th style=\"text-align:center\">居中对齐</th>\n<th style=\"text-align:right\">右对齐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Harry Potter</td>\n<td style=\"text-align:center\">Gryffindor</td>\n<td style=\"text-align:right\">90</td>\n</tr>\n<tr>\n<td>Hermione Granger</td>\n<td style=\"text-align:center\">Gryffindor</td>\n<td style=\"text-align:right\">100</td>\n</tr>\n<tr>\n<td>Draco Malfoy</td>\n<td style=\"text-align:center\">Slytherin</td>\n<td style=\"text-align:right\">90</td>\n</tr>\n</tbody>\n</table>\n<p>表格使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行。<br><strong>注意：表格前若有文本，需要空一行才能正常显示</strong></p>\n<h3 id=\"测试插入图片\"><a href=\"#测试插入图片\" class=\"headerlink\" title=\"测试插入图片\"></a>测试插入图片</h3><p>来自百度图片: <img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1536749860&amp;di=13b529d93aa88d542b4e7d1fece8cd85&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fpic.90sjimg.com%2Fdesign%2F00%2F89%2F85%2F87%2Fs_1024_58bd1a48a0978.png\" alt=\"夏日西瓜\" title=\"西瓜\"></p>\n<h3 id=\"测试列表\"><a href=\"#测试列表\" class=\"headerlink\" title=\"测试列表\"></a>测试列表</h3><p>git常用语法</p>\n<ul>\n<li>git status</li>\n<li>git add .</li>\n<li>git commit -m”XXX”</li>\n</ul>\n<ul>\n<li>git stash</li>\n<li>git list</li>\n<li>git stash apply stash@{n}</li>\n</ul>\n<ul>\n<li>git diff</li>\n<li>git reset –hard</li>\n</ul>\n<ol>\n<li>列表内容<ul>\n<li>列表嵌套第一条</li>\n<li>列表嵌套第二条</li>\n</ul>\n</li>\n<li>列表内容</li>\n<li>列表内容</li>\n</ol>\n<h3 id=\"测试复选框样式\"><a href=\"#测试复选框样式\" class=\"headerlink\" title=\"测试复选框样式\"></a>测试复选框样式</h3><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 选项一</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 选项二</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 选项三</li>\n</ul>\n<h3 id=\"测试流程图样式\"><a href=\"#测试流程图样式\" class=\"headerlink\" title=\"测试流程图样式\"></a>测试流程图样式</h3><div id=\"flowchart-0\" class=\"flow-chart\"></div>\n\n<h3 id=\"其他注意事项\"><a href=\"#其他注意事项\" class=\"headerlink\" title=\"其他注意事项\"></a>其他注意事项</h3><ul>\n<li>在 Markdown 中直接使用尖括号<code>&lt;something&gt;</code>会被文本默认为HTML标签语句而不予显示。<ul>\n<li>使用转义字符<code>&amp;lt;</code>代替<code>&lt;</code>，用<code>&amp;gt;</code>代替<code>&gt;</code></li>\n<li>或者右闭合的尖括号前加一个转义符号<code>\\</code>，例如：<code>&lt;something\\&gt;</code><br><script src=\"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js\"></script><textarea id=\"flowchart-0-code\" style=\"display: none\">st=>start: 开始\ne=>end: 结束\nio1=>inputoutput: 输入聚类类数k\nop1=>operation: 筛选初始质心\nop2=>operation: 计算样本点到各个质心之间的距离\n并将其归到距离其最近的质心所在簇中\nop3=>operation: 计算各簇均值，生成新的质心\nc1=>condition: 新旧质心距离小于阈值\nio2=>inputoutput: 输出聚类结果\n\nst->io1->op1->op2->op3->c1\nc1(no)->op2\nc1(yes)->io2->e</textarea><textarea id=\"flowchart-0-options\" style=\"display: none\">{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"flowchart-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-0\", options);</script></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>第一个Hexo-next主题的blog，主要用来记录markdown语法<br></p>","more":"<p></p>\n<h3 id=\"测试文本样式\"><a href=\"#测试文本样式\" class=\"headerlink\" title=\"测试文本样式\"></a>测试文本样式</h3><h4 id=\"测试加粗样式\"><a href=\"#测试加粗样式\" class=\"headerlink\" title=\"测试加粗样式\"></a>测试加粗样式</h4><p><strong>加粗</strong></p>\n<h4 id=\"测试斜体样式\"><a href=\"#测试斜体样式\" class=\"headerlink\" title=\"测试斜体样式\"></a>测试斜体样式</h4><p><em>斜体</em></p>\n<h4 id=\"测试删除线样式\"><a href=\"#测试删除线样式\" class=\"headerlink\" title=\"测试删除线样式\"></a>测试删除线样式</h4><p><del>删除线</del></p>\n<h4 id=\"测试引用样式\"><a href=\"#测试引用样式\" class=\"headerlink\" title=\"测试引用样式\"></a>测试引用样式</h4><blockquote>\n<p>山穷水尽疑无路，柳暗花明又一村</p>\n</blockquote>\n<h3 id=\"测试代码样式\"><a href=\"#测试代码样式\" class=\"headerlink\" title=\"测试代码样式\"></a>测试代码样式</h3><h4 id=\"测试指定代码语言代码样式\"><a href=\"#测试指定代码语言代码样式\" class=\"headerlink\" title=\"测试指定代码语言代码样式\"></a>测试指定代码语言代码样式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> FE_developer = &#123;</span><br><span class=\"line\">\tname: <span class=\"string\">'Kuro'</span>,</span><br><span class=\"line\">\tage: <span class=\"string\">'22'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'info'</span>, FE_developer);</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试单行代码样式\"><a href=\"#测试单行代码样式\" class=\"headerlink\" title=\"测试单行代码样式\"></a>测试单行代码样式</h4><p>在JS中我们常用<code>console.log()</code>来输出调试信息。</p>\n<h4 id=\"测试代码块样式\"><a href=\"#测试代码块样式\" class=\"headerlink\" title=\"测试代码块样式\"></a>测试代码块样式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test(a, b)&#123;</span><br><span class=\"line\">\tsetTimeout(function()&#123;</span><br><span class=\"line\">\t\tconsole.log(a + b);</span><br><span class=\"line\">\t\tsetTimeout(arguments.callee, 500);</span><br><span class=\"line\">\t\t&#125;, 500)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试连接样式\"><a href=\"#测试连接样式\" class=\"headerlink\" title=\"测试连接样式\"></a>测试连接样式</h3><p>百度一下：<a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noopener\">Baidu</a></p>\n<h3 id=\"测试首行缩进样式\"><a href=\"#测试首行缩进样式\" class=\"headerlink\" title=\"测试首行缩进样式\"></a>测试首行缩进样式</h3><p>&emsp;&emsp;markdown 语法主要考虑的是英文，中文缩进需要依赖 HTML 的空格符号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">半角空格: &amp;nbsp;</span><br><span class=\"line\">全角空格：&amp;emsp;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"测试表格样式\"><a href=\"#测试表格样式\" class=\"headerlink\" title=\"测试表格样式\"></a>测试表格样式</h3><table>\n<thead>\n<tr>\n<th>左对齐</th>\n<th style=\"text-align:center\">居中对齐</th>\n<th style=\"text-align:right\">右对齐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Harry Potter</td>\n<td style=\"text-align:center\">Gryffindor</td>\n<td style=\"text-align:right\">90</td>\n</tr>\n<tr>\n<td>Hermione Granger</td>\n<td style=\"text-align:center\">Gryffindor</td>\n<td style=\"text-align:right\">100</td>\n</tr>\n<tr>\n<td>Draco Malfoy</td>\n<td style=\"text-align:center\">Slytherin</td>\n<td style=\"text-align:right\">90</td>\n</tr>\n</tbody>\n</table>\n<p>表格使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行。<br><strong>注意：表格前若有文本，需要空一行才能正常显示</strong></p>\n<h3 id=\"测试插入图片\"><a href=\"#测试插入图片\" class=\"headerlink\" title=\"测试插入图片\"></a>测试插入图片</h3><p>来自百度图片: <img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1536749860&amp;di=13b529d93aa88d542b4e7d1fece8cd85&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fpic.90sjimg.com%2Fdesign%2F00%2F89%2F85%2F87%2Fs_1024_58bd1a48a0978.png\" alt=\"夏日西瓜\" title=\"西瓜\"></p>\n<h3 id=\"测试列表\"><a href=\"#测试列表\" class=\"headerlink\" title=\"测试列表\"></a>测试列表</h3><p>git常用语法</p>\n<ul>\n<li>git status</li>\n<li>git add .</li>\n<li>git commit -m”XXX”</li>\n</ul>\n<ul>\n<li>git stash</li>\n<li>git list</li>\n<li>git stash apply stash@{n}</li>\n</ul>\n<ul>\n<li>git diff</li>\n<li>git reset –hard</li>\n</ul>\n<ol>\n<li>列表内容<ul>\n<li>列表嵌套第一条</li>\n<li>列表嵌套第二条</li>\n</ul>\n</li>\n<li>列表内容</li>\n<li>列表内容</li>\n</ol>\n<h3 id=\"测试复选框样式\"><a href=\"#测试复选框样式\" class=\"headerlink\" title=\"测试复选框样式\"></a>测试复选框样式</h3><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 选项一</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 选项二</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 选项三</li>\n</ul>\n<h3 id=\"测试流程图样式\"><a href=\"#测试流程图样式\" class=\"headerlink\" title=\"测试流程图样式\"></a>测试流程图样式</h3><div id=\"flowchart-0\" class=\"flow-chart\"></div>\n\n<h3 id=\"其他注意事项\"><a href=\"#其他注意事项\" class=\"headerlink\" title=\"其他注意事项\"></a>其他注意事项</h3><ul>\n<li>在 Markdown 中直接使用尖括号<code>&lt;something&gt;</code>会被文本默认为HTML标签语句而不予显示。<ul>\n<li>使用转义字符<code>&amp;lt;</code>代替<code>&lt;</code>，用<code>&amp;gt;</code>代替<code>&gt;</code></li>\n<li>或者右闭合的尖括号前加一个转义符号<code>\\</code>，例如：<code>&lt;something\\&gt;</code><br><script src=\"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js\"></script><textarea id=\"flowchart-0-code\" style=\"display: none\">st=>start: 开始\ne=>end: 结束\nio1=>inputoutput: 输入聚类类数k\nop1=>operation: 筛选初始质心\nop2=>operation: 计算样本点到各个质心之间的距离\n并将其归到距离其最近的质心所在簇中\nop3=>operation: 计算各簇均值，生成新的质心\nc1=>condition: 新旧质心距离小于阈值\nio2=>inputoutput: 输出聚类结果\n\nst->io1->op1->op2->op3->c1\nc1(no)->op2\nc1(yes)->io2->e</textarea><textarea id=\"flowchart-0-options\" style=\"display: none\">{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"flowchart-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-0\", options);</script></li>\n</ul>\n</li>\n</ul>"},{"title":"Linux命令行与shell脚本学习","date":"2018-11-30T08:00:10.000Z","_content":"《Linux命令行与shell脚本编程大全》读书小结，熟悉一下常用的命令行操作。书籍比较基础，对熟悉Linux命令行的人来说参考意义不大。主要记录下书中提到的、没提到的常用的命令。\n<!--more-->\n### 基础操作\n* . 代表当前目录\n* .. 代表父级目录\n* ~ 代表根目录 表名当前工作目录位于用户home目录之下\n* man <directive\\> 可查看指令可使用的参数手册\n* `tab` 键自动补全文件名\n* cd 切换目录\n* linux 中的文件路径全部采用正斜线`/`，windows中的路径都是反斜线`\\`而且带盘符\n* ls 列出当前路径下的所有文件\n    * -F 在显示子目录的时候在它的文件名之后加上一个斜线(“/”)字符\n    * -F -R 遍历(递归)出当前目录下的子文件夹的所有内容(可以缩写成 ls -FR )\n    * -a 列出所有文件，包括隐藏文件\n    * -l 列出文件的所有信息\n* pwd 查看当前所在位置的全路径\n* sudo 以 root 用户身份运行命令\n  \n### 文件基础操作\n* open <fileName\\> 用默认程序打开文件\n* touch <fileName\\> 创建一个文件 (不可在不存在的目录下新建文件)\n* mkdir <directory\\> 创建一个文件夹\n    * -p 创建多个层级的文件夹\n* rmdir <directory\\> 只删除空目录\n    * 在非空目录下使用 rm -r 命令\n* cp <fileName\\> <targetDirectory/fileName> 复制文件到目标文件夹/文件名\n    * -i 强制 shell 询问是否覆盖同名文件\n* scp <fileName\\> <root@targetPath> 远程拷贝文件 可以跨服务器\n* mv <fileName\\> <directory/fileName> 用来 移动/重命名 文件\n    * -i 强制 shell 询问是否覆盖同名文件\n* rm <fileName\\> 删除文件/文件夹中的所有内容\n    * -i 强制 shell 询问是否删除文件\n    * -f 强制删除，没有警告信息也没有声音提示\n    * -r 递归删除目录及目录内所有文件  \n    * __注意：Linux 中没有回收站或垃圾箱，文件一旦删除，就无法再找回__\n* ls -l <fileName\\> 查看文件权限\n* chmod value <fileName\\> 更改文件权限\n  * 权限描述顺序依次是：Owner(User)、Group、Other\n  * r=读取属性 //值=4\n  * w=写入属性 //值=2\n  * x=执行属性 //值=1\n  ![文件权限](/file-permissions.png)\n* chown(选项)(参数) 更改文件夹所有者和所属组\n  * chown -R user:group .git 将.git文件夹的权限设置为 group 下的 user\n  \n### 文件内容操作\n* file <fileName/directoryName\\> 查看文件类型信息\n* du <fileName/directoryName\\> 用来查看文件或目录所占用的磁盘空间的大小\n    * -h 以易于阅读的方式展示\n    * -a 显示目录及其下子目录和文件占用的磁盘空间大小\n    * -s 只展示当前目录占用磁盘空间大小\n* cat/more/less <fileName\\> 查看整个文件内容\n    * cat 一次性加载完所有文件内容\n    * more 一次显示一屏文本\n    * less 一次显示一屏文本 可以上下页翻建\n* tail/head <fileName\\> 查看部分文件内容\n    * tail 默认展示文件最后10行的效果\n        * -n 2 只显示文件最后两行\n        * -f 允许其他进程使用该文件时查看该文件的内容，tail会保持活跃状态，并不断显示添加到文件中的内容。（可用来实时监测系统日志）\n    * head 默认展示文件前10行内容\n        * 不支持 -f 属性\n* grep match_pattern <fileName\\> 强大的文本搜索工具，可以使用正则表达式搜索文本，并显示出匹配的行数\n* sed -i 's/被替换的内容/要替换的内容/g' file  -i 表示直接修改并保存\n    * [使用 sed 命令，报错`invalid command code`](https://blog.csdn.net/u010339879/article/details/90107977)，是因为 -i 原地替换是危险行为，需要指明一个备份的扩展名才可以，若给了空的扩展名，则不会备份源文件。\n    * 如 sed -i '' 's/被替换的内容/要替换的内容/g' file\n\n\n### 监控进程\n* ps 显示进程信息（瞬间占用情况）\n* top 显示进程信息（实时占用情况）\n* lsof 查看进程打开的文件\n    * lsof -i:4000 查看4000端口占用情况\n* kill [PID] 杀死对应进程\n  \n### 网络情况\n* ping <ip\\> 测试主机之间的连通性(不会自动结束，需要手动 ctrl + c 强制退出)\n* dig <url\\> 域名查询工具，可以用来测试域名系统工作是否正常\n* nsloopup <url\\> 域名查询工具，查询 DNS 相关信息\n\n### 变量\n#### 环境变量\n* printenv/env 默认输出所有环境变量（全局）\n    * printenv JAVA_HOME 输出全局设置的JAVA SDK位置\n    * env $JAVA_HOME \n    * echo $JAVA_HOME \n* echo $variableName 输出变量 ($用来表名它是个变量)\n* set 输出所有环境变量（全局和局部）\n* $HOME 表示的用户的主目录，与波浪线`~`作用一样\n\n#### 普通变量\n声明时直接声明即可使用`variable=XXX`，变量名区分大小写，但需要注意的是 __赋值时，变量名、等号和值之间没有空格__ 否则会报错`command not found`。\n常用的书写习惯是 __所有的环境变量名均使用大写字母，若是自己创建的局部变量或是shell脚本，则用小写字母，变量名区分大小写。__\n\n### vim 操作\n* vim <fileName\\> 以 vim 编辑器的方式查看当前文件\n* 按 `I` 对文件进行 INSERT 操作\n* 按 `esc` 退出当前编辑模式\n* 输入 `:` 切换到底线命令模式，可以在最底行输入其他命令\n* 输入 `wq` ，保存并退出；输入 `!q`，不保存直接退出\n* .swp 文件: 非正常关闭的 vim 编辑器会生成一个 .swp 文件\n\n### 杂项\n#### 大小写转换\n* echo $VAR_NAME | tr '[:upper:]' '[:lower:]'\n* echo $VAR_NAME | tr '[A-Z]' '[a-z]'\n\n### 其他\n* alias 可用来查看当前可用的别名(内建命令)\n  * alias 新的命令='原命令 -选项/参数' 用来定义命令别名\n* sh <fileName.sh\\> 执行shell文件\n* .xxxrc 可以看做是xxx启动运行时的配置文件\n    * 例如 .zshrc 就是 zsh 运行前要执行配置文件\n* source <fileName\\> 或者 . <fileName\\> (bash内部命令) 加载文件\n\n### 常用的配置文件地址\n* Host文件 /etc/hosts\n* 配置的SSH Key: cat ~/.ssh/id_rsa.pub\n\n### 插件\n* homebrew 包管理器\n    * brew install <packageName\\> 安装插件\n    * brew list 查看电脑安装了哪些插件\n* wget 下载网页常用的工具\n* curl 模拟htpp请求，类似于 POSTMAN\n    * curl <url\\> 直接返回 url 请求结果\n* tree 以树状图形式展示目录及其子文件\n    * tree <directory\\> -J 以 json 形式展示文件\n* tig 将git命令行可视化\n\n__其他参考:__\n* __[Linux命令大全](http://man.linuxde.net/)__\n* __[Linux命令英文缩写的含义](http://blog.chinaunix.net/uid-27164517-id-3299073.html)__\n* __[Shell基础](http://c.biancheng.net/shell/base/)__\n","source":"_posts/Linux命令行与shell脚本学习.md","raw":"---\ntitle: Linux命令行与shell脚本学习\ndate: 2018-11-30 16:00:10\ntags: [Linux&shell]\ncategories: 计算机相关知识\n---\n《Linux命令行与shell脚本编程大全》读书小结，熟悉一下常用的命令行操作。书籍比较基础，对熟悉Linux命令行的人来说参考意义不大。主要记录下书中提到的、没提到的常用的命令。\n<!--more-->\n### 基础操作\n* . 代表当前目录\n* .. 代表父级目录\n* ~ 代表根目录 表名当前工作目录位于用户home目录之下\n* man <directive\\> 可查看指令可使用的参数手册\n* `tab` 键自动补全文件名\n* cd 切换目录\n* linux 中的文件路径全部采用正斜线`/`，windows中的路径都是反斜线`\\`而且带盘符\n* ls 列出当前路径下的所有文件\n    * -F 在显示子目录的时候在它的文件名之后加上一个斜线(“/”)字符\n    * -F -R 遍历(递归)出当前目录下的子文件夹的所有内容(可以缩写成 ls -FR )\n    * -a 列出所有文件，包括隐藏文件\n    * -l 列出文件的所有信息\n* pwd 查看当前所在位置的全路径\n* sudo 以 root 用户身份运行命令\n  \n### 文件基础操作\n* open <fileName\\> 用默认程序打开文件\n* touch <fileName\\> 创建一个文件 (不可在不存在的目录下新建文件)\n* mkdir <directory\\> 创建一个文件夹\n    * -p 创建多个层级的文件夹\n* rmdir <directory\\> 只删除空目录\n    * 在非空目录下使用 rm -r 命令\n* cp <fileName\\> <targetDirectory/fileName> 复制文件到目标文件夹/文件名\n    * -i 强制 shell 询问是否覆盖同名文件\n* scp <fileName\\> <root@targetPath> 远程拷贝文件 可以跨服务器\n* mv <fileName\\> <directory/fileName> 用来 移动/重命名 文件\n    * -i 强制 shell 询问是否覆盖同名文件\n* rm <fileName\\> 删除文件/文件夹中的所有内容\n    * -i 强制 shell 询问是否删除文件\n    * -f 强制删除，没有警告信息也没有声音提示\n    * -r 递归删除目录及目录内所有文件  \n    * __注意：Linux 中没有回收站或垃圾箱，文件一旦删除，就无法再找回__\n* ls -l <fileName\\> 查看文件权限\n* chmod value <fileName\\> 更改文件权限\n  * 权限描述顺序依次是：Owner(User)、Group、Other\n  * r=读取属性 //值=4\n  * w=写入属性 //值=2\n  * x=执行属性 //值=1\n  ![文件权限](/file-permissions.png)\n* chown(选项)(参数) 更改文件夹所有者和所属组\n  * chown -R user:group .git 将.git文件夹的权限设置为 group 下的 user\n  \n### 文件内容操作\n* file <fileName/directoryName\\> 查看文件类型信息\n* du <fileName/directoryName\\> 用来查看文件或目录所占用的磁盘空间的大小\n    * -h 以易于阅读的方式展示\n    * -a 显示目录及其下子目录和文件占用的磁盘空间大小\n    * -s 只展示当前目录占用磁盘空间大小\n* cat/more/less <fileName\\> 查看整个文件内容\n    * cat 一次性加载完所有文件内容\n    * more 一次显示一屏文本\n    * less 一次显示一屏文本 可以上下页翻建\n* tail/head <fileName\\> 查看部分文件内容\n    * tail 默认展示文件最后10行的效果\n        * -n 2 只显示文件最后两行\n        * -f 允许其他进程使用该文件时查看该文件的内容，tail会保持活跃状态，并不断显示添加到文件中的内容。（可用来实时监测系统日志）\n    * head 默认展示文件前10行内容\n        * 不支持 -f 属性\n* grep match_pattern <fileName\\> 强大的文本搜索工具，可以使用正则表达式搜索文本，并显示出匹配的行数\n* sed -i 's/被替换的内容/要替换的内容/g' file  -i 表示直接修改并保存\n    * [使用 sed 命令，报错`invalid command code`](https://blog.csdn.net/u010339879/article/details/90107977)，是因为 -i 原地替换是危险行为，需要指明一个备份的扩展名才可以，若给了空的扩展名，则不会备份源文件。\n    * 如 sed -i '' 's/被替换的内容/要替换的内容/g' file\n\n\n### 监控进程\n* ps 显示进程信息（瞬间占用情况）\n* top 显示进程信息（实时占用情况）\n* lsof 查看进程打开的文件\n    * lsof -i:4000 查看4000端口占用情况\n* kill [PID] 杀死对应进程\n  \n### 网络情况\n* ping <ip\\> 测试主机之间的连通性(不会自动结束，需要手动 ctrl + c 强制退出)\n* dig <url\\> 域名查询工具，可以用来测试域名系统工作是否正常\n* nsloopup <url\\> 域名查询工具，查询 DNS 相关信息\n\n### 变量\n#### 环境变量\n* printenv/env 默认输出所有环境变量（全局）\n    * printenv JAVA_HOME 输出全局设置的JAVA SDK位置\n    * env $JAVA_HOME \n    * echo $JAVA_HOME \n* echo $variableName 输出变量 ($用来表名它是个变量)\n* set 输出所有环境变量（全局和局部）\n* $HOME 表示的用户的主目录，与波浪线`~`作用一样\n\n#### 普通变量\n声明时直接声明即可使用`variable=XXX`，变量名区分大小写，但需要注意的是 __赋值时，变量名、等号和值之间没有空格__ 否则会报错`command not found`。\n常用的书写习惯是 __所有的环境变量名均使用大写字母，若是自己创建的局部变量或是shell脚本，则用小写字母，变量名区分大小写。__\n\n### vim 操作\n* vim <fileName\\> 以 vim 编辑器的方式查看当前文件\n* 按 `I` 对文件进行 INSERT 操作\n* 按 `esc` 退出当前编辑模式\n* 输入 `:` 切换到底线命令模式，可以在最底行输入其他命令\n* 输入 `wq` ，保存并退出；输入 `!q`，不保存直接退出\n* .swp 文件: 非正常关闭的 vim 编辑器会生成一个 .swp 文件\n\n### 杂项\n#### 大小写转换\n* echo $VAR_NAME | tr '[:upper:]' '[:lower:]'\n* echo $VAR_NAME | tr '[A-Z]' '[a-z]'\n\n### 其他\n* alias 可用来查看当前可用的别名(内建命令)\n  * alias 新的命令='原命令 -选项/参数' 用来定义命令别名\n* sh <fileName.sh\\> 执行shell文件\n* .xxxrc 可以看做是xxx启动运行时的配置文件\n    * 例如 .zshrc 就是 zsh 运行前要执行配置文件\n* source <fileName\\> 或者 . <fileName\\> (bash内部命令) 加载文件\n\n### 常用的配置文件地址\n* Host文件 /etc/hosts\n* 配置的SSH Key: cat ~/.ssh/id_rsa.pub\n\n### 插件\n* homebrew 包管理器\n    * brew install <packageName\\> 安装插件\n    * brew list 查看电脑安装了哪些插件\n* wget 下载网页常用的工具\n* curl 模拟htpp请求，类似于 POSTMAN\n    * curl <url\\> 直接返回 url 请求结果\n* tree 以树状图形式展示目录及其子文件\n    * tree <directory\\> -J 以 json 形式展示文件\n* tig 将git命令行可视化\n\n__其他参考:__\n* __[Linux命令大全](http://man.linuxde.net/)__\n* __[Linux命令英文缩写的含义](http://blog.chinaunix.net/uid-27164517-id-3299073.html)__\n* __[Shell基础](http://c.biancheng.net/shell/base/)__\n","slug":"Linux命令行与shell脚本学习","published":1,"updated":"2020-03-06T08:55:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7v8vsry000c96fy28vaf5yi","content":"<p>《Linux命令行与shell脚本编程大全》读书小结，熟悉一下常用的命令行操作。书籍比较基础，对熟悉Linux命令行的人来说参考意义不大。主要记录下书中提到的、没提到的常用的命令。<br><a id=\"more\"></a></p>\n<h3 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h3><ul>\n<li>. 代表当前目录</li>\n<li>.. 代表父级目录</li>\n<li>~ 代表根目录 表名当前工作目录位于用户home目录之下</li>\n<li>man &lt;directive> 可查看指令可使用的参数手册</li>\n<li><code>tab</code> 键自动补全文件名</li>\n<li>cd 切换目录</li>\n<li>linux 中的文件路径全部采用正斜线<code>/</code>，windows中的路径都是反斜线<code>\\</code>而且带盘符</li>\n<li>ls 列出当前路径下的所有文件<ul>\n<li>-F 在显示子目录的时候在它的文件名之后加上一个斜线(“/”)字符</li>\n<li>-F -R 遍历(递归)出当前目录下的子文件夹的所有内容(可以缩写成 ls -FR )</li>\n<li>-a 列出所有文件，包括隐藏文件</li>\n<li>-l 列出文件的所有信息</li>\n</ul>\n</li>\n<li>pwd 查看当前所在位置的全路径</li>\n<li>sudo 以 root 用户身份运行命令</li>\n</ul>\n<h3 id=\"文件基础操作\"><a href=\"#文件基础操作\" class=\"headerlink\" title=\"文件基础操作\"></a>文件基础操作</h3><ul>\n<li>open &lt;fileName> 用默认程序打开文件</li>\n<li>touch &lt;fileName> 创建一个文件 (不可在不存在的目录下新建文件)</li>\n<li>mkdir &lt;directory> 创建一个文件夹<ul>\n<li>-p 创建多个层级的文件夹</li>\n</ul>\n</li>\n<li>rmdir &lt;directory> 只删除空目录<ul>\n<li>在非空目录下使用 rm -r 命令</li>\n</ul>\n</li>\n<li>cp &lt;fileName> &lt;targetDirectory/fileName&gt; 复制文件到目标文件夹/文件名<ul>\n<li>-i 强制 shell 询问是否覆盖同名文件</li>\n</ul>\n</li>\n<li>scp &lt;fileName> &lt;root@targetPath&gt; 远程拷贝文件 可以跨服务器</li>\n<li>mv &lt;fileName> &lt;directory/fileName&gt; 用来 移动/重命名 文件<ul>\n<li>-i 强制 shell 询问是否覆盖同名文件</li>\n</ul>\n</li>\n<li>rm &lt;fileName> 删除文件/文件夹中的所有内容<ul>\n<li>-i 强制 shell 询问是否删除文件</li>\n<li>-f 强制删除，没有警告信息也没有声音提示</li>\n<li>-r 递归删除目录及目录内所有文件  </li>\n<li><strong>注意：Linux 中没有回收站或垃圾箱，文件一旦删除，就无法再找回</strong></li>\n</ul>\n</li>\n<li>ls -l &lt;fileName> 查看文件权限</li>\n<li>chmod value &lt;fileName> 更改文件权限<ul>\n<li>权限描述顺序依次是：Owner(User)、Group、Other</li>\n<li>r=读取属性 //值=4</li>\n<li>w=写入属性 //值=2</li>\n<li>x=执行属性 //值=1<br><img src=\"/2018/11/30/Linux命令行与shell脚本学习/file-permissions.png\" alt=\"文件权限\"></li>\n</ul>\n</li>\n<li>chown(选项)(参数) 更改文件夹所有者和所属组<ul>\n<li>chown -R user:group .git 将.git文件夹的权限设置为 group 下的 user</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文件内容操作\"><a href=\"#文件内容操作\" class=\"headerlink\" title=\"文件内容操作\"></a>文件内容操作</h3><ul>\n<li>file &lt;fileName/directoryName> 查看文件类型信息</li>\n<li>du &lt;fileName/directoryName> 用来查看文件或目录所占用的磁盘空间的大小<ul>\n<li>-h 以易于阅读的方式展示</li>\n<li>-a 显示目录及其下子目录和文件占用的磁盘空间大小</li>\n<li>-s 只展示当前目录占用磁盘空间大小</li>\n</ul>\n</li>\n<li>cat/more/less &lt;fileName> 查看整个文件内容<ul>\n<li>cat 一次性加载完所有文件内容</li>\n<li>more 一次显示一屏文本</li>\n<li>less 一次显示一屏文本 可以上下页翻建</li>\n</ul>\n</li>\n<li>tail/head &lt;fileName> 查看部分文件内容<ul>\n<li>tail 默认展示文件最后10行的效果<ul>\n<li>-n 2 只显示文件最后两行</li>\n<li>-f 允许其他进程使用该文件时查看该文件的内容，tail会保持活跃状态，并不断显示添加到文件中的内容。（可用来实时监测系统日志）</li>\n</ul>\n</li>\n<li>head 默认展示文件前10行内容<ul>\n<li>不支持 -f 属性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>grep match_pattern &lt;fileName> 强大的文本搜索工具，可以使用正则表达式搜索文本，并显示出匹配的行数</li>\n<li>sed -i ‘s/被替换的内容/要替换的内容/g’ file  -i 表示直接修改并保存<ul>\n<li><a href=\"https://blog.csdn.net/u010339879/article/details/90107977\" target=\"_blank\" rel=\"noopener\">使用 sed 命令，报错<code>invalid command code</code></a>，是因为 -i 原地替换是危险行为，需要指明一个备份的扩展名才可以，若给了空的扩展名，则不会备份源文件。</li>\n<li>如 sed -i ‘’ ‘s/被替换的内容/要替换的内容/g’ file</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"监控进程\"><a href=\"#监控进程\" class=\"headerlink\" title=\"监控进程\"></a>监控进程</h3><ul>\n<li>ps 显示进程信息（瞬间占用情况）</li>\n<li>top 显示进程信息（实时占用情况）</li>\n<li>lsof 查看进程打开的文件<ul>\n<li>lsof -i:4000 查看4000端口占用情况</li>\n</ul>\n</li>\n<li>kill [PID] 杀死对应进程</li>\n</ul>\n<h3 id=\"网络情况\"><a href=\"#网络情况\" class=\"headerlink\" title=\"网络情况\"></a>网络情况</h3><ul>\n<li>ping &lt;ip> 测试主机之间的连通性(不会自动结束，需要手动 ctrl + c 强制退出)</li>\n<li>dig &lt;url> 域名查询工具，可以用来测试域名系统工作是否正常</li>\n<li>nsloopup &lt;url> 域名查询工具，查询 DNS 相关信息</li>\n</ul>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><ul>\n<li>printenv/env 默认输出所有环境变量（全局）<ul>\n<li>printenv JAVA_HOME 输出全局设置的JAVA SDK位置</li>\n<li>env $JAVA_HOME </li>\n<li>echo $JAVA_HOME </li>\n</ul>\n</li>\n<li>echo $variableName 输出变量 ($用来表名它是个变量)</li>\n<li>set 输出所有环境变量（全局和局部）</li>\n<li>$HOME 表示的用户的主目录，与波浪线<code>~</code>作用一样</li>\n</ul>\n<h4 id=\"普通变量\"><a href=\"#普通变量\" class=\"headerlink\" title=\"普通变量\"></a>普通变量</h4><p>声明时直接声明即可使用<code>variable=XXX</code>，变量名区分大小写，但需要注意的是 <strong>赋值时，变量名、等号和值之间没有空格</strong> 否则会报错<code>command not found</code>。<br>常用的书写习惯是 <strong>所有的环境变量名均使用大写字母，若是自己创建的局部变量或是shell脚本，则用小写字母，变量名区分大小写。</strong></p>\n<h3 id=\"vim-操作\"><a href=\"#vim-操作\" class=\"headerlink\" title=\"vim 操作\"></a>vim 操作</h3><ul>\n<li>vim &lt;fileName> 以 vim 编辑器的方式查看当前文件</li>\n<li>按 <code>I</code> 对文件进行 INSERT 操作</li>\n<li>按 <code>esc</code> 退出当前编辑模式</li>\n<li>输入 <code>:</code> 切换到底线命令模式，可以在最底行输入其他命令</li>\n<li>输入 <code>wq</code> ，保存并退出；输入 <code>!q</code>，不保存直接退出</li>\n<li>.swp 文件: 非正常关闭的 vim 编辑器会生成一个 .swp 文件</li>\n</ul>\n<h3 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h3><h4 id=\"大小写转换\"><a href=\"#大小写转换\" class=\"headerlink\" title=\"大小写转换\"></a>大小写转换</h4><ul>\n<li>echo $VAR_NAME | tr ‘[:upper:]’ ‘[:lower:]’</li>\n<li>echo $VAR_NAME | tr ‘[A-Z]’ ‘[a-z]’</li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li>alias 可用来查看当前可用的别名(内建命令)<ul>\n<li>alias 新的命令=’原命令 -选项/参数’ 用来定义命令别名</li>\n</ul>\n</li>\n<li>sh &lt;fileName.sh> 执行shell文件</li>\n<li>.xxxrc 可以看做是xxx启动运行时的配置文件<ul>\n<li>例如 .zshrc 就是 zsh 运行前要执行配置文件</li>\n</ul>\n</li>\n<li>source &lt;fileName> 或者 . &lt;fileName> (bash内部命令) 加载文件</li>\n</ul>\n<h3 id=\"常用的配置文件地址\"><a href=\"#常用的配置文件地址\" class=\"headerlink\" title=\"常用的配置文件地址\"></a>常用的配置文件地址</h3><ul>\n<li>Host文件 /etc/hosts</li>\n<li>配置的SSH Key: cat ~/.ssh/id_rsa.pub</li>\n</ul>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><ul>\n<li>homebrew 包管理器<ul>\n<li>brew install &lt;packageName> 安装插件</li>\n<li>brew list 查看电脑安装了哪些插件</li>\n</ul>\n</li>\n<li>wget 下载网页常用的工具</li>\n<li>curl 模拟htpp请求，类似于 POSTMAN<ul>\n<li>curl &lt;url> 直接返回 url 请求结果</li>\n</ul>\n</li>\n<li>tree 以树状图形式展示目录及其子文件<ul>\n<li>tree &lt;directory> -J 以 json 形式展示文件</li>\n</ul>\n</li>\n<li>tig 将git命令行可视化</li>\n</ul>\n<p><strong>其他参考:</strong></p>\n<ul>\n<li><strong><a href=\"http://man.linuxde.net/\" target=\"_blank\" rel=\"noopener\">Linux命令大全</a></strong></li>\n<li><strong><a href=\"http://blog.chinaunix.net/uid-27164517-id-3299073.html\" target=\"_blank\" rel=\"noopener\">Linux命令英文缩写的含义</a></strong></li>\n<li><strong><a href=\"http://c.biancheng.net/shell/base/\" target=\"_blank\" rel=\"noopener\">Shell基础</a></strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>《Linux命令行与shell脚本编程大全》读书小结，熟悉一下常用的命令行操作。书籍比较基础，对熟悉Linux命令行的人来说参考意义不大。主要记录下书中提到的、没提到的常用的命令。<br></p>","more":"<p></p>\n<h3 id=\"基础操作\"><a href=\"#基础操作\" class=\"headerlink\" title=\"基础操作\"></a>基础操作</h3><ul>\n<li>. 代表当前目录</li>\n<li>.. 代表父级目录</li>\n<li>~ 代表根目录 表名当前工作目录位于用户home目录之下</li>\n<li>man &lt;directive> 可查看指令可使用的参数手册</li>\n<li><code>tab</code> 键自动补全文件名</li>\n<li>cd 切换目录</li>\n<li>linux 中的文件路径全部采用正斜线<code>/</code>，windows中的路径都是反斜线<code>\\</code>而且带盘符</li>\n<li>ls 列出当前路径下的所有文件<ul>\n<li>-F 在显示子目录的时候在它的文件名之后加上一个斜线(“/”)字符</li>\n<li>-F -R 遍历(递归)出当前目录下的子文件夹的所有内容(可以缩写成 ls -FR )</li>\n<li>-a 列出所有文件，包括隐藏文件</li>\n<li>-l 列出文件的所有信息</li>\n</ul>\n</li>\n<li>pwd 查看当前所在位置的全路径</li>\n<li>sudo 以 root 用户身份运行命令</li>\n</ul>\n<h3 id=\"文件基础操作\"><a href=\"#文件基础操作\" class=\"headerlink\" title=\"文件基础操作\"></a>文件基础操作</h3><ul>\n<li>open &lt;fileName> 用默认程序打开文件</li>\n<li>touch &lt;fileName> 创建一个文件 (不可在不存在的目录下新建文件)</li>\n<li>mkdir &lt;directory> 创建一个文件夹<ul>\n<li>-p 创建多个层级的文件夹</li>\n</ul>\n</li>\n<li>rmdir &lt;directory> 只删除空目录<ul>\n<li>在非空目录下使用 rm -r 命令</li>\n</ul>\n</li>\n<li>cp &lt;fileName> &lt;targetDirectory/fileName&gt; 复制文件到目标文件夹/文件名<ul>\n<li>-i 强制 shell 询问是否覆盖同名文件</li>\n</ul>\n</li>\n<li>scp &lt;fileName> &lt;root@targetPath&gt; 远程拷贝文件 可以跨服务器</li>\n<li>mv &lt;fileName> &lt;directory/fileName&gt; 用来 移动/重命名 文件<ul>\n<li>-i 强制 shell 询问是否覆盖同名文件</li>\n</ul>\n</li>\n<li>rm &lt;fileName> 删除文件/文件夹中的所有内容<ul>\n<li>-i 强制 shell 询问是否删除文件</li>\n<li>-f 强制删除，没有警告信息也没有声音提示</li>\n<li>-r 递归删除目录及目录内所有文件  </li>\n<li><strong>注意：Linux 中没有回收站或垃圾箱，文件一旦删除，就无法再找回</strong></li>\n</ul>\n</li>\n<li>ls -l &lt;fileName> 查看文件权限</li>\n<li>chmod value &lt;fileName> 更改文件权限<ul>\n<li>权限描述顺序依次是：Owner(User)、Group、Other</li>\n<li>r=读取属性 //值=4</li>\n<li>w=写入属性 //值=2</li>\n<li>x=执行属性 //值=1<br><img src=\"/2018/11/30/Linux命令行与shell脚本学习/file-permissions.png\" alt=\"文件权限\"></li>\n</ul>\n</li>\n<li>chown(选项)(参数) 更改文件夹所有者和所属组<ul>\n<li>chown -R user:group .git 将.git文件夹的权限设置为 group 下的 user</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文件内容操作\"><a href=\"#文件内容操作\" class=\"headerlink\" title=\"文件内容操作\"></a>文件内容操作</h3><ul>\n<li>file &lt;fileName/directoryName> 查看文件类型信息</li>\n<li>du &lt;fileName/directoryName> 用来查看文件或目录所占用的磁盘空间的大小<ul>\n<li>-h 以易于阅读的方式展示</li>\n<li>-a 显示目录及其下子目录和文件占用的磁盘空间大小</li>\n<li>-s 只展示当前目录占用磁盘空间大小</li>\n</ul>\n</li>\n<li>cat/more/less &lt;fileName> 查看整个文件内容<ul>\n<li>cat 一次性加载完所有文件内容</li>\n<li>more 一次显示一屏文本</li>\n<li>less 一次显示一屏文本 可以上下页翻建</li>\n</ul>\n</li>\n<li>tail/head &lt;fileName> 查看部分文件内容<ul>\n<li>tail 默认展示文件最后10行的效果<ul>\n<li>-n 2 只显示文件最后两行</li>\n<li>-f 允许其他进程使用该文件时查看该文件的内容，tail会保持活跃状态，并不断显示添加到文件中的内容。（可用来实时监测系统日志）</li>\n</ul>\n</li>\n<li>head 默认展示文件前10行内容<ul>\n<li>不支持 -f 属性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>grep match_pattern &lt;fileName> 强大的文本搜索工具，可以使用正则表达式搜索文本，并显示出匹配的行数</li>\n<li>sed -i ‘s/被替换的内容/要替换的内容/g’ file  -i 表示直接修改并保存<ul>\n<li><a href=\"https://blog.csdn.net/u010339879/article/details/90107977\" target=\"_blank\" rel=\"noopener\">使用 sed 命令，报错<code>invalid command code</code></a>，是因为 -i 原地替换是危险行为，需要指明一个备份的扩展名才可以，若给了空的扩展名，则不会备份源文件。</li>\n<li>如 sed -i ‘’ ‘s/被替换的内容/要替换的内容/g’ file</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"监控进程\"><a href=\"#监控进程\" class=\"headerlink\" title=\"监控进程\"></a>监控进程</h3><ul>\n<li>ps 显示进程信息（瞬间占用情况）</li>\n<li>top 显示进程信息（实时占用情况）</li>\n<li>lsof 查看进程打开的文件<ul>\n<li>lsof -i:4000 查看4000端口占用情况</li>\n</ul>\n</li>\n<li>kill [PID] 杀死对应进程</li>\n</ul>\n<h3 id=\"网络情况\"><a href=\"#网络情况\" class=\"headerlink\" title=\"网络情况\"></a>网络情况</h3><ul>\n<li>ping &lt;ip> 测试主机之间的连通性(不会自动结束，需要手动 ctrl + c 强制退出)</li>\n<li>dig &lt;url> 域名查询工具，可以用来测试域名系统工作是否正常</li>\n<li>nsloopup &lt;url> 域名查询工具，查询 DNS 相关信息</li>\n</ul>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><ul>\n<li>printenv/env 默认输出所有环境变量（全局）<ul>\n<li>printenv JAVA_HOME 输出全局设置的JAVA SDK位置</li>\n<li>env $JAVA_HOME </li>\n<li>echo $JAVA_HOME </li>\n</ul>\n</li>\n<li>echo $variableName 输出变量 ($用来表名它是个变量)</li>\n<li>set 输出所有环境变量（全局和局部）</li>\n<li>$HOME 表示的用户的主目录，与波浪线<code>~</code>作用一样</li>\n</ul>\n<h4 id=\"普通变量\"><a href=\"#普通变量\" class=\"headerlink\" title=\"普通变量\"></a>普通变量</h4><p>声明时直接声明即可使用<code>variable=XXX</code>，变量名区分大小写，但需要注意的是 <strong>赋值时，变量名、等号和值之间没有空格</strong> 否则会报错<code>command not found</code>。<br>常用的书写习惯是 <strong>所有的环境变量名均使用大写字母，若是自己创建的局部变量或是shell脚本，则用小写字母，变量名区分大小写。</strong></p>\n<h3 id=\"vim-操作\"><a href=\"#vim-操作\" class=\"headerlink\" title=\"vim 操作\"></a>vim 操作</h3><ul>\n<li>vim &lt;fileName> 以 vim 编辑器的方式查看当前文件</li>\n<li>按 <code>I</code> 对文件进行 INSERT 操作</li>\n<li>按 <code>esc</code> 退出当前编辑模式</li>\n<li>输入 <code>:</code> 切换到底线命令模式，可以在最底行输入其他命令</li>\n<li>输入 <code>wq</code> ，保存并退出；输入 <code>!q</code>，不保存直接退出</li>\n<li>.swp 文件: 非正常关闭的 vim 编辑器会生成一个 .swp 文件</li>\n</ul>\n<h3 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h3><h4 id=\"大小写转换\"><a href=\"#大小写转换\" class=\"headerlink\" title=\"大小写转换\"></a>大小写转换</h4><ul>\n<li>echo $VAR_NAME | tr ‘[:upper:]’ ‘[:lower:]’</li>\n<li>echo $VAR_NAME | tr ‘[A-Z]’ ‘[a-z]’</li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li>alias 可用来查看当前可用的别名(内建命令)<ul>\n<li>alias 新的命令=’原命令 -选项/参数’ 用来定义命令别名</li>\n</ul>\n</li>\n<li>sh &lt;fileName.sh> 执行shell文件</li>\n<li>.xxxrc 可以看做是xxx启动运行时的配置文件<ul>\n<li>例如 .zshrc 就是 zsh 运行前要执行配置文件</li>\n</ul>\n</li>\n<li>source &lt;fileName> 或者 . &lt;fileName> (bash内部命令) 加载文件</li>\n</ul>\n<h3 id=\"常用的配置文件地址\"><a href=\"#常用的配置文件地址\" class=\"headerlink\" title=\"常用的配置文件地址\"></a>常用的配置文件地址</h3><ul>\n<li>Host文件 /etc/hosts</li>\n<li>配置的SSH Key: cat ~/.ssh/id_rsa.pub</li>\n</ul>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><ul>\n<li>homebrew 包管理器<ul>\n<li>brew install &lt;packageName> 安装插件</li>\n<li>brew list 查看电脑安装了哪些插件</li>\n</ul>\n</li>\n<li>wget 下载网页常用的工具</li>\n<li>curl 模拟htpp请求，类似于 POSTMAN<ul>\n<li>curl &lt;url> 直接返回 url 请求结果</li>\n</ul>\n</li>\n<li>tree 以树状图形式展示目录及其子文件<ul>\n<li>tree &lt;directory> -J 以 json 形式展示文件</li>\n</ul>\n</li>\n<li>tig 将git命令行可视化</li>\n</ul>\n<p><strong>其他参考:</strong></p>\n<ul>\n<li><strong><a href=\"http://man.linuxde.net/\" target=\"_blank\" rel=\"noopener\">Linux命令大全</a></strong></li>\n<li><strong><a href=\"http://blog.chinaunix.net/uid-27164517-id-3299073.html\" target=\"_blank\" rel=\"noopener\">Linux命令英文缩写的含义</a></strong></li>\n<li><strong><a href=\"http://c.biancheng.net/shell/base/\" target=\"_blank\" rel=\"noopener\">Shell基础</a></strong></li>\n</ul>"},{"title":"PWA-Service Worker 小结（二）实践","date":"2020-01-02T07:15:08.000Z","_content":"Service Worker 的初衷是极致优化用户体验，带来丝滑般流畅的离线应用。但同时也可以用作站点缓存使用。它本身类似于一个介于浏览器和服务端之间的网络代理，可以拦截请求并操作响应内容。功能强大，但由于兼容性问题，更适合用作渐进增强来使用。\n\n<!--more-->\n\n### 一、前言\n* Service Worker 是独立于当前页面的一段运行在浏览器后台进程里的脚本，它有自己独立的注册文件；它是 Web Worker 的一种，不能够直接操作 DOM；\n* 出于安全问题考虑，它只能在 HTTPS 域名下或者 localhost 本地运行；\n* 可以通过 postMessage 接口传递数据给其他 JS 文件；\n* Service Worker 中运行的代码不会被阻塞，也不会阻塞其他页面的 JS 文件中的代码；\n* 每个 Service Worker（注册文件）都有自己的作用域，它只会处理自己作用域下的请求，而 Service Worker 的存放位置就是它的最大作用域；\n* 缓存的资源存储在 Cache Storage 中，缓存不会过期，但是浏览器对每个网站的 Cache Storage 的大小有硬性限制，所以需要清理不必要的缓存；\n\n### 二、Service Worker 的生命周期\n1. 注册 Service worker，在网页上生效；\n2. 安装成功，激活 或者 安装失败（下次加载会尝试重新安装）；\n3. 激活后，在 sw 的作用域下作用所有的页面，首次注册 sw 不会生效，下次加载页面才会生效；已经注册的 sw 不会重复注册；不会因为页面的关闭而被销毁；\n4. sw 作用页面后，处理 fetch（网络请求）和 postMessage（页面消息）事件 或者 被终止（节省内存）。\n\n![](/Service-Worker-Lifecycle.png \"Service Worker Lifecycle\")\n\n### 三、Service Worker 安装注册\n#### 注册文件\n````javascript\n// service worker 注册文件\nif ('serviceWorker' in window.navigator) {\n  navigator.serviceWorker.register('./sw.js', { scope: './' })\n    .then(function (reg) {\n      console.log('success', reg);\n    })\n    .catch(function (err) {\n      console.log('fail', err);\n    });\n\n````\nregister 方法接受两个参数，第一个是 service worker 文件的路径，第二个参数是 Serivce Worker 的配置项，可选填，其中比较重要的是 __scope__ 属性。\n\n#### 拓展 Service Worker 作用域\n\nscope的默认值为 `./`（注意，这里所有的相对路径不是相对于页面，而是相对于sw.js脚本的），因此，`navigator.serviceWorker.register('/static/home/js/sw.js')`代码中的 scope 实际上是`/static/home/js`，Service Worker也就注册在了`/static/home/js`路径下，显然无法在`/home`下生效。\n\n可以通过添加 `Service-Worker-Allowed` 响应头的方式来扩展 service worker 的作用域：\n````javascript\n// express 扩展 service worker scope\napp.use(serveStatic(`${sourceRoot}/home`, {\n    maxAge: 0,\n    setHeaders: function (res, path, stat) {\n        if (/\\/sw\\/.+\\.js/.test(path)) {\n            res.set({\n                'Content-Type': 'application/javascript',\n                'Service-Worker-Allowed': `/${sourceRoot}//home`,\n                'Cache-control': 'no-store'\n            });\n        }\n    }\n}));\n\n````\n\n#### 打包工具生成静态资源注册文件\n\n自己本地调试，可以一个个写进 Service Worker 的注册文件里调试；实际开发中可以借助 gulp / webpack 等打包工具等生成站点静态文件的 sw 注册文件；\n以 gulp 为例，使用 [`sw-precache`](https://github.com/GoogleChromeLabs/sw-precache) 插件生成注册文件：\n````javascript\ngulp.task('generate-service-worker', function(callback) {\n\n    swPrecache.write('./service-worker.js', {\n        staticFileGlobs: ['./build/public' + '/**/*.{js,css,png,jpg,webp,gif,svg,eot,ttf,woff}'],\n        stripPrefix: './build'\n    }, callback);\n\n});\n````\n\n### 四、Service Worker.js 注意事项\n1. __不要给 service-worker.js 设置不同的名字__\n实际开发过程中，为了避免静态资源缓存，通常的做法是在打包压缩静态资源的时候，在文件名后边加上 MD5 后缀，让浏览器认为这是一个新文件从而重新发起请求，但是这种做法在 service-worker.js 上是不可取的；\n第一种情况：如果缓存了 html 文件，service-worker.js 的文件因为是在 html 中引入的，所以更改 service-worker.js 的名字并不会更新。\n第二种情况：只缓存了css，js 文件，未缓存 html 文件；页面引入了新的 service-worker.js ，但是旧版本的 service-worker.js 还在使用中，会导致页面状态有问题。\n2. __不要给 service-worker.js 设置缓存__\n理由和第一点类似，也是为了防止在浏览器需要请求新版本的 sw 时，因为缓存的干扰而无法实现。毕竟我们不能要求用户去清除缓存。因此给 sw 及相关的 JS (例如 sw-register.js，如果独立出来的话)设置 Cache-control: no-store 是比较安全的。\n\n### 五、遇到的问题\n1. __接收不到浏览器的fetch事件：__\n原因：静态资源缓存：页面路径不能大于 Service worker 的 scope ([详情](https://juejin.im/post/5b06a7b3f265da0dd8567513#heading-8))\n2. __`public/*` 无法匹配public路径下的所有文件， addCaches 时只能写fileName？__\n原因：service worker 没有通配符 * 这个概念，`/sw-test/` 这个 path 只是让 sw 寻找缓存时的一个入口，用以区分各个路径的缓存（[详情](https://stackoverflow.com/questions/46830493/is-there-any-way-to-cache-all-files-of-defined-folder-path-in-service-worker)）；\n解决方案：service-worker.js 使用官方的 `sw-precache` 插件生成（[详情](https://stackoverflow.com/questions/46208326/for-serviceworker-cache-addall-how-do-the-urls-work/46213137#46213137)）；\n3. __如果 service worker 缓存的了全部的js和img 会不会导致 cacheStorage 很占用用户的系统空间？__\n不会，各个浏览器分配给各站点的 cacheStorrage 的值不一样，同时也受用户设备空间影响。\n\n### 落地情况\n个人觉得 Service Worker 更适合在单页应用、文档类应用的等场景使用，才能把离线缓存的优势发挥出来。比如 [Vue](https://cn.vuejs.org/) 的官网。<hr/>\n*2019.4.23*\n未落地。主要原因有两点： \n1. 工作中想要使用 Service worker 提供离线缓存服务的是一个负责 APP 内嵌页面的 H5 站点，HTML都是动态渲染的，活动数据是实时的，不能离线访问；\n2. 这个站点的页面入口都是几乎都是单独的活动页，没有一个统一 sw 注册的入口；\n\n<hr/>\n*2020.3.16*\n重新看这篇文章的时候，如果在几个主要的活动入口页引入 sw 的注册文件，那么这几个长期的活动就可以应用 sw 缓存了，但这并没有覆盖全站，所以依然不是好的解决方案。\n\n### 应用场景\n这部分总结摘录自这篇文章：[Service Worker 从入门到出门](https://juejin.im/post/5d26aec1f265da1ba56b47ea#heading-6)\n\n* 网站功能趋于稳定：频繁迭代的网站似乎不方便加 Service Worker。\n* 网站需要拥有大量用户：管理后台、OA系统等场景似乎不是很有必要加 Service Worker。\n* 网站真的在追求用户体验：Bug 多多、脸不好看的网站似乎不是很有必要加 Service Worker。\n* 网站用户体验关乎用户留存：12306 似乎完全不需要加 Service Worker。\n  \n简单总结：Service Worker 的初衷是极致优化用户体验，是用来锦上添花的，技术只是技术，但实际应用前，应考虑成本和收益。\n\n### 参考链接\n* [Service Worker ——这应该是一个挺全面的整理](https://juejin.im/post/5b06a7b3f265da0dd8567513#heading-1)\n* [【PWA学习与实践】(9)生产环境中PWA实践的问题与解决方案](https://www.jianshu.com/p/7eae75f46467)\n* [谨慎处理 Service Worker 的更新](https://zhuanlan.zhihu.com/p/51118741)\n* [使用 Service Worker 做一个 PWA 离线网页应用](https://www.sohu.com/a/197477344_463987)","source":"_posts/PWA-Service-Worker-小结（二）实践.md","raw":"---\ntitle: PWA-Service Worker 小结（二）实践\ndate: 2020-01-02 15:15:08\ntags: [Service Worker]\ncategories: [前端, PWA]\n---\nService Worker 的初衷是极致优化用户体验，带来丝滑般流畅的离线应用。但同时也可以用作站点缓存使用。它本身类似于一个介于浏览器和服务端之间的网络代理，可以拦截请求并操作响应内容。功能强大，但由于兼容性问题，更适合用作渐进增强来使用。\n\n<!--more-->\n\n### 一、前言\n* Service Worker 是独立于当前页面的一段运行在浏览器后台进程里的脚本，它有自己独立的注册文件；它是 Web Worker 的一种，不能够直接操作 DOM；\n* 出于安全问题考虑，它只能在 HTTPS 域名下或者 localhost 本地运行；\n* 可以通过 postMessage 接口传递数据给其他 JS 文件；\n* Service Worker 中运行的代码不会被阻塞，也不会阻塞其他页面的 JS 文件中的代码；\n* 每个 Service Worker（注册文件）都有自己的作用域，它只会处理自己作用域下的请求，而 Service Worker 的存放位置就是它的最大作用域；\n* 缓存的资源存储在 Cache Storage 中，缓存不会过期，但是浏览器对每个网站的 Cache Storage 的大小有硬性限制，所以需要清理不必要的缓存；\n\n### 二、Service Worker 的生命周期\n1. 注册 Service worker，在网页上生效；\n2. 安装成功，激活 或者 安装失败（下次加载会尝试重新安装）；\n3. 激活后，在 sw 的作用域下作用所有的页面，首次注册 sw 不会生效，下次加载页面才会生效；已经注册的 sw 不会重复注册；不会因为页面的关闭而被销毁；\n4. sw 作用页面后，处理 fetch（网络请求）和 postMessage（页面消息）事件 或者 被终止（节省内存）。\n\n![](/Service-Worker-Lifecycle.png \"Service Worker Lifecycle\")\n\n### 三、Service Worker 安装注册\n#### 注册文件\n````javascript\n// service worker 注册文件\nif ('serviceWorker' in window.navigator) {\n  navigator.serviceWorker.register('./sw.js', { scope: './' })\n    .then(function (reg) {\n      console.log('success', reg);\n    })\n    .catch(function (err) {\n      console.log('fail', err);\n    });\n\n````\nregister 方法接受两个参数，第一个是 service worker 文件的路径，第二个参数是 Serivce Worker 的配置项，可选填，其中比较重要的是 __scope__ 属性。\n\n#### 拓展 Service Worker 作用域\n\nscope的默认值为 `./`（注意，这里所有的相对路径不是相对于页面，而是相对于sw.js脚本的），因此，`navigator.serviceWorker.register('/static/home/js/sw.js')`代码中的 scope 实际上是`/static/home/js`，Service Worker也就注册在了`/static/home/js`路径下，显然无法在`/home`下生效。\n\n可以通过添加 `Service-Worker-Allowed` 响应头的方式来扩展 service worker 的作用域：\n````javascript\n// express 扩展 service worker scope\napp.use(serveStatic(`${sourceRoot}/home`, {\n    maxAge: 0,\n    setHeaders: function (res, path, stat) {\n        if (/\\/sw\\/.+\\.js/.test(path)) {\n            res.set({\n                'Content-Type': 'application/javascript',\n                'Service-Worker-Allowed': `/${sourceRoot}//home`,\n                'Cache-control': 'no-store'\n            });\n        }\n    }\n}));\n\n````\n\n#### 打包工具生成静态资源注册文件\n\n自己本地调试，可以一个个写进 Service Worker 的注册文件里调试；实际开发中可以借助 gulp / webpack 等打包工具等生成站点静态文件的 sw 注册文件；\n以 gulp 为例，使用 [`sw-precache`](https://github.com/GoogleChromeLabs/sw-precache) 插件生成注册文件：\n````javascript\ngulp.task('generate-service-worker', function(callback) {\n\n    swPrecache.write('./service-worker.js', {\n        staticFileGlobs: ['./build/public' + '/**/*.{js,css,png,jpg,webp,gif,svg,eot,ttf,woff}'],\n        stripPrefix: './build'\n    }, callback);\n\n});\n````\n\n### 四、Service Worker.js 注意事项\n1. __不要给 service-worker.js 设置不同的名字__\n实际开发过程中，为了避免静态资源缓存，通常的做法是在打包压缩静态资源的时候，在文件名后边加上 MD5 后缀，让浏览器认为这是一个新文件从而重新发起请求，但是这种做法在 service-worker.js 上是不可取的；\n第一种情况：如果缓存了 html 文件，service-worker.js 的文件因为是在 html 中引入的，所以更改 service-worker.js 的名字并不会更新。\n第二种情况：只缓存了css，js 文件，未缓存 html 文件；页面引入了新的 service-worker.js ，但是旧版本的 service-worker.js 还在使用中，会导致页面状态有问题。\n2. __不要给 service-worker.js 设置缓存__\n理由和第一点类似，也是为了防止在浏览器需要请求新版本的 sw 时，因为缓存的干扰而无法实现。毕竟我们不能要求用户去清除缓存。因此给 sw 及相关的 JS (例如 sw-register.js，如果独立出来的话)设置 Cache-control: no-store 是比较安全的。\n\n### 五、遇到的问题\n1. __接收不到浏览器的fetch事件：__\n原因：静态资源缓存：页面路径不能大于 Service worker 的 scope ([详情](https://juejin.im/post/5b06a7b3f265da0dd8567513#heading-8))\n2. __`public/*` 无法匹配public路径下的所有文件， addCaches 时只能写fileName？__\n原因：service worker 没有通配符 * 这个概念，`/sw-test/` 这个 path 只是让 sw 寻找缓存时的一个入口，用以区分各个路径的缓存（[详情](https://stackoverflow.com/questions/46830493/is-there-any-way-to-cache-all-files-of-defined-folder-path-in-service-worker)）；\n解决方案：service-worker.js 使用官方的 `sw-precache` 插件生成（[详情](https://stackoverflow.com/questions/46208326/for-serviceworker-cache-addall-how-do-the-urls-work/46213137#46213137)）；\n3. __如果 service worker 缓存的了全部的js和img 会不会导致 cacheStorage 很占用用户的系统空间？__\n不会，各个浏览器分配给各站点的 cacheStorrage 的值不一样，同时也受用户设备空间影响。\n\n### 落地情况\n个人觉得 Service Worker 更适合在单页应用、文档类应用的等场景使用，才能把离线缓存的优势发挥出来。比如 [Vue](https://cn.vuejs.org/) 的官网。<hr/>\n*2019.4.23*\n未落地。主要原因有两点： \n1. 工作中想要使用 Service worker 提供离线缓存服务的是一个负责 APP 内嵌页面的 H5 站点，HTML都是动态渲染的，活动数据是实时的，不能离线访问；\n2. 这个站点的页面入口都是几乎都是单独的活动页，没有一个统一 sw 注册的入口；\n\n<hr/>\n*2020.3.16*\n重新看这篇文章的时候，如果在几个主要的活动入口页引入 sw 的注册文件，那么这几个长期的活动就可以应用 sw 缓存了，但这并没有覆盖全站，所以依然不是好的解决方案。\n\n### 应用场景\n这部分总结摘录自这篇文章：[Service Worker 从入门到出门](https://juejin.im/post/5d26aec1f265da1ba56b47ea#heading-6)\n\n* 网站功能趋于稳定：频繁迭代的网站似乎不方便加 Service Worker。\n* 网站需要拥有大量用户：管理后台、OA系统等场景似乎不是很有必要加 Service Worker。\n* 网站真的在追求用户体验：Bug 多多、脸不好看的网站似乎不是很有必要加 Service Worker。\n* 网站用户体验关乎用户留存：12306 似乎完全不需要加 Service Worker。\n  \n简单总结：Service Worker 的初衷是极致优化用户体验，是用来锦上添花的，技术只是技术，但实际应用前，应考虑成本和收益。\n\n### 参考链接\n* [Service Worker ——这应该是一个挺全面的整理](https://juejin.im/post/5b06a7b3f265da0dd8567513#heading-1)\n* [【PWA学习与实践】(9)生产环境中PWA实践的问题与解决方案](https://www.jianshu.com/p/7eae75f46467)\n* [谨慎处理 Service Worker 的更新](https://zhuanlan.zhihu.com/p/51118741)\n* [使用 Service Worker 做一个 PWA 离线网页应用](https://www.sohu.com/a/197477344_463987)","slug":"PWA-Service-Worker-小结（二）实践","published":1,"updated":"2020-03-17T02:44:30.000Z","_id":"ck7v8vss0000e96fy1jivktz6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Service Worker 的初衷是极致优化用户体验，带来丝滑般流畅的离线应用。但同时也可以用作站点缓存使用。它本身类似于一个介于浏览器和服务端之间的网络代理，可以拦截请求并操作响应内容。功能强大，但由于兼容性问题，更适合用作渐进增强来使用。</p>\n<a id=\"more\"></a>\n<h3 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h3><ul>\n<li>Service Worker 是独立于当前页面的一段运行在浏览器后台进程里的脚本，它有自己独立的注册文件；它是 Web Worker 的一种，不能够直接操作 DOM；</li>\n<li>出于安全问题考虑，它只能在 HTTPS 域名下或者 localhost 本地运行；</li>\n<li>可以通过 postMessage 接口传递数据给其他 JS 文件；</li>\n<li>Service Worker 中运行的代码不会被阻塞，也不会阻塞其他页面的 JS 文件中的代码；</li>\n<li>每个 Service Worker（注册文件）都有自己的作用域，它只会处理自己作用域下的请求，而 Service Worker 的存放位置就是它的最大作用域；</li>\n<li>缓存的资源存储在 Cache Storage 中，缓存不会过期，但是浏览器对每个网站的 Cache Storage 的大小有硬性限制，所以需要清理不必要的缓存；</li>\n</ul>\n<h3 id=\"二、Service-Worker-的生命周期\"><a href=\"#二、Service-Worker-的生命周期\" class=\"headerlink\" title=\"二、Service Worker 的生命周期\"></a>二、Service Worker 的生命周期</h3><ol>\n<li>注册 Service worker，在网页上生效；</li>\n<li>安装成功，激活 或者 安装失败（下次加载会尝试重新安装）；</li>\n<li>激活后，在 sw 的作用域下作用所有的页面，首次注册 sw 不会生效，下次加载页面才会生效；已经注册的 sw 不会重复注册；不会因为页面的关闭而被销毁；</li>\n<li>sw 作用页面后，处理 fetch（网络请求）和 postMessage（页面消息）事件 或者 被终止（节省内存）。</li>\n</ol>\n<p><img src=\"/2020/01/02/PWA-Service-Worker-小结（二）实践/Service-Worker-Lifecycle.png\" alt=\"\" title=\"Service Worker Lifecycle\"></p>\n<h3 id=\"三、Service-Worker-安装注册\"><a href=\"#三、Service-Worker-安装注册\" class=\"headerlink\" title=\"三、Service Worker 安装注册\"></a>三、Service Worker 安装注册</h3><h4 id=\"注册文件\"><a href=\"#注册文件\" class=\"headerlink\" title=\"注册文件\"></a>注册文件</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// service worker 注册文件</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">'serviceWorker'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>.navigator) &#123;</span><br><span class=\"line\">  navigator.serviceWorker.register(<span class=\"string\">'./sw.js'</span>, &#123; <span class=\"attr\">scope</span>: <span class=\"string\">'./'</span> &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reg</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'success'</span>, reg);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'fail'</span>, err);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>register 方法接受两个参数，第一个是 service worker 文件的路径，第二个参数是 Serivce Worker 的配置项，可选填，其中比较重要的是 <strong>scope</strong> 属性。</p>\n<h4 id=\"拓展-Service-Worker-作用域\"><a href=\"#拓展-Service-Worker-作用域\" class=\"headerlink\" title=\"拓展 Service Worker 作用域\"></a>拓展 Service Worker 作用域</h4><p>scope的默认值为 <code>./</code>（注意，这里所有的相对路径不是相对于页面，而是相对于sw.js脚本的），因此，<code>navigator.serviceWorker.register(&#39;/static/home/js/sw.js&#39;)</code>代码中的 scope 实际上是<code>/static/home/js</code>，Service Worker也就注册在了<code>/static/home/js</code>路径下，显然无法在<code>/home</code>下生效。</p>\n<p>可以通过添加 <code>Service-Worker-Allowed</code> 响应头的方式来扩展 service worker 的作用域：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// express 扩展 service worker scope</span></span><br><span class=\"line\">app.use(serveStatic(<span class=\"string\">`<span class=\"subst\">$&#123;sourceRoot&#125;</span>/home`</span>, &#123;</span><br><span class=\"line\">    maxAge: <span class=\"number\">0</span>,</span><br><span class=\"line\">    setHeaders: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res, path, stat</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\/sw\\/.+\\.js/</span>.test(path)) &#123;</span><br><span class=\"line\">            res.set(&#123;</span><br><span class=\"line\">                <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/javascript'</span>,</span><br><span class=\"line\">                <span class=\"string\">'Service-Worker-Allowed'</span>: <span class=\"string\">`/<span class=\"subst\">$&#123;sourceRoot&#125;</span>//home`</span>,</span><br><span class=\"line\">                <span class=\"string\">'Cache-control'</span>: <span class=\"string\">'no-store'</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"打包工具生成静态资源注册文件\"><a href=\"#打包工具生成静态资源注册文件\" class=\"headerlink\" title=\"打包工具生成静态资源注册文件\"></a>打包工具生成静态资源注册文件</h4><p>自己本地调试，可以一个个写进 Service Worker 的注册文件里调试；实际开发中可以借助 gulp / webpack 等打包工具等生成站点静态文件的 sw 注册文件；<br>以 gulp 为例，使用 <a href=\"https://github.com/GoogleChromeLabs/sw-precache\" target=\"_blank\" rel=\"noopener\"><code>sw-precache</code></a> 插件生成注册文件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'generate-service-worker'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    swPrecache.write(<span class=\"string\">'./service-worker.js'</span>, &#123;</span><br><span class=\"line\">        staticFileGlobs: [<span class=\"string\">'./build/public'</span> + <span class=\"string\">'/**/*.&#123;js,css,png,jpg,webp,gif,svg,eot,ttf,woff&#125;'</span>],</span><br><span class=\"line\">        stripPrefix: <span class=\"string\">'./build'</span></span><br><span class=\"line\">    &#125;, callback);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"四、Service-Worker-js-注意事项\"><a href=\"#四、Service-Worker-js-注意事项\" class=\"headerlink\" title=\"四、Service Worker.js 注意事项\"></a>四、Service Worker.js 注意事项</h3><ol>\n<li><strong>不要给 service-worker.js 设置不同的名字</strong><br>实际开发过程中，为了避免静态资源缓存，通常的做法是在打包压缩静态资源的时候，在文件名后边加上 MD5 后缀，让浏览器认为这是一个新文件从而重新发起请求，但是这种做法在 service-worker.js 上是不可取的；<br>第一种情况：如果缓存了 html 文件，service-worker.js 的文件因为是在 html 中引入的，所以更改 service-worker.js 的名字并不会更新。<br>第二种情况：只缓存了css，js 文件，未缓存 html 文件；页面引入了新的 service-worker.js ，但是旧版本的 service-worker.js 还在使用中，会导致页面状态有问题。</li>\n<li><strong>不要给 service-worker.js 设置缓存</strong><br>理由和第一点类似，也是为了防止在浏览器需要请求新版本的 sw 时，因为缓存的干扰而无法实现。毕竟我们不能要求用户去清除缓存。因此给 sw 及相关的 JS (例如 sw-register.js，如果独立出来的话)设置 Cache-control: no-store 是比较安全的。</li>\n</ol>\n<h3 id=\"五、遇到的问题\"><a href=\"#五、遇到的问题\" class=\"headerlink\" title=\"五、遇到的问题\"></a>五、遇到的问题</h3><ol>\n<li><strong>接收不到浏览器的fetch事件：</strong><br>原因：静态资源缓存：页面路径不能大于 Service worker 的 scope (<a href=\"https://juejin.im/post/5b06a7b3f265da0dd8567513#heading-8\" target=\"_blank\" rel=\"noopener\">详情</a>)</li>\n<li><strong><code>public/*</code> 无法匹配public路径下的所有文件， addCaches 时只能写fileName？</strong><br>原因：service worker 没有通配符 * 这个概念，<code>/sw-test/</code> 这个 path 只是让 sw 寻找缓存时的一个入口，用以区分各个路径的缓存（<a href=\"https://stackoverflow.com/questions/46830493/is-there-any-way-to-cache-all-files-of-defined-folder-path-in-service-worker\" target=\"_blank\" rel=\"noopener\">详情</a>）；<br>解决方案：service-worker.js 使用官方的 <code>sw-precache</code> 插件生成（<a href=\"https://stackoverflow.com/questions/46208326/for-serviceworker-cache-addall-how-do-the-urls-work/46213137#46213137\" target=\"_blank\" rel=\"noopener\">详情</a>）；</li>\n<li><strong>如果 service worker 缓存的了全部的js和img 会不会导致 cacheStorage 很占用用户的系统空间？</strong><br>不会，各个浏览器分配给各站点的 cacheStorrage 的值不一样，同时也受用户设备空间影响。</li>\n</ol>\n<h3 id=\"落地情况\"><a href=\"#落地情况\" class=\"headerlink\" title=\"落地情况\"></a>落地情况</h3><p>个人觉得 Service Worker 更适合在单页应用、文档类应用的等场景使用，才能把离线缓存的优势发挥出来。比如 <a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue</a> 的官网。<hr><br><em>2019.4.23</em><br>未落地。主要原因有两点： </p>\n<ol>\n<li>工作中想要使用 Service worker 提供离线缓存服务的是一个负责 APP 内嵌页面的 H5 站点，HTML都是动态渲染的，活动数据是实时的，不能离线访问；</li>\n<li>这个站点的页面入口都是几乎都是单独的活动页，没有一个统一 sw 注册的入口；</li>\n</ol>\n<p><hr><br><em>2020.3.16</em><br>重新看这篇文章的时候，如果在几个主要的活动入口页引入 sw 的注册文件，那么这几个长期的活动就可以应用 sw 缓存了，但这并没有覆盖全站，所以依然不是好的解决方案。</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>这部分总结摘录自这篇文章：<a href=\"https://juejin.im/post/5d26aec1f265da1ba56b47ea#heading-6\" target=\"_blank\" rel=\"noopener\">Service Worker 从入门到出门</a></p>\n<ul>\n<li>网站功能趋于稳定：频繁迭代的网站似乎不方便加 Service Worker。</li>\n<li>网站需要拥有大量用户：管理后台、OA系统等场景似乎不是很有必要加 Service Worker。</li>\n<li>网站真的在追求用户体验：Bug 多多、脸不好看的网站似乎不是很有必要加 Service Worker。</li>\n<li>网站用户体验关乎用户留存：12306 似乎完全不需要加 Service Worker。</li>\n</ul>\n<p>简单总结：Service Worker 的初衷是极致优化用户体验，是用来锦上添花的，技术只是技术，但实际应用前，应考虑成本和收益。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"https://juejin.im/post/5b06a7b3f265da0dd8567513#heading-1\" target=\"_blank\" rel=\"noopener\">Service Worker ——这应该是一个挺全面的整理</a></li>\n<li><a href=\"https://www.jianshu.com/p/7eae75f46467\" target=\"_blank\" rel=\"noopener\">【PWA学习与实践】(9)生产环境中PWA实践的问题与解决方案</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/51118741\" target=\"_blank\" rel=\"noopener\">谨慎处理 Service Worker 的更新</a></li>\n<li><a href=\"https://www.sohu.com/a/197477344_463987\" target=\"_blank\" rel=\"noopener\">使用 Service Worker 做一个 PWA 离线网页应用</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Service Worker 的初衷是极致优化用户体验，带来丝滑般流畅的离线应用。但同时也可以用作站点缓存使用。它本身类似于一个介于浏览器和服务端之间的网络代理，可以拦截请求并操作响应内容。功能强大，但由于兼容性问题，更适合用作渐进增强来使用。</p>","more":"<h3 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h3><ul>\n<li>Service Worker 是独立于当前页面的一段运行在浏览器后台进程里的脚本，它有自己独立的注册文件；它是 Web Worker 的一种，不能够直接操作 DOM；</li>\n<li>出于安全问题考虑，它只能在 HTTPS 域名下或者 localhost 本地运行；</li>\n<li>可以通过 postMessage 接口传递数据给其他 JS 文件；</li>\n<li>Service Worker 中运行的代码不会被阻塞，也不会阻塞其他页面的 JS 文件中的代码；</li>\n<li>每个 Service Worker（注册文件）都有自己的作用域，它只会处理自己作用域下的请求，而 Service Worker 的存放位置就是它的最大作用域；</li>\n<li>缓存的资源存储在 Cache Storage 中，缓存不会过期，但是浏览器对每个网站的 Cache Storage 的大小有硬性限制，所以需要清理不必要的缓存；</li>\n</ul>\n<h3 id=\"二、Service-Worker-的生命周期\"><a href=\"#二、Service-Worker-的生命周期\" class=\"headerlink\" title=\"二、Service Worker 的生命周期\"></a>二、Service Worker 的生命周期</h3><ol>\n<li>注册 Service worker，在网页上生效；</li>\n<li>安装成功，激活 或者 安装失败（下次加载会尝试重新安装）；</li>\n<li>激活后，在 sw 的作用域下作用所有的页面，首次注册 sw 不会生效，下次加载页面才会生效；已经注册的 sw 不会重复注册；不会因为页面的关闭而被销毁；</li>\n<li>sw 作用页面后，处理 fetch（网络请求）和 postMessage（页面消息）事件 或者 被终止（节省内存）。</li>\n</ol>\n<p><img src=\"/2020/01/02/PWA-Service-Worker-小结（二）实践/Service-Worker-Lifecycle.png\" alt=\"\" title=\"Service Worker Lifecycle\"></p>\n<h3 id=\"三、Service-Worker-安装注册\"><a href=\"#三、Service-Worker-安装注册\" class=\"headerlink\" title=\"三、Service Worker 安装注册\"></a>三、Service Worker 安装注册</h3><h4 id=\"注册文件\"><a href=\"#注册文件\" class=\"headerlink\" title=\"注册文件\"></a>注册文件</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// service worker 注册文件</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">'serviceWorker'</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>.navigator) &#123;</span><br><span class=\"line\">  navigator.serviceWorker.register(<span class=\"string\">'./sw.js'</span>, &#123; <span class=\"attr\">scope</span>: <span class=\"string\">'./'</span> &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reg</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'success'</span>, reg);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'fail'</span>, err);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>register 方法接受两个参数，第一个是 service worker 文件的路径，第二个参数是 Serivce Worker 的配置项，可选填，其中比较重要的是 <strong>scope</strong> 属性。</p>\n<h4 id=\"拓展-Service-Worker-作用域\"><a href=\"#拓展-Service-Worker-作用域\" class=\"headerlink\" title=\"拓展 Service Worker 作用域\"></a>拓展 Service Worker 作用域</h4><p>scope的默认值为 <code>./</code>（注意，这里所有的相对路径不是相对于页面，而是相对于sw.js脚本的），因此，<code>navigator.serviceWorker.register(&#39;/static/home/js/sw.js&#39;)</code>代码中的 scope 实际上是<code>/static/home/js</code>，Service Worker也就注册在了<code>/static/home/js</code>路径下，显然无法在<code>/home</code>下生效。</p>\n<p>可以通过添加 <code>Service-Worker-Allowed</code> 响应头的方式来扩展 service worker 的作用域：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// express 扩展 service worker scope</span></span><br><span class=\"line\">app.use(serveStatic(<span class=\"string\">`<span class=\"subst\">$&#123;sourceRoot&#125;</span>/home`</span>, &#123;</span><br><span class=\"line\">    maxAge: <span class=\"number\">0</span>,</span><br><span class=\"line\">    setHeaders: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res, path, stat</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\/sw\\/.+\\.js/</span>.test(path)) &#123;</span><br><span class=\"line\">            res.set(&#123;</span><br><span class=\"line\">                <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/javascript'</span>,</span><br><span class=\"line\">                <span class=\"string\">'Service-Worker-Allowed'</span>: <span class=\"string\">`/<span class=\"subst\">$&#123;sourceRoot&#125;</span>//home`</span>,</span><br><span class=\"line\">                <span class=\"string\">'Cache-control'</span>: <span class=\"string\">'no-store'</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"打包工具生成静态资源注册文件\"><a href=\"#打包工具生成静态资源注册文件\" class=\"headerlink\" title=\"打包工具生成静态资源注册文件\"></a>打包工具生成静态资源注册文件</h4><p>自己本地调试，可以一个个写进 Service Worker 的注册文件里调试；实际开发中可以借助 gulp / webpack 等打包工具等生成站点静态文件的 sw 注册文件；<br>以 gulp 为例，使用 <a href=\"https://github.com/GoogleChromeLabs/sw-precache\" target=\"_blank\" rel=\"noopener\"><code>sw-precache</code></a> 插件生成注册文件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(<span class=\"string\">'generate-service-worker'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    swPrecache.write(<span class=\"string\">'./service-worker.js'</span>, &#123;</span><br><span class=\"line\">        staticFileGlobs: [<span class=\"string\">'./build/public'</span> + <span class=\"string\">'/**/*.&#123;js,css,png,jpg,webp,gif,svg,eot,ttf,woff&#125;'</span>],</span><br><span class=\"line\">        stripPrefix: <span class=\"string\">'./build'</span></span><br><span class=\"line\">    &#125;, callback);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"四、Service-Worker-js-注意事项\"><a href=\"#四、Service-Worker-js-注意事项\" class=\"headerlink\" title=\"四、Service Worker.js 注意事项\"></a>四、Service Worker.js 注意事项</h3><ol>\n<li><strong>不要给 service-worker.js 设置不同的名字</strong><br>实际开发过程中，为了避免静态资源缓存，通常的做法是在打包压缩静态资源的时候，在文件名后边加上 MD5 后缀，让浏览器认为这是一个新文件从而重新发起请求，但是这种做法在 service-worker.js 上是不可取的；<br>第一种情况：如果缓存了 html 文件，service-worker.js 的文件因为是在 html 中引入的，所以更改 service-worker.js 的名字并不会更新。<br>第二种情况：只缓存了css，js 文件，未缓存 html 文件；页面引入了新的 service-worker.js ，但是旧版本的 service-worker.js 还在使用中，会导致页面状态有问题。</li>\n<li><strong>不要给 service-worker.js 设置缓存</strong><br>理由和第一点类似，也是为了防止在浏览器需要请求新版本的 sw 时，因为缓存的干扰而无法实现。毕竟我们不能要求用户去清除缓存。因此给 sw 及相关的 JS (例如 sw-register.js，如果独立出来的话)设置 Cache-control: no-store 是比较安全的。</li>\n</ol>\n<h3 id=\"五、遇到的问题\"><a href=\"#五、遇到的问题\" class=\"headerlink\" title=\"五、遇到的问题\"></a>五、遇到的问题</h3><ol>\n<li><strong>接收不到浏览器的fetch事件：</strong><br>原因：静态资源缓存：页面路径不能大于 Service worker 的 scope (<a href=\"https://juejin.im/post/5b06a7b3f265da0dd8567513#heading-8\" target=\"_blank\" rel=\"noopener\">详情</a>)</li>\n<li><strong><code>public/*</code> 无法匹配public路径下的所有文件， addCaches 时只能写fileName？</strong><br>原因：service worker 没有通配符 * 这个概念，<code>/sw-test/</code> 这个 path 只是让 sw 寻找缓存时的一个入口，用以区分各个路径的缓存（<a href=\"https://stackoverflow.com/questions/46830493/is-there-any-way-to-cache-all-files-of-defined-folder-path-in-service-worker\" target=\"_blank\" rel=\"noopener\">详情</a>）；<br>解决方案：service-worker.js 使用官方的 <code>sw-precache</code> 插件生成（<a href=\"https://stackoverflow.com/questions/46208326/for-serviceworker-cache-addall-how-do-the-urls-work/46213137#46213137\" target=\"_blank\" rel=\"noopener\">详情</a>）；</li>\n<li><strong>如果 service worker 缓存的了全部的js和img 会不会导致 cacheStorage 很占用用户的系统空间？</strong><br>不会，各个浏览器分配给各站点的 cacheStorrage 的值不一样，同时也受用户设备空间影响。</li>\n</ol>\n<h3 id=\"落地情况\"><a href=\"#落地情况\" class=\"headerlink\" title=\"落地情况\"></a>落地情况</h3><p>个人觉得 Service Worker 更适合在单页应用、文档类应用的等场景使用，才能把离线缓存的优势发挥出来。比如 <a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue</a> 的官网。<hr><br><em>2019.4.23</em><br>未落地。主要原因有两点： </p>\n<ol>\n<li>工作中想要使用 Service worker 提供离线缓存服务的是一个负责 APP 内嵌页面的 H5 站点，HTML都是动态渲染的，活动数据是实时的，不能离线访问；</li>\n<li>这个站点的页面入口都是几乎都是单独的活动页，没有一个统一 sw 注册的入口；</li>\n</ol>\n<p><hr><br><em>2020.3.16</em><br>重新看这篇文章的时候，如果在几个主要的活动入口页引入 sw 的注册文件，那么这几个长期的活动就可以应用 sw 缓存了，但这并没有覆盖全站，所以依然不是好的解决方案。</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p>这部分总结摘录自这篇文章：<a href=\"https://juejin.im/post/5d26aec1f265da1ba56b47ea#heading-6\" target=\"_blank\" rel=\"noopener\">Service Worker 从入门到出门</a></p>\n<ul>\n<li>网站功能趋于稳定：频繁迭代的网站似乎不方便加 Service Worker。</li>\n<li>网站需要拥有大量用户：管理后台、OA系统等场景似乎不是很有必要加 Service Worker。</li>\n<li>网站真的在追求用户体验：Bug 多多、脸不好看的网站似乎不是很有必要加 Service Worker。</li>\n<li>网站用户体验关乎用户留存：12306 似乎完全不需要加 Service Worker。</li>\n</ul>\n<p>简单总结：Service Worker 的初衷是极致优化用户体验，是用来锦上添花的，技术只是技术，但实际应用前，应考虑成本和收益。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ul>\n<li><a href=\"https://juejin.im/post/5b06a7b3f265da0dd8567513#heading-1\" target=\"_blank\" rel=\"noopener\">Service Worker ——这应该是一个挺全面的整理</a></li>\n<li><a href=\"https://www.jianshu.com/p/7eae75f46467\" target=\"_blank\" rel=\"noopener\">【PWA学习与实践】(9)生产环境中PWA实践的问题与解决方案</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/51118741\" target=\"_blank\" rel=\"noopener\">谨慎处理 Service Worker 的更新</a></li>\n<li><a href=\"https://www.sohu.com/a/197477344_463987\" target=\"_blank\" rel=\"noopener\">使用 Service Worker 做一个 PWA 离线网页应用</a></li>\n</ul>"},{"title":"2018年终总结","date":"2018-12-31T15:26:27.000Z","_content":"2018年仿佛什么都没做，但又仿佛做了些什么；仿佛没有遗憾，但却又心有不甘；以为走到了正确的方向，但“迷茫”二字却困惑了我整整一年。\n<!--more-->\n\n* 一月：实习、回校考试\n* 二月：回家过年\n* 三月：实习、回校选毕设题目\n* 四月：实习、学习毕设相关知识、投递简历\n* 五月：实习、开始码毕设、投递简历、跑面试\n* 六月：回校答辩、毕业\n* 七月：转正，回公司工作\n* 八月：工作、去当了一次漫展NPC\n* 九月：工作、去了一次上海迪士尼\n* 十月：工作、找房、换房\n* 十一月：工作\n* 十二月：工作\n\n18年主要完成事件就是这些。\n__四、五月__ 大概是最忙的时候，因为要管的事情太多，忙到脚打后脑勺。\n__六月__ 是全年最开心的阶段，因为回学校了，有室友和同学在。虽然答辩时被老师问到怀疑人生，但最后老师还是给了高分，借此拿了一次奖学金的我也是受宠若惊，以为毕业前再也没有机会拿到了。除了感谢老师以外，还得感谢公司leader，毕设题目是他建议的。\n__七月__ 本决定给自己一周毕业旅行的时间，奈何职业方向和家里人冲突升级。取消了打算已久的假期，回公司了。工位发生很大变化，前端组的大家这次都坐在一起了。\n__八月__ 第一次去了漫展，也是第一次当NPC，不过应该也都是最后一次了哈哈。遇见了很好的小伙伴们，临走前，没有张口要联系方式，挺后悔的。\n__九月__ 去了趟迪士尼，事实证明，做攻略还是非常有用滴，项目都玩了，喜欢的也几刷了。遗憾的是，时间来不及，没有买到漫威周边。\n__十月__ 相对轻松。十一没出去玩，出去看房，找到合适的就换了，室友也换了，承蒙了之前两位姐姐很多照顾，有时会怀念。十月末公司团建，挺好玩的。\n__十一月__，中旬心心念念的 blog 诞生了，虽然不难，但也是历史性的一步！毕竟从去年就开始惦记着...\n__十二月__，成长。双十二的时候，买了新水彩颜料，终于把雄狮换成鲁本斯了。\n\n18年看似很充实，实际一年到头可以收获的东西却寥寥无几，全年没有明确的方向，只是被时间推着做事。\n希望19年找到自己的目标和方向。","source":"_posts/2018年终总结.md","raw":"---\ntitle: 2018年终总结\ndate: 2018-12-31 23:26:27\ntags: [年度总结]\n---\n2018年仿佛什么都没做，但又仿佛做了些什么；仿佛没有遗憾，但却又心有不甘；以为走到了正确的方向，但“迷茫”二字却困惑了我整整一年。\n<!--more-->\n\n* 一月：实习、回校考试\n* 二月：回家过年\n* 三月：实习、回校选毕设题目\n* 四月：实习、学习毕设相关知识、投递简历\n* 五月：实习、开始码毕设、投递简历、跑面试\n* 六月：回校答辩、毕业\n* 七月：转正，回公司工作\n* 八月：工作、去当了一次漫展NPC\n* 九月：工作、去了一次上海迪士尼\n* 十月：工作、找房、换房\n* 十一月：工作\n* 十二月：工作\n\n18年主要完成事件就是这些。\n__四、五月__ 大概是最忙的时候，因为要管的事情太多，忙到脚打后脑勺。\n__六月__ 是全年最开心的阶段，因为回学校了，有室友和同学在。虽然答辩时被老师问到怀疑人生，但最后老师还是给了高分，借此拿了一次奖学金的我也是受宠若惊，以为毕业前再也没有机会拿到了。除了感谢老师以外，还得感谢公司leader，毕设题目是他建议的。\n__七月__ 本决定给自己一周毕业旅行的时间，奈何职业方向和家里人冲突升级。取消了打算已久的假期，回公司了。工位发生很大变化，前端组的大家这次都坐在一起了。\n__八月__ 第一次去了漫展，也是第一次当NPC，不过应该也都是最后一次了哈哈。遇见了很好的小伙伴们，临走前，没有张口要联系方式，挺后悔的。\n__九月__ 去了趟迪士尼，事实证明，做攻略还是非常有用滴，项目都玩了，喜欢的也几刷了。遗憾的是，时间来不及，没有买到漫威周边。\n__十月__ 相对轻松。十一没出去玩，出去看房，找到合适的就换了，室友也换了，承蒙了之前两位姐姐很多照顾，有时会怀念。十月末公司团建，挺好玩的。\n__十一月__，中旬心心念念的 blog 诞生了，虽然不难，但也是历史性的一步！毕竟从去年就开始惦记着...\n__十二月__，成长。双十二的时候，买了新水彩颜料，终于把雄狮换成鲁本斯了。\n\n18年看似很充实，实际一年到头可以收获的东西却寥寥无几，全年没有明确的方向，只是被时间推着做事。\n希望19年找到自己的目标和方向。","slug":"2018年终总结","published":1,"updated":"2020-03-06T02:39:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7v8vss4000g96fy3mk5xe2e","content":"<p>2018年仿佛什么都没做，但又仿佛做了些什么；仿佛没有遗憾，但却又心有不甘；以为走到了正确的方向，但“迷茫”二字却困惑了我整整一年。<br><a id=\"more\"></a></p>\n<ul>\n<li>一月：实习、回校考试</li>\n<li>二月：回家过年</li>\n<li>三月：实习、回校选毕设题目</li>\n<li>四月：实习、学习毕设相关知识、投递简历</li>\n<li>五月：实习、开始码毕设、投递简历、跑面试</li>\n<li>六月：回校答辩、毕业</li>\n<li>七月：转正，回公司工作</li>\n<li>八月：工作、去当了一次漫展NPC</li>\n<li>九月：工作、去了一次上海迪士尼</li>\n<li>十月：工作、找房、换房</li>\n<li>十一月：工作</li>\n<li>十二月：工作</li>\n</ul>\n<p>18年主要完成事件就是这些。<br><strong>四、五月</strong> 大概是最忙的时候，因为要管的事情太多，忙到脚打后脑勺。<br><strong>六月</strong> 是全年最开心的阶段，因为回学校了，有室友和同学在。虽然答辩时被老师问到怀疑人生，但最后老师还是给了高分，借此拿了一次奖学金的我也是受宠若惊，以为毕业前再也没有机会拿到了。除了感谢老师以外，还得感谢公司leader，毕设题目是他建议的。<br><strong>七月</strong> 本决定给自己一周毕业旅行的时间，奈何职业方向和家里人冲突升级。取消了打算已久的假期，回公司了。工位发生很大变化，前端组的大家这次都坐在一起了。<br><strong>八月</strong> 第一次去了漫展，也是第一次当NPC，不过应该也都是最后一次了哈哈。遇见了很好的小伙伴们，临走前，没有张口要联系方式，挺后悔的。<br><strong>九月</strong> 去了趟迪士尼，事实证明，做攻略还是非常有用滴，项目都玩了，喜欢的也几刷了。遗憾的是，时间来不及，没有买到漫威周边。<br><strong>十月</strong> 相对轻松。十一没出去玩，出去看房，找到合适的就换了，室友也换了，承蒙了之前两位姐姐很多照顾，有时会怀念。十月末公司团建，挺好玩的。<br><strong>十一月</strong>，中旬心心念念的 blog 诞生了，虽然不难，但也是历史性的一步！毕竟从去年就开始惦记着…<br><strong>十二月</strong>，成长。双十二的时候，买了新水彩颜料，终于把雄狮换成鲁本斯了。</p>\n<p>18年看似很充实，实际一年到头可以收获的东西却寥寥无几，全年没有明确的方向，只是被时间推着做事。<br>希望19年找到自己的目标和方向。</p>\n","site":{"data":{}},"excerpt":"<p>2018年仿佛什么都没做，但又仿佛做了些什么；仿佛没有遗憾，但却又心有不甘；以为走到了正确的方向，但“迷茫”二字却困惑了我整整一年。<br></p>","more":"<p></p>\n<ul>\n<li>一月：实习、回校考试</li>\n<li>二月：回家过年</li>\n<li>三月：实习、回校选毕设题目</li>\n<li>四月：实习、学习毕设相关知识、投递简历</li>\n<li>五月：实习、开始码毕设、投递简历、跑面试</li>\n<li>六月：回校答辩、毕业</li>\n<li>七月：转正，回公司工作</li>\n<li>八月：工作、去当了一次漫展NPC</li>\n<li>九月：工作、去了一次上海迪士尼</li>\n<li>十月：工作、找房、换房</li>\n<li>十一月：工作</li>\n<li>十二月：工作</li>\n</ul>\n<p>18年主要完成事件就是这些。<br><strong>四、五月</strong> 大概是最忙的时候，因为要管的事情太多，忙到脚打后脑勺。<br><strong>六月</strong> 是全年最开心的阶段，因为回学校了，有室友和同学在。虽然答辩时被老师问到怀疑人生，但最后老师还是给了高分，借此拿了一次奖学金的我也是受宠若惊，以为毕业前再也没有机会拿到了。除了感谢老师以外，还得感谢公司leader，毕设题目是他建议的。<br><strong>七月</strong> 本决定给自己一周毕业旅行的时间，奈何职业方向和家里人冲突升级。取消了打算已久的假期，回公司了。工位发生很大变化，前端组的大家这次都坐在一起了。<br><strong>八月</strong> 第一次去了漫展，也是第一次当NPC，不过应该也都是最后一次了哈哈。遇见了很好的小伙伴们，临走前，没有张口要联系方式，挺后悔的。<br><strong>九月</strong> 去了趟迪士尼，事实证明，做攻略还是非常有用滴，项目都玩了，喜欢的也几刷了。遗憾的是，时间来不及，没有买到漫威周边。<br><strong>十月</strong> 相对轻松。十一没出去玩，出去看房，找到合适的就换了，室友也换了，承蒙了之前两位姐姐很多照顾，有时会怀念。十月末公司团建，挺好玩的。<br><strong>十一月</strong>，中旬心心念念的 blog 诞生了，虽然不难，但也是历史性的一步！毕竟从去年就开始惦记着…<br><strong>十二月</strong>，成长。双十二的时候，买了新水彩颜料，终于把雄狮换成鲁本斯了。</p>\n<p>18年看似很充实，实际一年到头可以收获的东西却寥寥无几，全年没有明确的方向，只是被时间推着做事。<br>希望19年找到自己的目标和方向。</p>"},{"title":"Prometheus 监控应用性能","date":"2019-07-15T02:21:58.000Z","_content":"&emsp;&emsp; Prometheus 是一个开源的监控系统。它可以自动化的监听应用各性能指标的变化情况，并发出报警信息。了解它目的，是想把前端页面的性能指标记录到公司的 Prometheus 监控系统上，利用它监听前端页面各类异常。\n<!--more-->\n### 一、Prometheus 系统简介\n[Prometheus](https://prometheus.io/) 是一个开源的服务监控系统，社区资源和开发者都很活跃。其主要原理是通过 HTTP 协议从远程的机器收集数据并存储在本地的[时序数据库](https://www.cnblogs.com/aiandbigdata/p/10052335.html)上。Prometheus 通过安装在远程机器上的 exporter (数据暴露)插件来收集监控数据。\n\n#### Prometheus 特点\nPrometheus 本身也是一个时序数据库，它通过 HTTP 的方式获取时序数据。Prometheus 自身的查询语言 PromQL 可多维度的查询并实时计算指标的值。通过 PromQL 提供的计算方法，可以自定义数据可视化的指标，以及报警临界值。它有四种数据类型，可针对不同场景使用不同数据类型。\n\n#### Prometheus 系统的组成部分\n![](/architecture.png \"Prometheus 架构\")\n在监控流程中，主要由三个部分组成：被监控的应用暴露性能指标(exporter)，promethues 应用采集性能指标(collector)，数据可视化分析界面(web UI)。详情参照下述：\n1. Prometheus server: 用于抓取数据，并存储到时序数据库;\n2. Prometheus exporter: 安装在监控目标的上，为 Prometheus server 提供数据抓取的接口;\n3. Prometheus web UI: 提供数据可视化分析界面;\n4. Alertmanager: 用于处理警报;\n5. Pushgateway: 用于 job 推送;\n\n### 二、Prometheus 监控流程图\n![](/flowChart.png \"Prometheus flow chart\")\n\n#### Promethues server\n主要负责数据采集和存储，提供 PromQL 查询语言的支持。可以通过 Prometheus 的 `.yml`文件中的`scrape_config` [(字段详情)](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config)来配置要抓取的应用指标地址。同时，Promethues 也会监控自身的健康情况，默认将指标暴露在自身的 `http://localhost:9090/metrics`。\n\n#### Promethues exporter\n参照[官方推荐的插件列表](https://prometheus.io/docs/instrumenting/clientlibs/)，由于本次监听的站点是 NodeJS 站点，所以选择 [prom-client](https://github.com/siimon/prom-client) 作为 exporter。\n注意：被监听的应用需要暴露指标接口供 server 抓取。\n\n#### Prometheus web UI\nGrafana 可以连接多种类型的库，选择 Promethues 即可，默认监听 Promethues server 的9090`/metrics` 路径。\n\n### 三、NodeJS 应用性能监控\n使用 [prom-client](https://github.com/siimon/prom-client) 和 [node-prometheus-gc-stats](https://github.com/SimenB/node-prometheus-gc-stats) 收集 NodeJS 的性能指标。\n* prom-client：收集服务端性能指标\n* node-prometheus-gc-stats：垃圾回收相关指标统计\n\n（prom-client 相当于一个exporter，将默认的指标暴露在 /metrics 接口，之后 Promethues service会根据 `.yml` 配置中的采集时间定期来这个接口采集数据信息，然后 web UI Grafana 再跟 Promethues server 进行同步）\n\n#### prom-client 文档\n一共支持四种数据格式：Histogram、Summary、Gauges 、Counters：\n\n* __Histogram(柱状图)__：统计数据的分布情况（比如 `Http_response_time` 的时间分布）\n* __Summary(摘要)__：主要用于表示一段时间内数据采样结果（请求持续的时间或响应大小）\n* __Gauges(仪表盘)__：最简单的度量指标，监测瞬间状态（监控硬盘容量或者内存的使用量）\n* __Counters(计数器)__：从数据量0开始累积计算，在理想状态下只能是永远的增长不会降低\n\n常用的采集方法：\n* collectDefaultMetrics() 返回 Promethues 的默认推荐指标，默认10s探测一次\n* AggregatorRegsitry 聚合注册器：监听集群的性能指标（主进程和其产生的子进程）\n  * clusterMetrics() 返回默认指标\n  * [抓取所有进程的 metrics 只能在主进程上抓取，在子进程上获取不到 metrics](https://github.com/siimon/prom-client/issues/257)\n\n收集到指标后，就可以利用 PromQL 进行计算了，计算时注意 PromQL __即时向量__ 和 __范围向量__ 两种向量的区别和转换：\n````\n    // 计算每分钟垃圾回收bytes数\n    delta(nodejs_gc_reclaimed_bytes_total{gctype=\"Scavenge\"}[1m])\n\n    // 计算个页面5min以内的DomReady均值\n    delta(FE_Timing_Performance_domReady_sum[5m])/delta(FE_Timing_Performance_domReady_count[5m])\n````\n\n#### ※[example-prometheus-nodejs](https://github.com/RisingStack/example-prometheus-nodejs)\n&emsp;&emsp; 这个 demo 是一个完整的 prom-client + Promethues + grafana 监控示例，有助于理解整个监控流程。\n\n### 四、前端异常记录实践结论\n__并不推荐使用 Prometheus 系统来记录前端页面性能等信息。__\n1. 从指标上来看，应用的基本性能指标：吞吐量、内存使用量、每秒请求数、请求平均耗时等。这些几乎都是“瞬时”值（由于时间窗口小，可看做瞬时值），而前端性能指标并不是“瞬时”，它更偏向于一段时间内的表现情况（时间窗口大）。Prometheus 系统主要用于监听应用的性能，它的数据类型更多是为应用服务。\n* 应用性能特点：一个应用，多个指标；\n* [前端页面的性能指标](https://kuro-p.github.io/2019/07/11/前端性能监控-Performance/#more)特点：一个页面，多个指标。多个页面。\n2. 从数据类型上来看：\n   * Gauges：不可以用来记录前端的性能表现。因为 Gauge 记录的某一刻的瞬时值，如果用来记录时间，则每次数据都会被最后访问的那名用户刷新；\n   * Counter：计数器虽然可以记录前端某个页面的访问次数，但若页面路由中携带参数，或者结尾带时间戳，则会生成多个重复页面的 Counter，遇到爬虫还会生成大量无用路径，表现并不好；\n   * Histogram、Summary：可以记录多个页面，多个指标；Histogram 和 Summary 很相似，只不过 Histogram 记录原始值，Summary 记录指标的各个占比。\n3. 从可视化web UI上来看：\n公司 Prometheus 系统默认使用的可视化UI是 Grafana。之前尝试用 Histogram 来记录前端各页面的性能表现，在 Grafana 中用折线图可视化数据。一个指标对应一个折线图，但由于页面路由多个，导致各个折线图中折线过多难以分辨；若取所有页面该指标的均值或者最大值来展示，又不知道峰值是哪个页面产生的。\n\n__综上可以看出，Prometheus 可以记录前端性能指标，但是受数据类型制约，它并不是最合适的。__\n\n### 参考资料\n* [Prometheus 官网](https://prometheus.io)\n* [Prometheus 的数据类型介绍](https://blog.csdn.net/polo2044/article/details/83277299)\n* [prom-client 监控示例](https://www.colabug.com/227611.html)\n* [如何区分 Prometheus 中 Histogram 和 Summary 类型的 metrics?](https://www.cnblogs.com/aguncn/p/9920545.html)","source":"_posts/Prometheus监控应用性能.md","raw":"---\ntitle: Prometheus 监控应用性能\ndate: 2019-07-15 10:21:58\ntags: [性能监控]\ncategories: 监控\n---\n&emsp;&emsp; Prometheus 是一个开源的监控系统。它可以自动化的监听应用各性能指标的变化情况，并发出报警信息。了解它目的，是想把前端页面的性能指标记录到公司的 Prometheus 监控系统上，利用它监听前端页面各类异常。\n<!--more-->\n### 一、Prometheus 系统简介\n[Prometheus](https://prometheus.io/) 是一个开源的服务监控系统，社区资源和开发者都很活跃。其主要原理是通过 HTTP 协议从远程的机器收集数据并存储在本地的[时序数据库](https://www.cnblogs.com/aiandbigdata/p/10052335.html)上。Prometheus 通过安装在远程机器上的 exporter (数据暴露)插件来收集监控数据。\n\n#### Prometheus 特点\nPrometheus 本身也是一个时序数据库，它通过 HTTP 的方式获取时序数据。Prometheus 自身的查询语言 PromQL 可多维度的查询并实时计算指标的值。通过 PromQL 提供的计算方法，可以自定义数据可视化的指标，以及报警临界值。它有四种数据类型，可针对不同场景使用不同数据类型。\n\n#### Prometheus 系统的组成部分\n![](/architecture.png \"Prometheus 架构\")\n在监控流程中，主要由三个部分组成：被监控的应用暴露性能指标(exporter)，promethues 应用采集性能指标(collector)，数据可视化分析界面(web UI)。详情参照下述：\n1. Prometheus server: 用于抓取数据，并存储到时序数据库;\n2. Prometheus exporter: 安装在监控目标的上，为 Prometheus server 提供数据抓取的接口;\n3. Prometheus web UI: 提供数据可视化分析界面;\n4. Alertmanager: 用于处理警报;\n5. Pushgateway: 用于 job 推送;\n\n### 二、Prometheus 监控流程图\n![](/flowChart.png \"Prometheus flow chart\")\n\n#### Promethues server\n主要负责数据采集和存储，提供 PromQL 查询语言的支持。可以通过 Prometheus 的 `.yml`文件中的`scrape_config` [(字段详情)](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config)来配置要抓取的应用指标地址。同时，Promethues 也会监控自身的健康情况，默认将指标暴露在自身的 `http://localhost:9090/metrics`。\n\n#### Promethues exporter\n参照[官方推荐的插件列表](https://prometheus.io/docs/instrumenting/clientlibs/)，由于本次监听的站点是 NodeJS 站点，所以选择 [prom-client](https://github.com/siimon/prom-client) 作为 exporter。\n注意：被监听的应用需要暴露指标接口供 server 抓取。\n\n#### Prometheus web UI\nGrafana 可以连接多种类型的库，选择 Promethues 即可，默认监听 Promethues server 的9090`/metrics` 路径。\n\n### 三、NodeJS 应用性能监控\n使用 [prom-client](https://github.com/siimon/prom-client) 和 [node-prometheus-gc-stats](https://github.com/SimenB/node-prometheus-gc-stats) 收集 NodeJS 的性能指标。\n* prom-client：收集服务端性能指标\n* node-prometheus-gc-stats：垃圾回收相关指标统计\n\n（prom-client 相当于一个exporter，将默认的指标暴露在 /metrics 接口，之后 Promethues service会根据 `.yml` 配置中的采集时间定期来这个接口采集数据信息，然后 web UI Grafana 再跟 Promethues server 进行同步）\n\n#### prom-client 文档\n一共支持四种数据格式：Histogram、Summary、Gauges 、Counters：\n\n* __Histogram(柱状图)__：统计数据的分布情况（比如 `Http_response_time` 的时间分布）\n* __Summary(摘要)__：主要用于表示一段时间内数据采样结果（请求持续的时间或响应大小）\n* __Gauges(仪表盘)__：最简单的度量指标，监测瞬间状态（监控硬盘容量或者内存的使用量）\n* __Counters(计数器)__：从数据量0开始累积计算，在理想状态下只能是永远的增长不会降低\n\n常用的采集方法：\n* collectDefaultMetrics() 返回 Promethues 的默认推荐指标，默认10s探测一次\n* AggregatorRegsitry 聚合注册器：监听集群的性能指标（主进程和其产生的子进程）\n  * clusterMetrics() 返回默认指标\n  * [抓取所有进程的 metrics 只能在主进程上抓取，在子进程上获取不到 metrics](https://github.com/siimon/prom-client/issues/257)\n\n收集到指标后，就可以利用 PromQL 进行计算了，计算时注意 PromQL __即时向量__ 和 __范围向量__ 两种向量的区别和转换：\n````\n    // 计算每分钟垃圾回收bytes数\n    delta(nodejs_gc_reclaimed_bytes_total{gctype=\"Scavenge\"}[1m])\n\n    // 计算个页面5min以内的DomReady均值\n    delta(FE_Timing_Performance_domReady_sum[5m])/delta(FE_Timing_Performance_domReady_count[5m])\n````\n\n#### ※[example-prometheus-nodejs](https://github.com/RisingStack/example-prometheus-nodejs)\n&emsp;&emsp; 这个 demo 是一个完整的 prom-client + Promethues + grafana 监控示例，有助于理解整个监控流程。\n\n### 四、前端异常记录实践结论\n__并不推荐使用 Prometheus 系统来记录前端页面性能等信息。__\n1. 从指标上来看，应用的基本性能指标：吞吐量、内存使用量、每秒请求数、请求平均耗时等。这些几乎都是“瞬时”值（由于时间窗口小，可看做瞬时值），而前端性能指标并不是“瞬时”，它更偏向于一段时间内的表现情况（时间窗口大）。Prometheus 系统主要用于监听应用的性能，它的数据类型更多是为应用服务。\n* 应用性能特点：一个应用，多个指标；\n* [前端页面的性能指标](https://kuro-p.github.io/2019/07/11/前端性能监控-Performance/#more)特点：一个页面，多个指标。多个页面。\n2. 从数据类型上来看：\n   * Gauges：不可以用来记录前端的性能表现。因为 Gauge 记录的某一刻的瞬时值，如果用来记录时间，则每次数据都会被最后访问的那名用户刷新；\n   * Counter：计数器虽然可以记录前端某个页面的访问次数，但若页面路由中携带参数，或者结尾带时间戳，则会生成多个重复页面的 Counter，遇到爬虫还会生成大量无用路径，表现并不好；\n   * Histogram、Summary：可以记录多个页面，多个指标；Histogram 和 Summary 很相似，只不过 Histogram 记录原始值，Summary 记录指标的各个占比。\n3. 从可视化web UI上来看：\n公司 Prometheus 系统默认使用的可视化UI是 Grafana。之前尝试用 Histogram 来记录前端各页面的性能表现，在 Grafana 中用折线图可视化数据。一个指标对应一个折线图，但由于页面路由多个，导致各个折线图中折线过多难以分辨；若取所有页面该指标的均值或者最大值来展示，又不知道峰值是哪个页面产生的。\n\n__综上可以看出，Prometheus 可以记录前端性能指标，但是受数据类型制约，它并不是最合适的。__\n\n### 参考资料\n* [Prometheus 官网](https://prometheus.io)\n* [Prometheus 的数据类型介绍](https://blog.csdn.net/polo2044/article/details/83277299)\n* [prom-client 监控示例](https://www.colabug.com/227611.html)\n* [如何区分 Prometheus 中 Histogram 和 Summary 类型的 metrics?](https://www.cnblogs.com/aguncn/p/9920545.html)","slug":"Prometheus监控应用性能","published":1,"updated":"2019-11-14T07:01:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7v8vss5000k96fyazr2sqc1","content":"<p>&emsp;&emsp; Prometheus 是一个开源的监控系统。它可以自动化的监听应用各性能指标的变化情况，并发出报警信息。了解它目的，是想把前端页面的性能指标记录到公司的 Prometheus 监控系统上，利用它监听前端页面各类异常。<br><a id=\"more\"></a></p>\n<h3 id=\"一、Prometheus-系统简介\"><a href=\"#一、Prometheus-系统简介\" class=\"headerlink\" title=\"一、Prometheus 系统简介\"></a>一、Prometheus 系统简介</h3><p><a href=\"https://prometheus.io/\" target=\"_blank\" rel=\"noopener\">Prometheus</a> 是一个开源的服务监控系统，社区资源和开发者都很活跃。其主要原理是通过 HTTP 协议从远程的机器收集数据并存储在本地的<a href=\"https://www.cnblogs.com/aiandbigdata/p/10052335.html\" target=\"_blank\" rel=\"noopener\">时序数据库</a>上。Prometheus 通过安装在远程机器上的 exporter (数据暴露)插件来收集监控数据。</p>\n<h4 id=\"Prometheus-特点\"><a href=\"#Prometheus-特点\" class=\"headerlink\" title=\"Prometheus 特点\"></a>Prometheus 特点</h4><p>Prometheus 本身也是一个时序数据库，它通过 HTTP 的方式获取时序数据。Prometheus 自身的查询语言 PromQL 可多维度的查询并实时计算指标的值。通过 PromQL 提供的计算方法，可以自定义数据可视化的指标，以及报警临界值。它有四种数据类型，可针对不同场景使用不同数据类型。</p>\n<h4 id=\"Prometheus-系统的组成部分\"><a href=\"#Prometheus-系统的组成部分\" class=\"headerlink\" title=\"Prometheus 系统的组成部分\"></a>Prometheus 系统的组成部分</h4><p><img src=\"/2019/07/15/Prometheus监控应用性能/architecture.png\" alt=\"\" title=\"Prometheus 架构\"><br>在监控流程中，主要由三个部分组成：被监控的应用暴露性能指标(exporter)，promethues 应用采集性能指标(collector)，数据可视化分析界面(web UI)。详情参照下述：</p>\n<ol>\n<li>Prometheus server: 用于抓取数据，并存储到时序数据库;</li>\n<li>Prometheus exporter: 安装在监控目标的上，为 Prometheus server 提供数据抓取的接口;</li>\n<li>Prometheus web UI: 提供数据可视化分析界面;</li>\n<li>Alertmanager: 用于处理警报;</li>\n<li>Pushgateway: 用于 job 推送;</li>\n</ol>\n<h3 id=\"二、Prometheus-监控流程图\"><a href=\"#二、Prometheus-监控流程图\" class=\"headerlink\" title=\"二、Prometheus 监控流程图\"></a>二、Prometheus 监控流程图</h3><p><img src=\"/2019/07/15/Prometheus监控应用性能/flowChart.png\" alt=\"\" title=\"Prometheus flow chart\"></p>\n<h4 id=\"Promethues-server\"><a href=\"#Promethues-server\" class=\"headerlink\" title=\"Promethues server\"></a>Promethues server</h4><p>主要负责数据采集和存储，提供 PromQL 查询语言的支持。可以通过 Prometheus 的 <code>.yml</code>文件中的<code>scrape_config</code> <a href=\"https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config\" target=\"_blank\" rel=\"noopener\">(字段详情)</a>来配置要抓取的应用指标地址。同时，Promethues 也会监控自身的健康情况，默认将指标暴露在自身的 <code>http://localhost:9090/metrics</code>。</p>\n<h4 id=\"Promethues-exporter\"><a href=\"#Promethues-exporter\" class=\"headerlink\" title=\"Promethues exporter\"></a>Promethues exporter</h4><p>参照<a href=\"https://prometheus.io/docs/instrumenting/clientlibs/\" target=\"_blank\" rel=\"noopener\">官方推荐的插件列表</a>，由于本次监听的站点是 NodeJS 站点，所以选择 <a href=\"https://github.com/siimon/prom-client\" target=\"_blank\" rel=\"noopener\">prom-client</a> 作为 exporter。<br>注意：被监听的应用需要暴露指标接口供 server 抓取。</p>\n<h4 id=\"Prometheus-web-UI\"><a href=\"#Prometheus-web-UI\" class=\"headerlink\" title=\"Prometheus web UI\"></a>Prometheus web UI</h4><p>Grafana 可以连接多种类型的库，选择 Promethues 即可，默认监听 Promethues server 的9090<code>/metrics</code> 路径。</p>\n<h3 id=\"三、NodeJS-应用性能监控\"><a href=\"#三、NodeJS-应用性能监控\" class=\"headerlink\" title=\"三、NodeJS 应用性能监控\"></a>三、NodeJS 应用性能监控</h3><p>使用 <a href=\"https://github.com/siimon/prom-client\" target=\"_blank\" rel=\"noopener\">prom-client</a> 和 <a href=\"https://github.com/SimenB/node-prometheus-gc-stats\" target=\"_blank\" rel=\"noopener\">node-prometheus-gc-stats</a> 收集 NodeJS 的性能指标。</p>\n<ul>\n<li>prom-client：收集服务端性能指标</li>\n<li>node-prometheus-gc-stats：垃圾回收相关指标统计</li>\n</ul>\n<p>（prom-client 相当于一个exporter，将默认的指标暴露在 /metrics 接口，之后 Promethues service会根据 <code>.yml</code> 配置中的采集时间定期来这个接口采集数据信息，然后 web UI Grafana 再跟 Promethues server 进行同步）</p>\n<h4 id=\"prom-client-文档\"><a href=\"#prom-client-文档\" class=\"headerlink\" title=\"prom-client 文档\"></a>prom-client 文档</h4><p>一共支持四种数据格式：Histogram、Summary、Gauges 、Counters：</p>\n<ul>\n<li><strong>Histogram(柱状图)</strong>：统计数据的分布情况（比如 <code>Http_response_time</code> 的时间分布）</li>\n<li><strong>Summary(摘要)</strong>：主要用于表示一段时间内数据采样结果（请求持续的时间或响应大小）</li>\n<li><strong>Gauges(仪表盘)</strong>：最简单的度量指标，监测瞬间状态（监控硬盘容量或者内存的使用量）</li>\n<li><strong>Counters(计数器)</strong>：从数据量0开始累积计算，在理想状态下只能是永远的增长不会降低</li>\n</ul>\n<p>常用的采集方法：</p>\n<ul>\n<li>collectDefaultMetrics() 返回 Promethues 的默认推荐指标，默认10s探测一次</li>\n<li>AggregatorRegsitry 聚合注册器：监听集群的性能指标（主进程和其产生的子进程）<ul>\n<li>clusterMetrics() 返回默认指标</li>\n<li><a href=\"https://github.com/siimon/prom-client/issues/257\" target=\"_blank\" rel=\"noopener\">抓取所有进程的 metrics 只能在主进程上抓取，在子进程上获取不到 metrics</a></li>\n</ul>\n</li>\n</ul>\n<p>收集到指标后，就可以利用 PromQL 进行计算了，计算时注意 PromQL <strong>即时向量</strong> 和 <strong>范围向量</strong> 两种向量的区别和转换：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 计算每分钟垃圾回收bytes数</span><br><span class=\"line\">delta(nodejs_gc_reclaimed_bytes_total&#123;gctype=&quot;Scavenge&quot;&#125;[1m])</span><br><span class=\"line\"></span><br><span class=\"line\">// 计算个页面5min以内的DomReady均值</span><br><span class=\"line\">delta(FE_Timing_Performance_domReady_sum[5m])/delta(FE_Timing_Performance_domReady_count[5m])</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"※example-prometheus-nodejs\"><a href=\"#※example-prometheus-nodejs\" class=\"headerlink\" title=\"※example-prometheus-nodejs\"></a>※<a href=\"https://github.com/RisingStack/example-prometheus-nodejs\" target=\"_blank\" rel=\"noopener\">example-prometheus-nodejs</a></h4><p>&emsp;&emsp; 这个 demo 是一个完整的 prom-client + Promethues + grafana 监控示例，有助于理解整个监控流程。</p>\n<h3 id=\"四、前端异常记录实践结论\"><a href=\"#四、前端异常记录实践结论\" class=\"headerlink\" title=\"四、前端异常记录实践结论\"></a>四、前端异常记录实践结论</h3><p><strong>并不推荐使用 Prometheus 系统来记录前端页面性能等信息。</strong></p>\n<ol>\n<li>从指标上来看，应用的基本性能指标：吞吐量、内存使用量、每秒请求数、请求平均耗时等。这些几乎都是“瞬时”值（由于时间窗口小，可看做瞬时值），而前端性能指标并不是“瞬时”，它更偏向于一段时间内的表现情况（时间窗口大）。Prometheus 系统主要用于监听应用的性能，它的数据类型更多是为应用服务。</li>\n</ol>\n<ul>\n<li>应用性能特点：一个应用，多个指标；</li>\n<li><a href=\"https://kuro-p.github.io/2019/07/11/前端性能监控-Performance/#more\" target=\"_blank\" rel=\"noopener\">前端页面的性能指标</a>特点：一个页面，多个指标。多个页面。</li>\n</ul>\n<ol start=\"2\">\n<li>从数据类型上来看：<ul>\n<li>Gauges：不可以用来记录前端的性能表现。因为 Gauge 记录的某一刻的瞬时值，如果用来记录时间，则每次数据都会被最后访问的那名用户刷新；</li>\n<li>Counter：计数器虽然可以记录前端某个页面的访问次数，但若页面路由中携带参数，或者结尾带时间戳，则会生成多个重复页面的 Counter，遇到爬虫还会生成大量无用路径，表现并不好；</li>\n<li>Histogram、Summary：可以记录多个页面，多个指标；Histogram 和 Summary 很相似，只不过 Histogram 记录原始值，Summary 记录指标的各个占比。</li>\n</ul>\n</li>\n<li>从可视化web UI上来看：<br>公司 Prometheus 系统默认使用的可视化UI是 Grafana。之前尝试用 Histogram 来记录前端各页面的性能表现，在 Grafana 中用折线图可视化数据。一个指标对应一个折线图，但由于页面路由多个，导致各个折线图中折线过多难以分辨；若取所有页面该指标的均值或者最大值来展示，又不知道峰值是哪个页面产生的。</li>\n</ol>\n<p><strong>综上可以看出，Prometheus 可以记录前端性能指标，但是受数据类型制约，它并不是最合适的。</strong></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://prometheus.io\" target=\"_blank\" rel=\"noopener\">Prometheus 官网</a></li>\n<li><a href=\"https://blog.csdn.net/polo2044/article/details/83277299\" target=\"_blank\" rel=\"noopener\">Prometheus 的数据类型介绍</a></li>\n<li><a href=\"https://www.colabug.com/227611.html\" target=\"_blank\" rel=\"noopener\">prom-client 监控示例</a></li>\n<li><a href=\"https://www.cnblogs.com/aguncn/p/9920545.html\" target=\"_blank\" rel=\"noopener\">如何区分 Prometheus 中 Histogram 和 Summary 类型的 metrics?</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp; Prometheus 是一个开源的监控系统。它可以自动化的监听应用各性能指标的变化情况，并发出报警信息。了解它目的，是想把前端页面的性能指标记录到公司的 Prometheus 监控系统上，利用它监听前端页面各类异常。<br></p>","more":"<p></p>\n<h3 id=\"一、Prometheus-系统简介\"><a href=\"#一、Prometheus-系统简介\" class=\"headerlink\" title=\"一、Prometheus 系统简介\"></a>一、Prometheus 系统简介</h3><p><a href=\"https://prometheus.io/\" target=\"_blank\" rel=\"noopener\">Prometheus</a> 是一个开源的服务监控系统，社区资源和开发者都很活跃。其主要原理是通过 HTTP 协议从远程的机器收集数据并存储在本地的<a href=\"https://www.cnblogs.com/aiandbigdata/p/10052335.html\" target=\"_blank\" rel=\"noopener\">时序数据库</a>上。Prometheus 通过安装在远程机器上的 exporter (数据暴露)插件来收集监控数据。</p>\n<h4 id=\"Prometheus-特点\"><a href=\"#Prometheus-特点\" class=\"headerlink\" title=\"Prometheus 特点\"></a>Prometheus 特点</h4><p>Prometheus 本身也是一个时序数据库，它通过 HTTP 的方式获取时序数据。Prometheus 自身的查询语言 PromQL 可多维度的查询并实时计算指标的值。通过 PromQL 提供的计算方法，可以自定义数据可视化的指标，以及报警临界值。它有四种数据类型，可针对不同场景使用不同数据类型。</p>\n<h4 id=\"Prometheus-系统的组成部分\"><a href=\"#Prometheus-系统的组成部分\" class=\"headerlink\" title=\"Prometheus 系统的组成部分\"></a>Prometheus 系统的组成部分</h4><p><img src=\"/2019/07/15/Prometheus监控应用性能/architecture.png\" alt=\"\" title=\"Prometheus 架构\"><br>在监控流程中，主要由三个部分组成：被监控的应用暴露性能指标(exporter)，promethues 应用采集性能指标(collector)，数据可视化分析界面(web UI)。详情参照下述：</p>\n<ol>\n<li>Prometheus server: 用于抓取数据，并存储到时序数据库;</li>\n<li>Prometheus exporter: 安装在监控目标的上，为 Prometheus server 提供数据抓取的接口;</li>\n<li>Prometheus web UI: 提供数据可视化分析界面;</li>\n<li>Alertmanager: 用于处理警报;</li>\n<li>Pushgateway: 用于 job 推送;</li>\n</ol>\n<h3 id=\"二、Prometheus-监控流程图\"><a href=\"#二、Prometheus-监控流程图\" class=\"headerlink\" title=\"二、Prometheus 监控流程图\"></a>二、Prometheus 监控流程图</h3><p><img src=\"/2019/07/15/Prometheus监控应用性能/flowChart.png\" alt=\"\" title=\"Prometheus flow chart\"></p>\n<h4 id=\"Promethues-server\"><a href=\"#Promethues-server\" class=\"headerlink\" title=\"Promethues server\"></a>Promethues server</h4><p>主要负责数据采集和存储，提供 PromQL 查询语言的支持。可以通过 Prometheus 的 <code>.yml</code>文件中的<code>scrape_config</code> <a href=\"https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config\" target=\"_blank\" rel=\"noopener\">(字段详情)</a>来配置要抓取的应用指标地址。同时，Promethues 也会监控自身的健康情况，默认将指标暴露在自身的 <code>http://localhost:9090/metrics</code>。</p>\n<h4 id=\"Promethues-exporter\"><a href=\"#Promethues-exporter\" class=\"headerlink\" title=\"Promethues exporter\"></a>Promethues exporter</h4><p>参照<a href=\"https://prometheus.io/docs/instrumenting/clientlibs/\" target=\"_blank\" rel=\"noopener\">官方推荐的插件列表</a>，由于本次监听的站点是 NodeJS 站点，所以选择 <a href=\"https://github.com/siimon/prom-client\" target=\"_blank\" rel=\"noopener\">prom-client</a> 作为 exporter。<br>注意：被监听的应用需要暴露指标接口供 server 抓取。</p>\n<h4 id=\"Prometheus-web-UI\"><a href=\"#Prometheus-web-UI\" class=\"headerlink\" title=\"Prometheus web UI\"></a>Prometheus web UI</h4><p>Grafana 可以连接多种类型的库，选择 Promethues 即可，默认监听 Promethues server 的9090<code>/metrics</code> 路径。</p>\n<h3 id=\"三、NodeJS-应用性能监控\"><a href=\"#三、NodeJS-应用性能监控\" class=\"headerlink\" title=\"三、NodeJS 应用性能监控\"></a>三、NodeJS 应用性能监控</h3><p>使用 <a href=\"https://github.com/siimon/prom-client\" target=\"_blank\" rel=\"noopener\">prom-client</a> 和 <a href=\"https://github.com/SimenB/node-prometheus-gc-stats\" target=\"_blank\" rel=\"noopener\">node-prometheus-gc-stats</a> 收集 NodeJS 的性能指标。</p>\n<ul>\n<li>prom-client：收集服务端性能指标</li>\n<li>node-prometheus-gc-stats：垃圾回收相关指标统计</li>\n</ul>\n<p>（prom-client 相当于一个exporter，将默认的指标暴露在 /metrics 接口，之后 Promethues service会根据 <code>.yml</code> 配置中的采集时间定期来这个接口采集数据信息，然后 web UI Grafana 再跟 Promethues server 进行同步）</p>\n<h4 id=\"prom-client-文档\"><a href=\"#prom-client-文档\" class=\"headerlink\" title=\"prom-client 文档\"></a>prom-client 文档</h4><p>一共支持四种数据格式：Histogram、Summary、Gauges 、Counters：</p>\n<ul>\n<li><strong>Histogram(柱状图)</strong>：统计数据的分布情况（比如 <code>Http_response_time</code> 的时间分布）</li>\n<li><strong>Summary(摘要)</strong>：主要用于表示一段时间内数据采样结果（请求持续的时间或响应大小）</li>\n<li><strong>Gauges(仪表盘)</strong>：最简单的度量指标，监测瞬间状态（监控硬盘容量或者内存的使用量）</li>\n<li><strong>Counters(计数器)</strong>：从数据量0开始累积计算，在理想状态下只能是永远的增长不会降低</li>\n</ul>\n<p>常用的采集方法：</p>\n<ul>\n<li>collectDefaultMetrics() 返回 Promethues 的默认推荐指标，默认10s探测一次</li>\n<li>AggregatorRegsitry 聚合注册器：监听集群的性能指标（主进程和其产生的子进程）<ul>\n<li>clusterMetrics() 返回默认指标</li>\n<li><a href=\"https://github.com/siimon/prom-client/issues/257\" target=\"_blank\" rel=\"noopener\">抓取所有进程的 metrics 只能在主进程上抓取，在子进程上获取不到 metrics</a></li>\n</ul>\n</li>\n</ul>\n<p>收集到指标后，就可以利用 PromQL 进行计算了，计算时注意 PromQL <strong>即时向量</strong> 和 <strong>范围向量</strong> 两种向量的区别和转换：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 计算每分钟垃圾回收bytes数</span><br><span class=\"line\">delta(nodejs_gc_reclaimed_bytes_total&#123;gctype=&quot;Scavenge&quot;&#125;[1m])</span><br><span class=\"line\"></span><br><span class=\"line\">// 计算个页面5min以内的DomReady均值</span><br><span class=\"line\">delta(FE_Timing_Performance_domReady_sum[5m])/delta(FE_Timing_Performance_domReady_count[5m])</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"※example-prometheus-nodejs\"><a href=\"#※example-prometheus-nodejs\" class=\"headerlink\" title=\"※example-prometheus-nodejs\"></a>※<a href=\"https://github.com/RisingStack/example-prometheus-nodejs\" target=\"_blank\" rel=\"noopener\">example-prometheus-nodejs</a></h4><p>&emsp;&emsp; 这个 demo 是一个完整的 prom-client + Promethues + grafana 监控示例，有助于理解整个监控流程。</p>\n<h3 id=\"四、前端异常记录实践结论\"><a href=\"#四、前端异常记录实践结论\" class=\"headerlink\" title=\"四、前端异常记录实践结论\"></a>四、前端异常记录实践结论</h3><p><strong>并不推荐使用 Prometheus 系统来记录前端页面性能等信息。</strong></p>\n<ol>\n<li>从指标上来看，应用的基本性能指标：吞吐量、内存使用量、每秒请求数、请求平均耗时等。这些几乎都是“瞬时”值（由于时间窗口小，可看做瞬时值），而前端性能指标并不是“瞬时”，它更偏向于一段时间内的表现情况（时间窗口大）。Prometheus 系统主要用于监听应用的性能，它的数据类型更多是为应用服务。</li>\n</ol>\n<ul>\n<li>应用性能特点：一个应用，多个指标；</li>\n<li><a href=\"https://kuro-p.github.io/2019/07/11/前端性能监控-Performance/#more\" target=\"_blank\" rel=\"noopener\">前端页面的性能指标</a>特点：一个页面，多个指标。多个页面。</li>\n</ul>\n<ol start=\"2\">\n<li>从数据类型上来看：<ul>\n<li>Gauges：不可以用来记录前端的性能表现。因为 Gauge 记录的某一刻的瞬时值，如果用来记录时间，则每次数据都会被最后访问的那名用户刷新；</li>\n<li>Counter：计数器虽然可以记录前端某个页面的访问次数，但若页面路由中携带参数，或者结尾带时间戳，则会生成多个重复页面的 Counter，遇到爬虫还会生成大量无用路径，表现并不好；</li>\n<li>Histogram、Summary：可以记录多个页面，多个指标；Histogram 和 Summary 很相似，只不过 Histogram 记录原始值，Summary 记录指标的各个占比。</li>\n</ul>\n</li>\n<li>从可视化web UI上来看：<br>公司 Prometheus 系统默认使用的可视化UI是 Grafana。之前尝试用 Histogram 来记录前端各页面的性能表现，在 Grafana 中用折线图可视化数据。一个指标对应一个折线图，但由于页面路由多个，导致各个折线图中折线过多难以分辨；若取所有页面该指标的均值或者最大值来展示，又不知道峰值是哪个页面产生的。</li>\n</ol>\n<p><strong>综上可以看出，Prometheus 可以记录前端性能指标，但是受数据类型制约，它并不是最合适的。</strong></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://prometheus.io\" target=\"_blank\" rel=\"noopener\">Prometheus 官网</a></li>\n<li><a href=\"https://blog.csdn.net/polo2044/article/details/83277299\" target=\"_blank\" rel=\"noopener\">Prometheus 的数据类型介绍</a></li>\n<li><a href=\"https://www.colabug.com/227611.html\" target=\"_blank\" rel=\"noopener\">prom-client 监控示例</a></li>\n<li><a href=\"https://www.cnblogs.com/aguncn/p/9920545.html\" target=\"_blank\" rel=\"noopener\">如何区分 Prometheus 中 Histogram 和 Summary 类型的 metrics?</a></li>\n</ul>"},{"title":"z-index小结","date":"2019-08-05T08:36:13.000Z","_content":"z-index 这东西简单的用法大家都会用，但是当多个规则多个层级共同作用时，展现的效果往往跟自己的想法有很大差异，论 CSS 基本功的重要性。本文总结了 CSS 层叠的特性、基本准则和创建条件，内容大多参考了张鑫旭大神的《CSS世界》。\n<!--more-->\n\n### 层叠的基本概念\n* 层叠上下文(stacking context)：当前元素所处的层叠规则，即元素所处的 z 轴。一个页面中，层叠上下文不止一个。\n* 层叠水平(stacking level)：同一个层叠上下文中元 素在 z 轴上的显示等级。\n* 层叠顺序(stacking order)：\n  * background/border 指在同一层叠上下文元素的边框和背景色。\n  * inline水平盒子指的是包括inline/inline-block/inline-table元素的“层叠顺序”，它们都是同等级别的。\n  * 内联元素的层叠顺序要比浮动元素和块状元素都高，是因为float元素在起始时是作为布局元素存在的。由于“内容”的重要性远大于“装饰”和“布局”，所以内容元素层叠顺序比较高，详情见下图：\n![层叠顺序图](/stacking-order.png)\n\n### z-index\n__z-index 属性只有和定位元素(position 不为 static 的元素)在一起的时候才有作用，可以是正数也可以是负数。在同一层叠上下文中，数值越大层级越高。__ 在CSS3中，z-index 已经并非只对定位元素有效，flex 盒子的子元素 也可以设置 z-index 属性。\n\n#### 层叠准则\n1. 谁大谁上：在同一个层叠上下文领域，具有明显的层叠水平标识的时候，层叠水平值大的那一个覆盖小的那一个，例如 z-index 属性值。\n2. 后来居上：当元素的层叠水平一致、层叠顺序相同的时候，在 DOM 流中处于后面的元素会覆盖前面的元素。\n\n#### 层叠上下文的特性\n* 层叠上下文的层叠水平要比普通元素高。\n* 层叠上下文可以阻断元素的混合模式。\n* 层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的“层叠上下文”。\n* 每个层叠上下文和兄弟元素独立，也就是说，当进行层叠变化或渲染的时候，只需要考虑后代元素。\n* 每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。\n\n#### 页面中的层叠上下文\n* __根层叠上下文__：页面根元素具</html>有层叠上下文，称为“根层叠上下文”。故页面中所有的元素至少处于一个层叠上下文中。\n* __定位元素与传统层叠上下文__：对于 position 值为 relative/absolute 以及 Firefox/IE 浏览器(不包括 Chrome 浏览 器)下含有 position:fixed 声明的定位元素，当其 z-index 值不是 auto 的时候，会创建层叠上下文(__z-index 一旦变成数值，即使是 0，也创建一个层叠上下文__)。\n* __CSS3新属性的层叠上下文__：\n  * 元素为 flex 布局元素(父元素 display:flex|inline-flex)，同时 z-index 值不是 auto。\n  * 元素的 opacity 值不是 1\n  * 元素的 transform 值不是 none。\n  * 元素 mix-blend-mode 值不是 normal。\n  * 元素的 filter 值不是 none。\n  * 元素的 isolation 值是 isolate。\n  * 元素的 will-change 属性值为上面 2~6 的任意一个(如 will-change:opacity、will-chang:transform 等)。\n  * 元素的-webkit-overflow-scrolling 设为 touch。\n\n#### CSS3 属性与 z-index 的兼容性问题\n1. Safari 3D变换会忽略 z-index[(解决方案)](https://blog.csdn.net/sherry_0706/article/details/52593888)","source":"_posts/z-index小结.md","raw":"---\ntitle: z-index小结\ndate: 2019-08-05 16:36:13\ntags: [CSS]\ncategories: [前端, CSS]\n---\nz-index 这东西简单的用法大家都会用，但是当多个规则多个层级共同作用时，展现的效果往往跟自己的想法有很大差异，论 CSS 基本功的重要性。本文总结了 CSS 层叠的特性、基本准则和创建条件，内容大多参考了张鑫旭大神的《CSS世界》。\n<!--more-->\n\n### 层叠的基本概念\n* 层叠上下文(stacking context)：当前元素所处的层叠规则，即元素所处的 z 轴。一个页面中，层叠上下文不止一个。\n* 层叠水平(stacking level)：同一个层叠上下文中元 素在 z 轴上的显示等级。\n* 层叠顺序(stacking order)：\n  * background/border 指在同一层叠上下文元素的边框和背景色。\n  * inline水平盒子指的是包括inline/inline-block/inline-table元素的“层叠顺序”，它们都是同等级别的。\n  * 内联元素的层叠顺序要比浮动元素和块状元素都高，是因为float元素在起始时是作为布局元素存在的。由于“内容”的重要性远大于“装饰”和“布局”，所以内容元素层叠顺序比较高，详情见下图：\n![层叠顺序图](/stacking-order.png)\n\n### z-index\n__z-index 属性只有和定位元素(position 不为 static 的元素)在一起的时候才有作用，可以是正数也可以是负数。在同一层叠上下文中，数值越大层级越高。__ 在CSS3中，z-index 已经并非只对定位元素有效，flex 盒子的子元素 也可以设置 z-index 属性。\n\n#### 层叠准则\n1. 谁大谁上：在同一个层叠上下文领域，具有明显的层叠水平标识的时候，层叠水平值大的那一个覆盖小的那一个，例如 z-index 属性值。\n2. 后来居上：当元素的层叠水平一致、层叠顺序相同的时候，在 DOM 流中处于后面的元素会覆盖前面的元素。\n\n#### 层叠上下文的特性\n* 层叠上下文的层叠水平要比普通元素高。\n* 层叠上下文可以阻断元素的混合模式。\n* 层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的“层叠上下文”。\n* 每个层叠上下文和兄弟元素独立，也就是说，当进行层叠变化或渲染的时候，只需要考虑后代元素。\n* 每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。\n\n#### 页面中的层叠上下文\n* __根层叠上下文__：页面根元素具</html>有层叠上下文，称为“根层叠上下文”。故页面中所有的元素至少处于一个层叠上下文中。\n* __定位元素与传统层叠上下文__：对于 position 值为 relative/absolute 以及 Firefox/IE 浏览器(不包括 Chrome 浏览 器)下含有 position:fixed 声明的定位元素，当其 z-index 值不是 auto 的时候，会创建层叠上下文(__z-index 一旦变成数值，即使是 0，也创建一个层叠上下文__)。\n* __CSS3新属性的层叠上下文__：\n  * 元素为 flex 布局元素(父元素 display:flex|inline-flex)，同时 z-index 值不是 auto。\n  * 元素的 opacity 值不是 1\n  * 元素的 transform 值不是 none。\n  * 元素 mix-blend-mode 值不是 normal。\n  * 元素的 filter 值不是 none。\n  * 元素的 isolation 值是 isolate。\n  * 元素的 will-change 属性值为上面 2~6 的任意一个(如 will-change:opacity、will-chang:transform 等)。\n  * 元素的-webkit-overflow-scrolling 设为 touch。\n\n#### CSS3 属性与 z-index 的兼容性问题\n1. Safari 3D变换会忽略 z-index[(解决方案)](https://blog.csdn.net/sherry_0706/article/details/52593888)","slug":"z-index小结","published":1,"updated":"2019-11-11T03:54:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7v8vss8000o96fyktcq7nzx","content":"<p>z-index 这东西简单的用法大家都会用，但是当多个规则多个层级共同作用时，展现的效果往往跟自己的想法有很大差异，论 CSS 基本功的重要性。本文总结了 CSS 层叠的特性、基本准则和创建条件，内容大多参考了张鑫旭大神的《CSS世界》。<br><a id=\"more\"></a></p>\n<h3 id=\"层叠的基本概念\"><a href=\"#层叠的基本概念\" class=\"headerlink\" title=\"层叠的基本概念\"></a>层叠的基本概念</h3><ul>\n<li>层叠上下文(stacking context)：当前元素所处的层叠规则，即元素所处的 z 轴。一个页面中，层叠上下文不止一个。</li>\n<li>层叠水平(stacking level)：同一个层叠上下文中元 素在 z 轴上的显示等级。</li>\n<li>层叠顺序(stacking order)：<ul>\n<li>background/border 指在同一层叠上下文元素的边框和背景色。</li>\n<li>inline水平盒子指的是包括inline/inline-block/inline-table元素的“层叠顺序”，它们都是同等级别的。</li>\n<li>内联元素的层叠顺序要比浮动元素和块状元素都高，是因为float元素在起始时是作为布局元素存在的。由于“内容”的重要性远大于“装饰”和“布局”，所以内容元素层叠顺序比较高，详情见下图：<br><img src=\"/2019/08/05/z-index小结/stacking-order.png\" alt=\"层叠顺序图\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"z-index\"><a href=\"#z-index\" class=\"headerlink\" title=\"z-index\"></a>z-index</h3><p><strong>z-index 属性只有和定位元素(position 不为 static 的元素)在一起的时候才有作用，可以是正数也可以是负数。在同一层叠上下文中，数值越大层级越高。</strong> 在CSS3中，z-index 已经并非只对定位元素有效，flex 盒子的子元素 也可以设置 z-index 属性。</p>\n<h4 id=\"层叠准则\"><a href=\"#层叠准则\" class=\"headerlink\" title=\"层叠准则\"></a>层叠准则</h4><ol>\n<li>谁大谁上：在同一个层叠上下文领域，具有明显的层叠水平标识的时候，层叠水平值大的那一个覆盖小的那一个，例如 z-index 属性值。</li>\n<li>后来居上：当元素的层叠水平一致、层叠顺序相同的时候，在 DOM 流中处于后面的元素会覆盖前面的元素。</li>\n</ol>\n<h4 id=\"层叠上下文的特性\"><a href=\"#层叠上下文的特性\" class=\"headerlink\" title=\"层叠上下文的特性\"></a>层叠上下文的特性</h4><ul>\n<li>层叠上下文的层叠水平要比普通元素高。</li>\n<li>层叠上下文可以阻断元素的混合模式。</li>\n<li>层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的“层叠上下文”。</li>\n<li>每个层叠上下文和兄弟元素独立，也就是说，当进行层叠变化或渲染的时候，只需要考虑后代元素。</li>\n<li>每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。</li>\n</ul>\n<h4 id=\"页面中的层叠上下文\"><a href=\"#页面中的层叠上下文\" class=\"headerlink\" title=\"页面中的层叠上下文\"></a>页面中的层叠上下文</h4><ul>\n<li><strong>根层叠上下文</strong>：页面根元素具有层叠上下文，称为“根层叠上下文”。故页面中所有的元素至少处于一个层叠上下文中。</li>\n<li><strong>定位元素与传统层叠上下文</strong>：对于 position 值为 relative/absolute 以及 Firefox/IE 浏览器(不包括 Chrome 浏览 器)下含有 position:fixed 声明的定位元素，当其 z-index 值不是 auto 的时候，会创建层叠上下文(<strong>z-index 一旦变成数值，即使是 0，也创建一个层叠上下文</strong>)。</li>\n<li><strong>CSS3新属性的层叠上下文</strong>：<ul>\n<li>元素为 flex 布局元素(父元素 display:flex|inline-flex)，同时 z-index 值不是 auto。</li>\n<li>元素的 opacity 值不是 1</li>\n<li>元素的 transform 值不是 none。</li>\n<li>元素 mix-blend-mode 值不是 normal。</li>\n<li>元素的 filter 值不是 none。</li>\n<li>元素的 isolation 值是 isolate。</li>\n<li>元素的 will-change 属性值为上面 2~6 的任意一个(如 will-change:opacity、will-chang:transform 等)。</li>\n<li>元素的-webkit-overflow-scrolling 设为 touch。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"CSS3-属性与-z-index-的兼容性问题\"><a href=\"#CSS3-属性与-z-index-的兼容性问题\" class=\"headerlink\" title=\"CSS3 属性与 z-index 的兼容性问题\"></a>CSS3 属性与 z-index 的兼容性问题</h4><ol>\n<li>Safari 3D变换会忽略 z-index<a href=\"https://blog.csdn.net/sherry_0706/article/details/52593888\" target=\"_blank\" rel=\"noopener\">(解决方案)</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>z-index 这东西简单的用法大家都会用，但是当多个规则多个层级共同作用时，展现的效果往往跟自己的想法有很大差异，论 CSS 基本功的重要性。本文总结了 CSS 层叠的特性、基本准则和创建条件，内容大多参考了张鑫旭大神的《CSS世界》。<br></p>","more":"<p></p>\n<h3 id=\"层叠的基本概念\"><a href=\"#层叠的基本概念\" class=\"headerlink\" title=\"层叠的基本概念\"></a>层叠的基本概念</h3><ul>\n<li>层叠上下文(stacking context)：当前元素所处的层叠规则，即元素所处的 z 轴。一个页面中，层叠上下文不止一个。</li>\n<li>层叠水平(stacking level)：同一个层叠上下文中元 素在 z 轴上的显示等级。</li>\n<li>层叠顺序(stacking order)：<ul>\n<li>background/border 指在同一层叠上下文元素的边框和背景色。</li>\n<li>inline水平盒子指的是包括inline/inline-block/inline-table元素的“层叠顺序”，它们都是同等级别的。</li>\n<li>内联元素的层叠顺序要比浮动元素和块状元素都高，是因为float元素在起始时是作为布局元素存在的。由于“内容”的重要性远大于“装饰”和“布局”，所以内容元素层叠顺序比较高，详情见下图：<br><img src=\"/2019/08/05/z-index小结/stacking-order.png\" alt=\"层叠顺序图\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"z-index\"><a href=\"#z-index\" class=\"headerlink\" title=\"z-index\"></a>z-index</h3><p><strong>z-index 属性只有和定位元素(position 不为 static 的元素)在一起的时候才有作用，可以是正数也可以是负数。在同一层叠上下文中，数值越大层级越高。</strong> 在CSS3中，z-index 已经并非只对定位元素有效，flex 盒子的子元素 也可以设置 z-index 属性。</p>\n<h4 id=\"层叠准则\"><a href=\"#层叠准则\" class=\"headerlink\" title=\"层叠准则\"></a>层叠准则</h4><ol>\n<li>谁大谁上：在同一个层叠上下文领域，具有明显的层叠水平标识的时候，层叠水平值大的那一个覆盖小的那一个，例如 z-index 属性值。</li>\n<li>后来居上：当元素的层叠水平一致、层叠顺序相同的时候，在 DOM 流中处于后面的元素会覆盖前面的元素。</li>\n</ol>\n<h4 id=\"层叠上下文的特性\"><a href=\"#层叠上下文的特性\" class=\"headerlink\" title=\"层叠上下文的特性\"></a>层叠上下文的特性</h4><ul>\n<li>层叠上下文的层叠水平要比普通元素高。</li>\n<li>层叠上下文可以阻断元素的混合模式。</li>\n<li>层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的“层叠上下文”。</li>\n<li>每个层叠上下文和兄弟元素独立，也就是说，当进行层叠变化或渲染的时候，只需要考虑后代元素。</li>\n<li>每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。</li>\n</ul>\n<h4 id=\"页面中的层叠上下文\"><a href=\"#页面中的层叠上下文\" class=\"headerlink\" title=\"页面中的层叠上下文\"></a>页面中的层叠上下文</h4><ul>\n<li><strong>根层叠上下文</strong>：页面根元素具有层叠上下文，称为“根层叠上下文”。故页面中所有的元素至少处于一个层叠上下文中。</li>\n<li><strong>定位元素与传统层叠上下文</strong>：对于 position 值为 relative/absolute 以及 Firefox/IE 浏览器(不包括 Chrome 浏览 器)下含有 position:fixed 声明的定位元素，当其 z-index 值不是 auto 的时候，会创建层叠上下文(<strong>z-index 一旦变成数值，即使是 0，也创建一个层叠上下文</strong>)。</li>\n<li><strong>CSS3新属性的层叠上下文</strong>：<ul>\n<li>元素为 flex 布局元素(父元素 display:flex|inline-flex)，同时 z-index 值不是 auto。</li>\n<li>元素的 opacity 值不是 1</li>\n<li>元素的 transform 值不是 none。</li>\n<li>元素 mix-blend-mode 值不是 normal。</li>\n<li>元素的 filter 值不是 none。</li>\n<li>元素的 isolation 值是 isolate。</li>\n<li>元素的 will-change 属性值为上面 2~6 的任意一个(如 will-change:opacity、will-chang:transform 等)。</li>\n<li>元素的-webkit-overflow-scrolling 设为 touch。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"CSS3-属性与-z-index-的兼容性问题\"><a href=\"#CSS3-属性与-z-index-的兼容性问题\" class=\"headerlink\" title=\"CSS3 属性与 z-index 的兼容性问题\"></a>CSS3 属性与 z-index 的兼容性问题</h4><ol>\n<li>Safari 3D变换会忽略 z-index<a href=\"https://blog.csdn.net/sherry_0706/article/details/52593888\" target=\"_blank\" rel=\"noopener\">(解决方案)</a></li>\n</ol>"},{"title":"《看见》-柴静","date":"2018-09-07T07:19:14.000Z","_content":"无意间逛知乎的时候发现的书籍片段，留下了很深的印象。从记者的视角看到平日里生活中接触不到的社会另一面，别有一番感触。不愧是著名记者，文笔犀利，干练不拖沓。值得一读的好书：★★★★★\n<!--more-->\n### 第二章 那个温热的跳动就是活着\n我对非典的印象还是停留在小学时候，有那么一段时间，教室里每天清晨和下午都要喷洒消毒水，学校的走廊里弥漫着一股医院的味道。那时还小，只知道这是在预防“非典”，但它到底是什么，我并不知道。\n> 这就是我之前听说的天井。四周楼群间的一块空地，一 个楼与楼之间的天井，加个盖，就成了个完全封闭的空间， 成了输液室，发热的病人都集中到这里来输液。二十七张床 几乎完全挨在一起，中间只有一只拳头的距离。白天也完全靠灯光，没有通风，没有窗，只有一个中央空调的排气口， 这个排气口把病菌传到各处。\n> 病历胡乱地堆在桌上，像小山一样，已经发黄发脆。我 犹豫了一秒钟。朱继红几乎是凄然地一笑，说:“我来吧。” 病例被翻开，上面写的都是“肺炎”。他指给我看墙上的黑 板，上面写了二十二个人的名字，其中十九个后面都用白粉 笔写着:肺炎、肺炎、肺炎......\n> “实际上都是 SARS。”他说。\n\n> 一个卫生系统的官员在这里感染，回家又把妻子儿子感染了，想尽办法要住院，只能找到一个床位，夫妇俩让儿子住了进去。两口子发烧得浑身透湿，站不住，只能顫抖着坐在 小板凳上输液。再后来连板凳都坐不住了。孩子痊愈的时候， 父母已经去世。\n\n明明只是在描述，却让人觉得无比震撼。","source":"_posts/《看见》-柴静.md","raw":"---\ntitle: 《看见》-柴静 \ndate: 2018-09-07 15:19:14\ntags: 读书小结\ncategories: 闲暇读物\n---\n无意间逛知乎的时候发现的书籍片段，留下了很深的印象。从记者的视角看到平日里生活中接触不到的社会另一面，别有一番感触。不愧是著名记者，文笔犀利，干练不拖沓。值得一读的好书：★★★★★\n<!--more-->\n### 第二章 那个温热的跳动就是活着\n我对非典的印象还是停留在小学时候，有那么一段时间，教室里每天清晨和下午都要喷洒消毒水，学校的走廊里弥漫着一股医院的味道。那时还小，只知道这是在预防“非典”，但它到底是什么，我并不知道。\n> 这就是我之前听说的天井。四周楼群间的一块空地，一 个楼与楼之间的天井，加个盖，就成了个完全封闭的空间， 成了输液室，发热的病人都集中到这里来输液。二十七张床 几乎完全挨在一起，中间只有一只拳头的距离。白天也完全靠灯光，没有通风，没有窗，只有一个中央空调的排气口， 这个排气口把病菌传到各处。\n> 病历胡乱地堆在桌上，像小山一样，已经发黄发脆。我 犹豫了一秒钟。朱继红几乎是凄然地一笑，说:“我来吧。” 病例被翻开，上面写的都是“肺炎”。他指给我看墙上的黑 板，上面写了二十二个人的名字，其中十九个后面都用白粉 笔写着:肺炎、肺炎、肺炎......\n> “实际上都是 SARS。”他说。\n\n> 一个卫生系统的官员在这里感染，回家又把妻子儿子感染了，想尽办法要住院，只能找到一个床位，夫妇俩让儿子住了进去。两口子发烧得浑身透湿，站不住，只能顫抖着坐在 小板凳上输液。再后来连板凳都坐不住了。孩子痊愈的时候， 父母已经去世。\n\n明明只是在描述，却让人觉得无比震撼。","slug":"《看见》-柴静","published":1,"updated":"2019-11-11T03:54:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7v8vssb000s96fybwu9jvjs","content":"<p>无意间逛知乎的时候发现的书籍片段，留下了很深的印象。从记者的视角看到平日里生活中接触不到的社会另一面，别有一番感触。不愧是著名记者，文笔犀利，干练不拖沓。值得一读的好书：★★★★★<br><a id=\"more\"></a></p>\n<h3 id=\"第二章-那个温热的跳动就是活着\"><a href=\"#第二章-那个温热的跳动就是活着\" class=\"headerlink\" title=\"第二章 那个温热的跳动就是活着\"></a>第二章 那个温热的跳动就是活着</h3><p>我对非典的印象还是停留在小学时候，有那么一段时间，教室里每天清晨和下午都要喷洒消毒水，学校的走廊里弥漫着一股医院的味道。那时还小，只知道这是在预防“非典”，但它到底是什么，我并不知道。</p>\n<blockquote>\n<p>这就是我之前听说的天井。四周楼群间的一块空地，一 个楼与楼之间的天井，加个盖，就成了个完全封闭的空间， 成了输液室，发热的病人都集中到这里来输液。二十七张床 几乎完全挨在一起，中间只有一只拳头的距离。白天也完全靠灯光，没有通风，没有窗，只有一个中央空调的排气口， 这个排气口把病菌传到各处。<br>病历胡乱地堆在桌上，像小山一样，已经发黄发脆。我 犹豫了一秒钟。朱继红几乎是凄然地一笑，说:“我来吧。” 病例被翻开，上面写的都是“肺炎”。他指给我看墙上的黑 板，上面写了二十二个人的名字，其中十九个后面都用白粉 笔写着:肺炎、肺炎、肺炎……<br>“实际上都是 SARS。”他说。</p>\n</blockquote>\n<blockquote>\n<p>一个卫生系统的官员在这里感染，回家又把妻子儿子感染了，想尽办法要住院，只能找到一个床位，夫妇俩让儿子住了进去。两口子发烧得浑身透湿，站不住，只能顫抖着坐在 小板凳上输液。再后来连板凳都坐不住了。孩子痊愈的时候， 父母已经去世。</p>\n</blockquote>\n<p>明明只是在描述，却让人觉得无比震撼。</p>\n","site":{"data":{}},"excerpt":"<p>无意间逛知乎的时候发现的书籍片段，留下了很深的印象。从记者的视角看到平日里生活中接触不到的社会另一面，别有一番感触。不愧是著名记者，文笔犀利，干练不拖沓。值得一读的好书：★★★★★<br></p>","more":"<p></p>\n<h3 id=\"第二章-那个温热的跳动就是活着\"><a href=\"#第二章-那个温热的跳动就是活着\" class=\"headerlink\" title=\"第二章 那个温热的跳动就是活着\"></a>第二章 那个温热的跳动就是活着</h3><p>我对非典的印象还是停留在小学时候，有那么一段时间，教室里每天清晨和下午都要喷洒消毒水，学校的走廊里弥漫着一股医院的味道。那时还小，只知道这是在预防“非典”，但它到底是什么，我并不知道。</p>\n<blockquote>\n<p>这就是我之前听说的天井。四周楼群间的一块空地，一 个楼与楼之间的天井，加个盖，就成了个完全封闭的空间， 成了输液室，发热的病人都集中到这里来输液。二十七张床 几乎完全挨在一起，中间只有一只拳头的距离。白天也完全靠灯光，没有通风，没有窗，只有一个中央空调的排气口， 这个排气口把病菌传到各处。<br>病历胡乱地堆在桌上，像小山一样，已经发黄发脆。我 犹豫了一秒钟。朱继红几乎是凄然地一笑，说:“我来吧。” 病例被翻开，上面写的都是“肺炎”。他指给我看墙上的黑 板，上面写了二十二个人的名字，其中十九个后面都用白粉 笔写着:肺炎、肺炎、肺炎……<br>“实际上都是 SARS。”他说。</p>\n</blockquote>\n<blockquote>\n<p>一个卫生系统的官员在这里感染，回家又把妻子儿子感染了，想尽办法要住院，只能找到一个床位，夫妇俩让儿子住了进去。两口子发烧得浑身透湿，站不住，只能顫抖着坐在 小板凳上输液。再后来连板凳都坐不住了。孩子痊愈的时候， 父母已经去世。</p>\n</blockquote>\n<p>明明只是在描述，却让人觉得无比震撼。</p>"},{"title":"《计算机网络》- http 部分读书笔记","date":"2019-10-22T09:06:19.000Z","_content":"《计算机网络(第7版)-谢希仁》http 部分的读书小结和扩展，因为工作中最常打交道的就是这部分了。整本书都很不错，语言通俗易懂；各协议的关系、发展过程以及区别都概括的很好。\n本文主要概括 HTTP、HTTP1.0、HTTP2.0、HTTPS 的之间的差异。\n<!--more-->\n### 万维网WWW\n万维网(World Wide Web)是一个分布式的超媒体系统，是超文本系统的扩充。万维网使用 __统一资源定位符URL(Uniform Resource Locator)__ 来标志万维网上的各种文档。\n#### URL 的格式\nURL 的一般形式由以下四个部分组成：\n&nbsp;&nbsp;&nbsp;&nbsp; `<协议>://<主机>:<端口>/<路径>`\nURL 的<协议>就是指出使用什么协议来获取万维网文档。现在最常用的协议就是 http，其次是 ftp。有些浏览器为方便用户，在输入 URL 时，可以把最前面的“http://”甚至把主机名最前面的“www”省略，然后浏览器替用户把省略的字补上。\n__URL里面的字母不分大小写，但是为了便于阅读，有时故意使用一些大写字母。__\n#### 超文本传送协议 HTTP\nHTTP(HyperText Transfer Protocol，超文本传输协议)，使用了面向连接的 TCP 作为传输层协议，监听 80 端口，信息是明文传输，其本身是无状态的。\n* HTTP1.0 :(1996) 每次请求都会单独建立一个TCP连接，用完关闭；（缺点：每次请求都耗费时间在连接上，__非持续连接__ 使服务器开销很重）。\n* HTTP1.1 :(1999) 在服务器发送完响应后仍在一段时间内保持这条连接，浏览器和该服务器可以继续在该连接上传送后续的请求报文和响应报文，使用 __持续连接__ 。\n* HTTP2.0 :(2015) 使用了新的二进制格式、多路复用、以及 header 压缩，性能相对于 HTTP1.x 提升明显。改善了在 Http1.1 中，浏览器客户端在同一时间，针对同一域名下的请求有一定数量限制（连接数量），超过限制会被阻塞；基于 HTTPS，天生具有安全性，可以避免单纯使用 HTTPS 带来的性能下降。\n\n#### 影响 HTTP 网络请求的因素\n影响因素主要有两个：带宽和延迟。\n* __带宽__：在浏览器刚流行的时候，大部分用户是通过拨号来上网，由于受当时的带宽条件的限制，无法使得用户的同时多个请求被处理。同时，当时的服务器的配置也比现在差很多，所以限制每个浏览器的连接数的大小也是有必要的。浏览器默认对同一域下的资源，只保持一定的连接数，阻塞过多的连接,以提高访问速度和解决阻塞问题。不同浏览器的默认值不一样，对于不同的 HTTP 协议其值也不一样。\n\n| 浏览器 | HTTP 1.1 | HTTP 1.0 |\n| :-: | :-: | :-: | \n| IE 6、7 | 2| 4 | \n| IE 8 | 6 | 6 | \n| FireFox 2 | 2 | 8 |\n| FireFox 3 | 6 | 6 | \n| Safari 3、4 | 4 | 4 | \n\n如果说我们还停留在拨号上网的阶段，带宽可能会成为一个比较严重影响请求的问题，但是现在网络基础建设已经使得带宽得到极大的提升，我们不再会担心由带宽而影响网速，那么就只剩下延迟了。\n\n* __延迟__：\n  * 浏览器阻塞（HOL blocking）：浏览器会因为一些原因阻塞请求。浏览器对于同一个域名，同时只能有 4 个连接（这个根据浏览器内核不同可能会有所差异），超过浏览器最大连接数限制（见上表），后续请求就会被阻塞。\n  * DNS 查询（DNS Lookup）：浏览器需要知道目标服务器的 IP 才能建立连接。将域名解析为 IP 的这个系统就是 DNS。这个通常可以利用DNS缓存结果来达到减少这个时间的目的。\n  * 建立连接（Initial connection）：HTTP 是基于 TCP 协议的，浏览器最快也要在第三次握手时才能捎带 HTTP 请求报文，达到真正的建立连接，但是这些连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对文件类大请求影响较大。\n\n#### 应用层安全协议 HTTPS\nHTTPS 是使用 SSL(Secure Socket Layer，安全套接字层)协议的 HTTP 协议。SSL 作用在 HTTP 和运输层之间，在 TCP 之上建立起一个安全通道，为通过 TCP 传输的应用层数据提供安全保障。\nHTTPS 监听 TCP 的 443 端口，信息是密文传输。","source":"_posts/《计算机网络》-http-部分读书笔记.md","raw":"---\ntitle: 《计算机网络》- http 部分读书笔记\ndate: 2019-10-22 17:06:19\ntags: [计算机网络]\ncategories: 计算机相关知识\n---\n《计算机网络(第7版)-谢希仁》http 部分的读书小结和扩展，因为工作中最常打交道的就是这部分了。整本书都很不错，语言通俗易懂；各协议的关系、发展过程以及区别都概括的很好。\n本文主要概括 HTTP、HTTP1.0、HTTP2.0、HTTPS 的之间的差异。\n<!--more-->\n### 万维网WWW\n万维网(World Wide Web)是一个分布式的超媒体系统，是超文本系统的扩充。万维网使用 __统一资源定位符URL(Uniform Resource Locator)__ 来标志万维网上的各种文档。\n#### URL 的格式\nURL 的一般形式由以下四个部分组成：\n&nbsp;&nbsp;&nbsp;&nbsp; `<协议>://<主机>:<端口>/<路径>`\nURL 的<协议>就是指出使用什么协议来获取万维网文档。现在最常用的协议就是 http，其次是 ftp。有些浏览器为方便用户，在输入 URL 时，可以把最前面的“http://”甚至把主机名最前面的“www”省略，然后浏览器替用户把省略的字补上。\n__URL里面的字母不分大小写，但是为了便于阅读，有时故意使用一些大写字母。__\n#### 超文本传送协议 HTTP\nHTTP(HyperText Transfer Protocol，超文本传输协议)，使用了面向连接的 TCP 作为传输层协议，监听 80 端口，信息是明文传输，其本身是无状态的。\n* HTTP1.0 :(1996) 每次请求都会单独建立一个TCP连接，用完关闭；（缺点：每次请求都耗费时间在连接上，__非持续连接__ 使服务器开销很重）。\n* HTTP1.1 :(1999) 在服务器发送完响应后仍在一段时间内保持这条连接，浏览器和该服务器可以继续在该连接上传送后续的请求报文和响应报文，使用 __持续连接__ 。\n* HTTP2.0 :(2015) 使用了新的二进制格式、多路复用、以及 header 压缩，性能相对于 HTTP1.x 提升明显。改善了在 Http1.1 中，浏览器客户端在同一时间，针对同一域名下的请求有一定数量限制（连接数量），超过限制会被阻塞；基于 HTTPS，天生具有安全性，可以避免单纯使用 HTTPS 带来的性能下降。\n\n#### 影响 HTTP 网络请求的因素\n影响因素主要有两个：带宽和延迟。\n* __带宽__：在浏览器刚流行的时候，大部分用户是通过拨号来上网，由于受当时的带宽条件的限制，无法使得用户的同时多个请求被处理。同时，当时的服务器的配置也比现在差很多，所以限制每个浏览器的连接数的大小也是有必要的。浏览器默认对同一域下的资源，只保持一定的连接数，阻塞过多的连接,以提高访问速度和解决阻塞问题。不同浏览器的默认值不一样，对于不同的 HTTP 协议其值也不一样。\n\n| 浏览器 | HTTP 1.1 | HTTP 1.0 |\n| :-: | :-: | :-: | \n| IE 6、7 | 2| 4 | \n| IE 8 | 6 | 6 | \n| FireFox 2 | 2 | 8 |\n| FireFox 3 | 6 | 6 | \n| Safari 3、4 | 4 | 4 | \n\n如果说我们还停留在拨号上网的阶段，带宽可能会成为一个比较严重影响请求的问题，但是现在网络基础建设已经使得带宽得到极大的提升，我们不再会担心由带宽而影响网速，那么就只剩下延迟了。\n\n* __延迟__：\n  * 浏览器阻塞（HOL blocking）：浏览器会因为一些原因阻塞请求。浏览器对于同一个域名，同时只能有 4 个连接（这个根据浏览器内核不同可能会有所差异），超过浏览器最大连接数限制（见上表），后续请求就会被阻塞。\n  * DNS 查询（DNS Lookup）：浏览器需要知道目标服务器的 IP 才能建立连接。将域名解析为 IP 的这个系统就是 DNS。这个通常可以利用DNS缓存结果来达到减少这个时间的目的。\n  * 建立连接（Initial connection）：HTTP 是基于 TCP 协议的，浏览器最快也要在第三次握手时才能捎带 HTTP 请求报文，达到真正的建立连接，但是这些连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对文件类大请求影响较大。\n\n#### 应用层安全协议 HTTPS\nHTTPS 是使用 SSL(Secure Socket Layer，安全套接字层)协议的 HTTP 协议。SSL 作用在 HTTP 和运输层之间，在 TCP 之上建立起一个安全通道，为通过 TCP 传输的应用层数据提供安全保障。\nHTTPS 监听 TCP 的 443 端口，信息是密文传输。","slug":"《计算机网络》-http-部分读书笔记","published":1,"updated":"2020-01-17T10:29:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7v8vssc000u96fyaeh9t6w5","content":"<p>《计算机网络(第7版)-谢希仁》http 部分的读书小结和扩展，因为工作中最常打交道的就是这部分了。整本书都很不错，语言通俗易懂；各协议的关系、发展过程以及区别都概括的很好。<br>本文主要概括 HTTP、HTTP1.0、HTTP2.0、HTTPS 的之间的差异。<br><a id=\"more\"></a></p>\n<h3 id=\"万维网WWW\"><a href=\"#万维网WWW\" class=\"headerlink\" title=\"万维网WWW\"></a>万维网WWW</h3><p>万维网(World Wide Web)是一个分布式的超媒体系统，是超文本系统的扩充。万维网使用 <strong>统一资源定位符URL(Uniform Resource Locator)</strong> 来标志万维网上的各种文档。</p>\n<h4 id=\"URL-的格式\"><a href=\"#URL-的格式\" class=\"headerlink\" title=\"URL 的格式\"></a>URL 的格式</h4><p>URL 的一般形式由以下四个部分组成：<br>&nbsp;&nbsp;&nbsp;&nbsp; <code>&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</code><br>URL 的&lt;协议&gt;就是指出使用什么协议来获取万维网文档。现在最常用的协议就是 http，其次是 ftp。有些浏览器为方便用户，在输入 URL 时，可以把最前面的“http://”甚至把主机名最前面的“www”省略，然后浏览器替用户把省略的字补上。<br><strong>URL里面的字母不分大小写，但是为了便于阅读，有时故意使用一些大写字母。</strong></p>\n<h4 id=\"超文本传送协议-HTTP\"><a href=\"#超文本传送协议-HTTP\" class=\"headerlink\" title=\"超文本传送协议 HTTP\"></a>超文本传送协议 HTTP</h4><p>HTTP(HyperText Transfer Protocol，超文本传输协议)，使用了面向连接的 TCP 作为传输层协议，监听 80 端口，信息是明文传输，其本身是无状态的。</p>\n<ul>\n<li>HTTP1.0 :(1996) 每次请求都会单独建立一个TCP连接，用完关闭；（缺点：每次请求都耗费时间在连接上，<strong>非持续连接</strong> 使服务器开销很重）。</li>\n<li>HTTP1.1 :(1999) 在服务器发送完响应后仍在一段时间内保持这条连接，浏览器和该服务器可以继续在该连接上传送后续的请求报文和响应报文，使用 <strong>持续连接</strong> 。</li>\n<li>HTTP2.0 :(2015) 使用了新的二进制格式、多路复用、以及 header 压缩，性能相对于 HTTP1.x 提升明显。改善了在 Http1.1 中，浏览器客户端在同一时间，针对同一域名下的请求有一定数量限制（连接数量），超过限制会被阻塞；基于 HTTPS，天生具有安全性，可以避免单纯使用 HTTPS 带来的性能下降。</li>\n</ul>\n<h4 id=\"影响-HTTP-网络请求的因素\"><a href=\"#影响-HTTP-网络请求的因素\" class=\"headerlink\" title=\"影响 HTTP 网络请求的因素\"></a>影响 HTTP 网络请求的因素</h4><p>影响因素主要有两个：带宽和延迟。</p>\n<ul>\n<li><strong>带宽</strong>：在浏览器刚流行的时候，大部分用户是通过拨号来上网，由于受当时的带宽条件的限制，无法使得用户的同时多个请求被处理。同时，当时的服务器的配置也比现在差很多，所以限制每个浏览器的连接数的大小也是有必要的。浏览器默认对同一域下的资源，只保持一定的连接数，阻塞过多的连接,以提高访问速度和解决阻塞问题。不同浏览器的默认值不一样，对于不同的 HTTP 协议其值也不一样。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">浏览器</th>\n<th style=\"text-align:center\">HTTP 1.1</th>\n<th style=\"text-align:center\">HTTP 1.0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">IE 6、7</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IE 8</td>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">FireFox 2</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">FireFox 3</td>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Safari 3、4</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n</tbody>\n</table>\n<p>如果说我们还停留在拨号上网的阶段，带宽可能会成为一个比较严重影响请求的问题，但是现在网络基础建设已经使得带宽得到极大的提升，我们不再会担心由带宽而影响网速，那么就只剩下延迟了。</p>\n<ul>\n<li><strong>延迟</strong>：<ul>\n<li>浏览器阻塞（HOL blocking）：浏览器会因为一些原因阻塞请求。浏览器对于同一个域名，同时只能有 4 个连接（这个根据浏览器内核不同可能会有所差异），超过浏览器最大连接数限制（见上表），后续请求就会被阻塞。</li>\n<li>DNS 查询（DNS Lookup）：浏览器需要知道目标服务器的 IP 才能建立连接。将域名解析为 IP 的这个系统就是 DNS。这个通常可以利用DNS缓存结果来达到减少这个时间的目的。</li>\n<li>建立连接（Initial connection）：HTTP 是基于 TCP 协议的，浏览器最快也要在第三次握手时才能捎带 HTTP 请求报文，达到真正的建立连接，但是这些连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对文件类大请求影响较大。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"应用层安全协议-HTTPS\"><a href=\"#应用层安全协议-HTTPS\" class=\"headerlink\" title=\"应用层安全协议 HTTPS\"></a>应用层安全协议 HTTPS</h4><p>HTTPS 是使用 SSL(Secure Socket Layer，安全套接字层)协议的 HTTP 协议。SSL 作用在 HTTP 和运输层之间，在 TCP 之上建立起一个安全通道，为通过 TCP 传输的应用层数据提供安全保障。<br>HTTPS 监听 TCP 的 443 端口，信息是密文传输。</p>\n","site":{"data":{}},"excerpt":"<p>《计算机网络(第7版)-谢希仁》http 部分的读书小结和扩展，因为工作中最常打交道的就是这部分了。整本书都很不错，语言通俗易懂；各协议的关系、发展过程以及区别都概括的很好。<br>本文主要概括 HTTP、HTTP1.0、HTTP2.0、HTTPS 的之间的差异。<br></p>","more":"<p></p>\n<h3 id=\"万维网WWW\"><a href=\"#万维网WWW\" class=\"headerlink\" title=\"万维网WWW\"></a>万维网WWW</h3><p>万维网(World Wide Web)是一个分布式的超媒体系统，是超文本系统的扩充。万维网使用 <strong>统一资源定位符URL(Uniform Resource Locator)</strong> 来标志万维网上的各种文档。</p>\n<h4 id=\"URL-的格式\"><a href=\"#URL-的格式\" class=\"headerlink\" title=\"URL 的格式\"></a>URL 的格式</h4><p>URL 的一般形式由以下四个部分组成：<br>&nbsp;&nbsp;&nbsp;&nbsp; <code>&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</code><br>URL 的&lt;协议&gt;就是指出使用什么协议来获取万维网文档。现在最常用的协议就是 http，其次是 ftp。有些浏览器为方便用户，在输入 URL 时，可以把最前面的“http://”甚至把主机名最前面的“www”省略，然后浏览器替用户把省略的字补上。<br><strong>URL里面的字母不分大小写，但是为了便于阅读，有时故意使用一些大写字母。</strong></p>\n<h4 id=\"超文本传送协议-HTTP\"><a href=\"#超文本传送协议-HTTP\" class=\"headerlink\" title=\"超文本传送协议 HTTP\"></a>超文本传送协议 HTTP</h4><p>HTTP(HyperText Transfer Protocol，超文本传输协议)，使用了面向连接的 TCP 作为传输层协议，监听 80 端口，信息是明文传输，其本身是无状态的。</p>\n<ul>\n<li>HTTP1.0 :(1996) 每次请求都会单独建立一个TCP连接，用完关闭；（缺点：每次请求都耗费时间在连接上，<strong>非持续连接</strong> 使服务器开销很重）。</li>\n<li>HTTP1.1 :(1999) 在服务器发送完响应后仍在一段时间内保持这条连接，浏览器和该服务器可以继续在该连接上传送后续的请求报文和响应报文，使用 <strong>持续连接</strong> 。</li>\n<li>HTTP2.0 :(2015) 使用了新的二进制格式、多路复用、以及 header 压缩，性能相对于 HTTP1.x 提升明显。改善了在 Http1.1 中，浏览器客户端在同一时间，针对同一域名下的请求有一定数量限制（连接数量），超过限制会被阻塞；基于 HTTPS，天生具有安全性，可以避免单纯使用 HTTPS 带来的性能下降。</li>\n</ul>\n<h4 id=\"影响-HTTP-网络请求的因素\"><a href=\"#影响-HTTP-网络请求的因素\" class=\"headerlink\" title=\"影响 HTTP 网络请求的因素\"></a>影响 HTTP 网络请求的因素</h4><p>影响因素主要有两个：带宽和延迟。</p>\n<ul>\n<li><strong>带宽</strong>：在浏览器刚流行的时候，大部分用户是通过拨号来上网，由于受当时的带宽条件的限制，无法使得用户的同时多个请求被处理。同时，当时的服务器的配置也比现在差很多，所以限制每个浏览器的连接数的大小也是有必要的。浏览器默认对同一域下的资源，只保持一定的连接数，阻塞过多的连接,以提高访问速度和解决阻塞问题。不同浏览器的默认值不一样，对于不同的 HTTP 协议其值也不一样。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">浏览器</th>\n<th style=\"text-align:center\">HTTP 1.1</th>\n<th style=\"text-align:center\">HTTP 1.0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">IE 6、7</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IE 8</td>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">FireFox 2</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">FireFox 3</td>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Safari 3、4</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n</tbody>\n</table>\n<p>如果说我们还停留在拨号上网的阶段，带宽可能会成为一个比较严重影响请求的问题，但是现在网络基础建设已经使得带宽得到极大的提升，我们不再会担心由带宽而影响网速，那么就只剩下延迟了。</p>\n<ul>\n<li><strong>延迟</strong>：<ul>\n<li>浏览器阻塞（HOL blocking）：浏览器会因为一些原因阻塞请求。浏览器对于同一个域名，同时只能有 4 个连接（这个根据浏览器内核不同可能会有所差异），超过浏览器最大连接数限制（见上表），后续请求就会被阻塞。</li>\n<li>DNS 查询（DNS Lookup）：浏览器需要知道目标服务器的 IP 才能建立连接。将域名解析为 IP 的这个系统就是 DNS。这个通常可以利用DNS缓存结果来达到减少这个时间的目的。</li>\n<li>建立连接（Initial connection）：HTTP 是基于 TCP 协议的，浏览器最快也要在第三次握手时才能捎带 HTTP 请求报文，达到真正的建立连接，但是这些连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对文件类大请求影响较大。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"应用层安全协议-HTTPS\"><a href=\"#应用层安全协议-HTTPS\" class=\"headerlink\" title=\"应用层安全协议 HTTPS\"></a>应用层安全协议 HTTPS</h4><p>HTTPS 是使用 SSL(Secure Socket Layer，安全套接字层)协议的 HTTP 协议。SSL 作用在 HTTP 和运输层之间，在 TCP 之上建立起一个安全通道，为通过 TCP 传输的应用层数据提供安全保障。<br>HTTPS 监听 TCP 的 443 端口，信息是密文传输。</p>"},{"title":"前端模块化","date":"2019-01-03T03:19:05.000Z","_content":"目前JS模块化规范主要三种：浏览器端的 __AMD__、__CMD__ 规范和nodeJS端的 __commonJS__ 规范。经常被exports、modules.exports、export、require绕懵，遂来探一探究竟。\n\n#### AMD规范 (requireJS) 浏览器端 异步加载模块 提前执行\nAMD 是 RequireJS 在推广过程中对模块定义的规范化产出。\nRequireJS 帮开发者解决了各个js文件的依赖问题，让开发者在页面引入多个js时，不必考虑各个js的依赖关系，用 `define` 定义模块，用 `require` 引入。\n\n#### CMD规范 (SeaJS) 浏览器端 异步加载模块 延迟执行\nCMD 是 SeaJS 在推广过程中对模块定义的规范化产出。\nCMD 跟 AMD 很像，也使用 `define` 来定义模块，它俩主要是依赖加载的时间点不一样。相比于 AMD 依赖前置，CDM 加载采用就近原则。\n\n#### commonJS 服务端 同步加载模块 \nnodeJS的模块引用使用的就是 commonJS 的规范，因为服务端第三方库大多已存于本地，加载速度较快，使用同步加载比较理想。它使用 `module.exports` 或者是 `exports` 来导出，使用 `require` 引入。\n* browserify 使浏览器端可以直接使用 require\n* webpack 使浏览器端 js 既实现了 AMD 规范也实现了 commonJS 规范\n\n#### ES6 的 export 和 import \nES6 将模块进行了标准化，整合 commonJS 和 AMD 规范，使用 `export` 或者 `export default` 来暴露模块，使用 `import` 导入。\n\n经过上述总结，大多第三方库声明模块的代码也就不难理解了\n````javascript\n    if (typeof define === 'function') { // 兼容 requireJS AMD、CMD规范   \n        define(function () {\n            return moduleName;\n        });\n    } else if (typeof exports !== 'undefined') { // 兼容 webpack 引入方式(commonJS) \n        module.exports = moduleName; \n    } else {\n        this.moduleName = moduleName; // 普通引入，注册到全局\n    }\n````\n\n#### 参考资料\n[前端模块化详解(完整版)](https://github.com/ljianshu/Blog/issues/48)\n[关于commonjs，AMD，CMD之间的异同](https://www.cnblogs.com/omelette/p/6652472.html)","source":"_posts/前端模块化.md","raw":"---\ntitle: 前端模块化\ndate: 2019-01-03 11:19:05\ntags: [JavaScript]\ncategories: [前端, JavaScript]\n---\n目前JS模块化规范主要三种：浏览器端的 __AMD__、__CMD__ 规范和nodeJS端的 __commonJS__ 规范。经常被exports、modules.exports、export、require绕懵，遂来探一探究竟。\n\n#### AMD规范 (requireJS) 浏览器端 异步加载模块 提前执行\nAMD 是 RequireJS 在推广过程中对模块定义的规范化产出。\nRequireJS 帮开发者解决了各个js文件的依赖问题，让开发者在页面引入多个js时，不必考虑各个js的依赖关系，用 `define` 定义模块，用 `require` 引入。\n\n#### CMD规范 (SeaJS) 浏览器端 异步加载模块 延迟执行\nCMD 是 SeaJS 在推广过程中对模块定义的规范化产出。\nCMD 跟 AMD 很像，也使用 `define` 来定义模块，它俩主要是依赖加载的时间点不一样。相比于 AMD 依赖前置，CDM 加载采用就近原则。\n\n#### commonJS 服务端 同步加载模块 \nnodeJS的模块引用使用的就是 commonJS 的规范，因为服务端第三方库大多已存于本地，加载速度较快，使用同步加载比较理想。它使用 `module.exports` 或者是 `exports` 来导出，使用 `require` 引入。\n* browserify 使浏览器端可以直接使用 require\n* webpack 使浏览器端 js 既实现了 AMD 规范也实现了 commonJS 规范\n\n#### ES6 的 export 和 import \nES6 将模块进行了标准化，整合 commonJS 和 AMD 规范，使用 `export` 或者 `export default` 来暴露模块，使用 `import` 导入。\n\n经过上述总结，大多第三方库声明模块的代码也就不难理解了\n````javascript\n    if (typeof define === 'function') { // 兼容 requireJS AMD、CMD规范   \n        define(function () {\n            return moduleName;\n        });\n    } else if (typeof exports !== 'undefined') { // 兼容 webpack 引入方式(commonJS) \n        module.exports = moduleName; \n    } else {\n        this.moduleName = moduleName; // 普通引入，注册到全局\n    }\n````\n\n#### 参考资料\n[前端模块化详解(完整版)](https://github.com/ljianshu/Blog/issues/48)\n[关于commonjs，AMD，CMD之间的异同](https://www.cnblogs.com/omelette/p/6652472.html)","slug":"前端模块化","published":1,"updated":"2019-11-11T03:54:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7v8vssd000x96fye84mnmoo","content":"<p>目前JS模块化规范主要三种：浏览器端的 <strong>AMD</strong>、<strong>CMD</strong> 规范和nodeJS端的 <strong>commonJS</strong> 规范。经常被exports、modules.exports、export、require绕懵，遂来探一探究竟。</p>\n<h4 id=\"AMD规范-requireJS-浏览器端-异步加载模块-提前执行\"><a href=\"#AMD规范-requireJS-浏览器端-异步加载模块-提前执行\" class=\"headerlink\" title=\"AMD规范 (requireJS) 浏览器端 异步加载模块 提前执行\"></a>AMD规范 (requireJS) 浏览器端 异步加载模块 提前执行</h4><p>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。<br>RequireJS 帮开发者解决了各个js文件的依赖问题，让开发者在页面引入多个js时，不必考虑各个js的依赖关系，用 <code>define</code> 定义模块，用 <code>require</code> 引入。</p>\n<h4 id=\"CMD规范-SeaJS-浏览器端-异步加载模块-延迟执行\"><a href=\"#CMD规范-SeaJS-浏览器端-异步加载模块-延迟执行\" class=\"headerlink\" title=\"CMD规范 (SeaJS) 浏览器端 异步加载模块 延迟执行\"></a>CMD规范 (SeaJS) 浏览器端 异步加载模块 延迟执行</h4><p>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。<br>CMD 跟 AMD 很像，也使用 <code>define</code> 来定义模块，它俩主要是依赖加载的时间点不一样。相比于 AMD 依赖前置，CDM 加载采用就近原则。</p>\n<h4 id=\"commonJS-服务端-同步加载模块\"><a href=\"#commonJS-服务端-同步加载模块\" class=\"headerlink\" title=\"commonJS 服务端 同步加载模块\"></a>commonJS 服务端 同步加载模块</h4><p>nodeJS的模块引用使用的就是 commonJS 的规范，因为服务端第三方库大多已存于本地，加载速度较快，使用同步加载比较理想。它使用 <code>module.exports</code> 或者是 <code>exports</code> 来导出，使用 <code>require</code> 引入。</p>\n<ul>\n<li>browserify 使浏览器端可以直接使用 require</li>\n<li>webpack 使浏览器端 js 既实现了 AMD 规范也实现了 commonJS 规范</li>\n</ul>\n<h4 id=\"ES6-的-export-和-import\"><a href=\"#ES6-的-export-和-import\" class=\"headerlink\" title=\"ES6 的 export 和 import\"></a>ES6 的 export 和 import</h4><p>ES6 将模块进行了标准化，整合 commonJS 和 AMD 规范，使用 <code>export</code> 或者 <code>export default</code> 来暴露模块，使用 <code>import</code> 导入。</p>\n<p>经过上述总结，大多第三方库声明模块的代码也就不难理解了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span>) &#123; <span class=\"comment\">// 兼容 requireJS AMD、CMD规范   </span></span><br><span class=\"line\">    define(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> moduleName;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"comment\">// 兼容 webpack 引入方式(commonJS) </span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = moduleName; </span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.moduleName = moduleName; <span class=\"comment\">// 普通引入，注册到全局</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://github.com/ljianshu/Blog/issues/48\" target=\"_blank\" rel=\"noopener\">前端模块化详解(完整版)</a><br><a href=\"https://www.cnblogs.com/omelette/p/6652472.html\" target=\"_blank\" rel=\"noopener\">关于commonjs，AMD，CMD之间的异同</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>目前JS模块化规范主要三种：浏览器端的 <strong>AMD</strong>、<strong>CMD</strong> 规范和nodeJS端的 <strong>commonJS</strong> 规范。经常被exports、modules.exports、export、require绕懵，遂来探一探究竟。</p>\n<h4 id=\"AMD规范-requireJS-浏览器端-异步加载模块-提前执行\"><a href=\"#AMD规范-requireJS-浏览器端-异步加载模块-提前执行\" class=\"headerlink\" title=\"AMD规范 (requireJS) 浏览器端 异步加载模块 提前执行\"></a>AMD规范 (requireJS) 浏览器端 异步加载模块 提前执行</h4><p>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。<br>RequireJS 帮开发者解决了各个js文件的依赖问题，让开发者在页面引入多个js时，不必考虑各个js的依赖关系，用 <code>define</code> 定义模块，用 <code>require</code> 引入。</p>\n<h4 id=\"CMD规范-SeaJS-浏览器端-异步加载模块-延迟执行\"><a href=\"#CMD规范-SeaJS-浏览器端-异步加载模块-延迟执行\" class=\"headerlink\" title=\"CMD规范 (SeaJS) 浏览器端 异步加载模块 延迟执行\"></a>CMD规范 (SeaJS) 浏览器端 异步加载模块 延迟执行</h4><p>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。<br>CMD 跟 AMD 很像，也使用 <code>define</code> 来定义模块，它俩主要是依赖加载的时间点不一样。相比于 AMD 依赖前置，CDM 加载采用就近原则。</p>\n<h4 id=\"commonJS-服务端-同步加载模块\"><a href=\"#commonJS-服务端-同步加载模块\" class=\"headerlink\" title=\"commonJS 服务端 同步加载模块\"></a>commonJS 服务端 同步加载模块</h4><p>nodeJS的模块引用使用的就是 commonJS 的规范，因为服务端第三方库大多已存于本地，加载速度较快，使用同步加载比较理想。它使用 <code>module.exports</code> 或者是 <code>exports</code> 来导出，使用 <code>require</code> 引入。</p>\n<ul>\n<li>browserify 使浏览器端可以直接使用 require</li>\n<li>webpack 使浏览器端 js 既实现了 AMD 规范也实现了 commonJS 规范</li>\n</ul>\n<h4 id=\"ES6-的-export-和-import\"><a href=\"#ES6-的-export-和-import\" class=\"headerlink\" title=\"ES6 的 export 和 import\"></a>ES6 的 export 和 import</h4><p>ES6 将模块进行了标准化，整合 commonJS 和 AMD 规范，使用 <code>export</code> 或者 <code>export default</code> 来暴露模块，使用 <code>import</code> 导入。</p>\n<p>经过上述总结，大多第三方库声明模块的代码也就不难理解了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span>) &#123; <span class=\"comment\">// 兼容 requireJS AMD、CMD规范   </span></span><br><span class=\"line\">    define(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> moduleName;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> exports !== <span class=\"string\">'undefined'</span>) &#123; <span class=\"comment\">// 兼容 webpack 引入方式(commonJS) </span></span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = moduleName; </span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.moduleName = moduleName; <span class=\"comment\">// 普通引入，注册到全局</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://github.com/ljianshu/Blog/issues/48\" target=\"_blank\" rel=\"noopener\">前端模块化详解(完整版)</a><br><a href=\"https://www.cnblogs.com/omelette/p/6652472.html\" target=\"_blank\" rel=\"noopener\">关于commonjs，AMD，CMD之间的异同</a></p>\n"},{"title":"使用 Performance APi 进行前端性能监控","date":"2019-07-11T10:55:59.000Z","_content":"&emsp;&emsp;平常只在测试环境测过前端页面性能，到了真实环境用户的手机上，页面性能的具体表现却未曾了解。H5新增的 Performance API 可以精确的测量网页性能。使开发者可以通过数据上报的方式收集线上H5页面的性能表现，以合理优化页面性能短板，提升用户体验。\n<!--more-->\n\n### 前端性能监控指标\n* __白屏时间__: 从打开网站到有内容渲染出来的时间节点\n* __首屏时间__: 首屏内容渲染完毕的时间节点\n* __domReady 时间__: 用户可操作的时间节点\n* __onload 时间__: 总下载时间\n\n### Performance API 简介\n&emsp;&emsp;[Performace](https://developer.mozilla.org/zh-CN/docs/Web/API/Performance)是 html5的新特性之一，该接口会返回当前页面性能相关的信息。Performance 对象一共提供了4个属性：\n\n* __navigation__: 包含页面加载、刷新、重定向情况\n* __timing__: 包含了各种与浏览器性能有关的时间数据\n* __memory__: 返回JavaScript对内存的占用\n* __timeOrigin__: 返回性能测量开始时的时间的高精度时间戳\n\n本文主要讨论 Performance 的 timing 对象以及其他几种统计指标。\n#### performance.timing\ntiming 对象提供了各种与浏览器处理相关的时间数据([详细](https://segmentfault.com/a/1190000014479800))，各时间节点可参照下图: \n![](/performance.png)\n\n其中常用的几项计算指标如下：\n````javascript\n    var timing = performance.timing;\n    var times = {};\n\n     // 请求耗时\n    times.request = timing.responseEnd - timing.requestStart || 0;\n\n    // 页面白屏时间\n    times.ttfb = timing.responseStart - timing.navigationStart || 0;\n\n    // 页面可操作时间\n    times.domReady = timing.domComplete - timing.responseEnd || 0;\n\n    //dom渲染时间\n    times.domRender = timing.domContentLoadedEventEnd - timing.navigationStart || 0,\n\n    // 总下载时间\n    times.onload = timing.loadEventEnd - timing.navigationStart || 0;\n\n    // DNS解析时间\n    times.lookupDomain = timing.domainLookupEnd - timing.domainLookupStart || 0;\n\n    // TCP建立时间\n    times.tcp = timing.connectEnd - timing.connectStart || 0,\n\n    // 首屏时间\n    times.now = performance.now();\n````\n### performance.now()\n&emsp;&emsp;返回当前网页从performance.timing.navigationStart到当前时间之间的微秒数\n\n### performance.getEntries()\n&emsp;&emsp;浏览器获取网页时，会对网页中每一个对象（脚本文件、样式表、图片文件等等）发出一个HTTP请求。performance.getEntries方法以数组形式，返回这些请求的时间统计信息，有多少个请求，返回数组就会有多少个成员。\n\n### 数据埋点及上报方式\n\n#### 利用<script\\>标签的 src 属性上报\n&emsp;&emsp;工作中采用的埋点方式是脚本引入。该脚本负责收集浏览器性能指标信息，并生成一个 <script\\> 节点，将指标信息拼接成 url param 的形式，通过 <script\\> 标签的 src 属性发起请求，将数据上报到服务器。\n\n#### 利用<img\\>标签的 src 属性上报\n&emsp;&emsp;谷歌和百度的都是用的1x1 像素的透明 gif 图片，其优点如下：\n* 跨域友好\n* 执行过程无阻塞\n* 使用image时，部分浏览器内页面关闭不会影响数据上报\n* gif 的最低合法体积最小（最小的 bmp 文件需要74个字节，png 需要67个字节，而合法的 gif，只需要43个字节）\n  \n#### 利用 HTML5 Beacon API 进行数据上报\nBeacon API 允许开发者发送少量错误分析和上报的信息，它的特点很明显：\n* 在空闲的时候异步发送统计，不影响页面诸如 JS、CSS Animation 等执行\n* 即使页面在 unload 状态下，也会异步发送统计，不影响页面过渡/跳转到下跳页\n* 能够被客户端优化发送，尤其在 Mobile 环境下，可以将 Beacon 请求合并到其他请求上，一同处理\n\n### 前端性能监控系统\n&emsp;&emsp;在github上发现的比较好的参考工具：\n* 数据上报插件: [web-report-sdk](https://github.com/wangweianger/web-report-sdk)\n* 前端性能监控UI: [web-monitoring](http://hubing.online:8083/#/sys/5cb68708838abf131c718ed1/index)\n\n### 参考资料\n[前端性能监控-window.performance](https://blog.csdn.net/weixin_42284354/article/details/80416157)\n[Performance API-ruanyifeng](http://javascript.ruanyifeng.com/bom/performance.html)\n[初探Performance API](https://segmentfault.com/a/1190000014479800)\n[前端全（无）埋点之页面停留时长统计](https://juejin.im/entry/5a179332f265da431b6ce39c)","source":"_posts/使用 Performance APi 进行前端性能监控.md","raw":"---\ntitle: 使用 Performance APi 进行前端性能监控\ndate: 2019-07-11 18:55:59\ntags: [性能监控]\ncategories: [前端]\n---\n&emsp;&emsp;平常只在测试环境测过前端页面性能，到了真实环境用户的手机上，页面性能的具体表现却未曾了解。H5新增的 Performance API 可以精确的测量网页性能。使开发者可以通过数据上报的方式收集线上H5页面的性能表现，以合理优化页面性能短板，提升用户体验。\n<!--more-->\n\n### 前端性能监控指标\n* __白屏时间__: 从打开网站到有内容渲染出来的时间节点\n* __首屏时间__: 首屏内容渲染完毕的时间节点\n* __domReady 时间__: 用户可操作的时间节点\n* __onload 时间__: 总下载时间\n\n### Performance API 简介\n&emsp;&emsp;[Performace](https://developer.mozilla.org/zh-CN/docs/Web/API/Performance)是 html5的新特性之一，该接口会返回当前页面性能相关的信息。Performance 对象一共提供了4个属性：\n\n* __navigation__: 包含页面加载、刷新、重定向情况\n* __timing__: 包含了各种与浏览器性能有关的时间数据\n* __memory__: 返回JavaScript对内存的占用\n* __timeOrigin__: 返回性能测量开始时的时间的高精度时间戳\n\n本文主要讨论 Performance 的 timing 对象以及其他几种统计指标。\n#### performance.timing\ntiming 对象提供了各种与浏览器处理相关的时间数据([详细](https://segmentfault.com/a/1190000014479800))，各时间节点可参照下图: \n![](/performance.png)\n\n其中常用的几项计算指标如下：\n````javascript\n    var timing = performance.timing;\n    var times = {};\n\n     // 请求耗时\n    times.request = timing.responseEnd - timing.requestStart || 0;\n\n    // 页面白屏时间\n    times.ttfb = timing.responseStart - timing.navigationStart || 0;\n\n    // 页面可操作时间\n    times.domReady = timing.domComplete - timing.responseEnd || 0;\n\n    //dom渲染时间\n    times.domRender = timing.domContentLoadedEventEnd - timing.navigationStart || 0,\n\n    // 总下载时间\n    times.onload = timing.loadEventEnd - timing.navigationStart || 0;\n\n    // DNS解析时间\n    times.lookupDomain = timing.domainLookupEnd - timing.domainLookupStart || 0;\n\n    // TCP建立时间\n    times.tcp = timing.connectEnd - timing.connectStart || 0,\n\n    // 首屏时间\n    times.now = performance.now();\n````\n### performance.now()\n&emsp;&emsp;返回当前网页从performance.timing.navigationStart到当前时间之间的微秒数\n\n### performance.getEntries()\n&emsp;&emsp;浏览器获取网页时，会对网页中每一个对象（脚本文件、样式表、图片文件等等）发出一个HTTP请求。performance.getEntries方法以数组形式，返回这些请求的时间统计信息，有多少个请求，返回数组就会有多少个成员。\n\n### 数据埋点及上报方式\n\n#### 利用<script\\>标签的 src 属性上报\n&emsp;&emsp;工作中采用的埋点方式是脚本引入。该脚本负责收集浏览器性能指标信息，并生成一个 <script\\> 节点，将指标信息拼接成 url param 的形式，通过 <script\\> 标签的 src 属性发起请求，将数据上报到服务器。\n\n#### 利用<img\\>标签的 src 属性上报\n&emsp;&emsp;谷歌和百度的都是用的1x1 像素的透明 gif 图片，其优点如下：\n* 跨域友好\n* 执行过程无阻塞\n* 使用image时，部分浏览器内页面关闭不会影响数据上报\n* gif 的最低合法体积最小（最小的 bmp 文件需要74个字节，png 需要67个字节，而合法的 gif，只需要43个字节）\n  \n#### 利用 HTML5 Beacon API 进行数据上报\nBeacon API 允许开发者发送少量错误分析和上报的信息，它的特点很明显：\n* 在空闲的时候异步发送统计，不影响页面诸如 JS、CSS Animation 等执行\n* 即使页面在 unload 状态下，也会异步发送统计，不影响页面过渡/跳转到下跳页\n* 能够被客户端优化发送，尤其在 Mobile 环境下，可以将 Beacon 请求合并到其他请求上，一同处理\n\n### 前端性能监控系统\n&emsp;&emsp;在github上发现的比较好的参考工具：\n* 数据上报插件: [web-report-sdk](https://github.com/wangweianger/web-report-sdk)\n* 前端性能监控UI: [web-monitoring](http://hubing.online:8083/#/sys/5cb68708838abf131c718ed1/index)\n\n### 参考资料\n[前端性能监控-window.performance](https://blog.csdn.net/weixin_42284354/article/details/80416157)\n[Performance API-ruanyifeng](http://javascript.ruanyifeng.com/bom/performance.html)\n[初探Performance API](https://segmentfault.com/a/1190000014479800)\n[前端全（无）埋点之页面停留时长统计](https://juejin.im/entry/5a179332f265da431b6ce39c)","slug":"使用 Performance APi 进行前端性能监控","published":1,"updated":"2020-03-03T08:52:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7v8vssf000z96fyjiur6g35","content":"<p>&emsp;&emsp;平常只在测试环境测过前端页面性能，到了真实环境用户的手机上，页面性能的具体表现却未曾了解。H5新增的 Performance API 可以精确的测量网页性能。使开发者可以通过数据上报的方式收集线上H5页面的性能表现，以合理优化页面性能短板，提升用户体验。<br><a id=\"more\"></a></p>\n<h3 id=\"前端性能监控指标\"><a href=\"#前端性能监控指标\" class=\"headerlink\" title=\"前端性能监控指标\"></a>前端性能监控指标</h3><ul>\n<li><strong>白屏时间</strong>: 从打开网站到有内容渲染出来的时间节点</li>\n<li><strong>首屏时间</strong>: 首屏内容渲染完毕的时间节点</li>\n<li><strong>domReady 时间</strong>: 用户可操作的时间节点</li>\n<li><strong>onload 时间</strong>: 总下载时间</li>\n</ul>\n<h3 id=\"Performance-API-简介\"><a href=\"#Performance-API-简介\" class=\"headerlink\" title=\"Performance API 简介\"></a>Performance API 简介</h3><p>&emsp;&emsp;<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Performance\" target=\"_blank\" rel=\"noopener\">Performace</a>是 html5的新特性之一，该接口会返回当前页面性能相关的信息。Performance 对象一共提供了4个属性：</p>\n<ul>\n<li><strong>navigation</strong>: 包含页面加载、刷新、重定向情况</li>\n<li><strong>timing</strong>: 包含了各种与浏览器性能有关的时间数据</li>\n<li><strong>memory</strong>: 返回JavaScript对内存的占用</li>\n<li><strong>timeOrigin</strong>: 返回性能测量开始时的时间的高精度时间戳</li>\n</ul>\n<p>本文主要讨论 Performance 的 timing 对象以及其他几种统计指标。</p>\n<h4 id=\"performance-timing\"><a href=\"#performance-timing\" class=\"headerlink\" title=\"performance.timing\"></a>performance.timing</h4><p>timing 对象提供了各种与浏览器处理相关的时间数据(<a href=\"https://segmentfault.com/a/1190000014479800\" target=\"_blank\" rel=\"noopener\">详细</a>)，各时间节点可参照下图:<br><img src=\"/2019/07/11/使用 Performance APi 进行前端性能监控/performance.png\" alt=\"\"></p>\n<p>其中常用的几项计算指标如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> timing = performance.timing;</span><br><span class=\"line\"><span class=\"keyword\">var</span> times = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 请求耗时</span></span><br><span class=\"line\">times.request = timing.responseEnd - timing.requestStart || <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 页面白屏时间</span></span><br><span class=\"line\">times.ttfb = timing.responseStart - timing.navigationStart || <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 页面可操作时间</span></span><br><span class=\"line\">times.domReady = timing.domComplete - timing.responseEnd || <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//dom渲染时间</span></span><br><span class=\"line\">times.domRender = timing.domContentLoadedEventEnd - timing.navigationStart || <span class=\"number\">0</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 总下载时间</span></span><br><span class=\"line\">times.onload = timing.loadEventEnd - timing.navigationStart || <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DNS解析时间</span></span><br><span class=\"line\">times.lookupDomain = timing.domainLookupEnd - timing.domainLookupStart || <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TCP建立时间</span></span><br><span class=\"line\">times.tcp = timing.connectEnd - timing.connectStart || <span class=\"number\">0</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首屏时间</span></span><br><span class=\"line\">times.now = performance.now();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"performance-now\"><a href=\"#performance-now\" class=\"headerlink\" title=\"performance.now()\"></a>performance.now()</h3><p>&emsp;&emsp;返回当前网页从performance.timing.navigationStart到当前时间之间的微秒数</p>\n<h3 id=\"performance-getEntries\"><a href=\"#performance-getEntries\" class=\"headerlink\" title=\"performance.getEntries()\"></a>performance.getEntries()</h3><p>&emsp;&emsp;浏览器获取网页时，会对网页中每一个对象（脚本文件、样式表、图片文件等等）发出一个HTTP请求。performance.getEntries方法以数组形式，返回这些请求的时间统计信息，有多少个请求，返回数组就会有多少个成员。</p>\n<h3 id=\"数据埋点及上报方式\"><a href=\"#数据埋点及上报方式\" class=\"headerlink\" title=\"数据埋点及上报方式\"></a>数据埋点及上报方式</h3><h4 id=\"利用-lt-script-标签的-src-属性上报\"><a href=\"#利用-lt-script-标签的-src-属性上报\" class=\"headerlink\" title=\"利用&lt;script>标签的 src 属性上报\"></a>利用&lt;script>标签的 src 属性上报</h4><p>&emsp;&emsp;工作中采用的埋点方式是脚本引入。该脚本负责收集浏览器性能指标信息，并生成一个 &lt;script> 节点，将指标信息拼接成 url param 的形式，通过 &lt;script> 标签的 src 属性发起请求，将数据上报到服务器。</p>\n<h4 id=\"利用-lt-img-标签的-src-属性上报\"><a href=\"#利用-lt-img-标签的-src-属性上报\" class=\"headerlink\" title=\"利用&lt;img>标签的 src 属性上报\"></a>利用&lt;img>标签的 src 属性上报</h4><p>&emsp;&emsp;谷歌和百度的都是用的1x1 像素的透明 gif 图片，其优点如下：</p>\n<ul>\n<li>跨域友好</li>\n<li>执行过程无阻塞</li>\n<li>使用image时，部分浏览器内页面关闭不会影响数据上报</li>\n<li>gif 的最低合法体积最小（最小的 bmp 文件需要74个字节，png 需要67个字节，而合法的 gif，只需要43个字节）</li>\n</ul>\n<h4 id=\"利用-HTML5-Beacon-API-进行数据上报\"><a href=\"#利用-HTML5-Beacon-API-进行数据上报\" class=\"headerlink\" title=\"利用 HTML5 Beacon API 进行数据上报\"></a>利用 HTML5 Beacon API 进行数据上报</h4><p>Beacon API 允许开发者发送少量错误分析和上报的信息，它的特点很明显：</p>\n<ul>\n<li>在空闲的时候异步发送统计，不影响页面诸如 JS、CSS Animation 等执行</li>\n<li>即使页面在 unload 状态下，也会异步发送统计，不影响页面过渡/跳转到下跳页</li>\n<li>能够被客户端优化发送，尤其在 Mobile 环境下，可以将 Beacon 请求合并到其他请求上，一同处理</li>\n</ul>\n<h3 id=\"前端性能监控系统\"><a href=\"#前端性能监控系统\" class=\"headerlink\" title=\"前端性能监控系统\"></a>前端性能监控系统</h3><p>&emsp;&emsp;在github上发现的比较好的参考工具：</p>\n<ul>\n<li>数据上报插件: <a href=\"https://github.com/wangweianger/web-report-sdk\" target=\"_blank\" rel=\"noopener\">web-report-sdk</a></li>\n<li>前端性能监控UI: <a href=\"http://hubing.online:8083/#/sys/5cb68708838abf131c718ed1/index\" target=\"_blank\" rel=\"noopener\">web-monitoring</a></li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://blog.csdn.net/weixin_42284354/article/details/80416157\" target=\"_blank\" rel=\"noopener\">前端性能监控-window.performance</a><br><a href=\"http://javascript.ruanyifeng.com/bom/performance.html\" target=\"_blank\" rel=\"noopener\">Performance API-ruanyifeng</a><br><a href=\"https://segmentfault.com/a/1190000014479800\" target=\"_blank\" rel=\"noopener\">初探Performance API</a><br><a href=\"https://juejin.im/entry/5a179332f265da431b6ce39c\" target=\"_blank\" rel=\"noopener\">前端全（无）埋点之页面停留时长统计</a></p>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp;平常只在测试环境测过前端页面性能，到了真实环境用户的手机上，页面性能的具体表现却未曾了解。H5新增的 Performance API 可以精确的测量网页性能。使开发者可以通过数据上报的方式收集线上H5页面的性能表现，以合理优化页面性能短板，提升用户体验。<br></p>","more":"<p></p>\n<h3 id=\"前端性能监控指标\"><a href=\"#前端性能监控指标\" class=\"headerlink\" title=\"前端性能监控指标\"></a>前端性能监控指标</h3><ul>\n<li><strong>白屏时间</strong>: 从打开网站到有内容渲染出来的时间节点</li>\n<li><strong>首屏时间</strong>: 首屏内容渲染完毕的时间节点</li>\n<li><strong>domReady 时间</strong>: 用户可操作的时间节点</li>\n<li><strong>onload 时间</strong>: 总下载时间</li>\n</ul>\n<h3 id=\"Performance-API-简介\"><a href=\"#Performance-API-简介\" class=\"headerlink\" title=\"Performance API 简介\"></a>Performance API 简介</h3><p>&emsp;&emsp;<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Performance\" target=\"_blank\" rel=\"noopener\">Performace</a>是 html5的新特性之一，该接口会返回当前页面性能相关的信息。Performance 对象一共提供了4个属性：</p>\n<ul>\n<li><strong>navigation</strong>: 包含页面加载、刷新、重定向情况</li>\n<li><strong>timing</strong>: 包含了各种与浏览器性能有关的时间数据</li>\n<li><strong>memory</strong>: 返回JavaScript对内存的占用</li>\n<li><strong>timeOrigin</strong>: 返回性能测量开始时的时间的高精度时间戳</li>\n</ul>\n<p>本文主要讨论 Performance 的 timing 对象以及其他几种统计指标。</p>\n<h4 id=\"performance-timing\"><a href=\"#performance-timing\" class=\"headerlink\" title=\"performance.timing\"></a>performance.timing</h4><p>timing 对象提供了各种与浏览器处理相关的时间数据(<a href=\"https://segmentfault.com/a/1190000014479800\" target=\"_blank\" rel=\"noopener\">详细</a>)，各时间节点可参照下图:<br><img src=\"/2019/07/11/使用 Performance APi 进行前端性能监控/performance.png\" alt=\"\"></p>\n<p>其中常用的几项计算指标如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> timing = performance.timing;</span><br><span class=\"line\"><span class=\"keyword\">var</span> times = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 请求耗时</span></span><br><span class=\"line\">times.request = timing.responseEnd - timing.requestStart || <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 页面白屏时间</span></span><br><span class=\"line\">times.ttfb = timing.responseStart - timing.navigationStart || <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 页面可操作时间</span></span><br><span class=\"line\">times.domReady = timing.domComplete - timing.responseEnd || <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//dom渲染时间</span></span><br><span class=\"line\">times.domRender = timing.domContentLoadedEventEnd - timing.navigationStart || <span class=\"number\">0</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 总下载时间</span></span><br><span class=\"line\">times.onload = timing.loadEventEnd - timing.navigationStart || <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DNS解析时间</span></span><br><span class=\"line\">times.lookupDomain = timing.domainLookupEnd - timing.domainLookupStart || <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TCP建立时间</span></span><br><span class=\"line\">times.tcp = timing.connectEnd - timing.connectStart || <span class=\"number\">0</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首屏时间</span></span><br><span class=\"line\">times.now = performance.now();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"performance-now\"><a href=\"#performance-now\" class=\"headerlink\" title=\"performance.now()\"></a>performance.now()</h3><p>&emsp;&emsp;返回当前网页从performance.timing.navigationStart到当前时间之间的微秒数</p>\n<h3 id=\"performance-getEntries\"><a href=\"#performance-getEntries\" class=\"headerlink\" title=\"performance.getEntries()\"></a>performance.getEntries()</h3><p>&emsp;&emsp;浏览器获取网页时，会对网页中每一个对象（脚本文件、样式表、图片文件等等）发出一个HTTP请求。performance.getEntries方法以数组形式，返回这些请求的时间统计信息，有多少个请求，返回数组就会有多少个成员。</p>\n<h3 id=\"数据埋点及上报方式\"><a href=\"#数据埋点及上报方式\" class=\"headerlink\" title=\"数据埋点及上报方式\"></a>数据埋点及上报方式</h3><h4 id=\"利用-lt-script-标签的-src-属性上报\"><a href=\"#利用-lt-script-标签的-src-属性上报\" class=\"headerlink\" title=\"利用&lt;script>标签的 src 属性上报\"></a>利用&lt;script>标签的 src 属性上报</h4><p>&emsp;&emsp;工作中采用的埋点方式是脚本引入。该脚本负责收集浏览器性能指标信息，并生成一个 &lt;script> 节点，将指标信息拼接成 url param 的形式，通过 &lt;script> 标签的 src 属性发起请求，将数据上报到服务器。</p>\n<h4 id=\"利用-lt-img-标签的-src-属性上报\"><a href=\"#利用-lt-img-标签的-src-属性上报\" class=\"headerlink\" title=\"利用&lt;img>标签的 src 属性上报\"></a>利用&lt;img>标签的 src 属性上报</h4><p>&emsp;&emsp;谷歌和百度的都是用的1x1 像素的透明 gif 图片，其优点如下：</p>\n<ul>\n<li>跨域友好</li>\n<li>执行过程无阻塞</li>\n<li>使用image时，部分浏览器内页面关闭不会影响数据上报</li>\n<li>gif 的最低合法体积最小（最小的 bmp 文件需要74个字节，png 需要67个字节，而合法的 gif，只需要43个字节）</li>\n</ul>\n<h4 id=\"利用-HTML5-Beacon-API-进行数据上报\"><a href=\"#利用-HTML5-Beacon-API-进行数据上报\" class=\"headerlink\" title=\"利用 HTML5 Beacon API 进行数据上报\"></a>利用 HTML5 Beacon API 进行数据上报</h4><p>Beacon API 允许开发者发送少量错误分析和上报的信息，它的特点很明显：</p>\n<ul>\n<li>在空闲的时候异步发送统计，不影响页面诸如 JS、CSS Animation 等执行</li>\n<li>即使页面在 unload 状态下，也会异步发送统计，不影响页面过渡/跳转到下跳页</li>\n<li>能够被客户端优化发送，尤其在 Mobile 环境下，可以将 Beacon 请求合并到其他请求上，一同处理</li>\n</ul>\n<h3 id=\"前端性能监控系统\"><a href=\"#前端性能监控系统\" class=\"headerlink\" title=\"前端性能监控系统\"></a>前端性能监控系统</h3><p>&emsp;&emsp;在github上发现的比较好的参考工具：</p>\n<ul>\n<li>数据上报插件: <a href=\"https://github.com/wangweianger/web-report-sdk\" target=\"_blank\" rel=\"noopener\">web-report-sdk</a></li>\n<li>前端性能监控UI: <a href=\"http://hubing.online:8083/#/sys/5cb68708838abf131c718ed1/index\" target=\"_blank\" rel=\"noopener\">web-monitoring</a></li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://blog.csdn.net/weixin_42284354/article/details/80416157\" target=\"_blank\" rel=\"noopener\">前端性能监控-window.performance</a><br><a href=\"http://javascript.ruanyifeng.com/bom/performance.html\" target=\"_blank\" rel=\"noopener\">Performance API-ruanyifeng</a><br><a href=\"https://segmentfault.com/a/1190000014479800\" target=\"_blank\" rel=\"noopener\">初探Performance API</a><br><a href=\"https://juejin.im/entry/5a179332f265da431b6ce39c\" target=\"_blank\" rel=\"noopener\">前端全（无）埋点之页面停留时长统计</a></p>"},{"title":"同时使用两个账号分别操作Github和Gitlab","date":"2018-11-17T06:06:50.000Z","_content":"公司用 gitlab 存管代码，自己用 github 。懒得下班后用自己电脑提交到 github ，故学习一下如何在同一台电脑上使用两个 git 账号。在 SSH config 中为不同的域名指定不同的 SSH key，之后再将自己本地的 github 库的 git config -- local 设置成自己的 github 账号。\n<!--more-->\n### 一、生成SSH秘钥\n分别对githubn和gitlab生成对应的密钥\n* 用`ssh-keygen -t rsa -C \"公司邮箱地址\"`生成对应的gitlab密钥：id_rsa和id_rsa.pub\n* 将 gitlab 公钥(id_rsa.pub)中的内容配置到公司的gitlab上\n* 用`ssh-keygen -t rsa -C \"自己邮箱地址\" -f ~/.ssh/github_rsa`生成对应的github密钥：github_rsa 和 github_rsa.pub\n* 生成公私钥的过程中，会提示你输入`passphrase`，用作每次进行 ssh 连接时的确认密码。由于电脑和账号都是个人使用所以直接按回车设置为空就可以了\n![设置 passphrase](/enter-passphrase.png)\n* 将 github 公钥(github_rsa.pub)中的内容配置到自己的github上\n* 到目前为止本地 ~/.ssh 中已经存在 github_rsa、github_rsa.pub、id_rsa、id_rsa.pub 四个文件了，由于 github 和 gitlab 建立连接默认查找的都是~/.ssh/id_rsa，所以需要为 github 手动指明使用的私钥名称 github_rsa，否则会报错 <span style=\"color: #c7254e; background: #f2f2f2\"> Permission denied (publickey) </span>\n* 进入密钥生成的位置，创建一个 config 文件，添加配置：\n````\n    # githab\n    Host github.com\n        HostName github.com\n        User kuro-p\n        IdentityFile ~/.ssh/github_rsa\n````\n### 二、测试连接\n运行`ssh -T git@hostName`命令测试 ssh key 对 gitlab 与 github的连接\n![测试连接是否正常](/test-ssh-connect.png)\n如果能看到一些 Welcome 信息，说明是 OK 的。\n### 三、配置 git 库账号\n为了使 github / gitlab 知道提交的用户是谁，需要对账户名进行配置。由于全局配置是公司的账号，所以只需要对自己想要进行操作的 github 库进行本地配置即可。\n````\n    git config --local user.name 'username' # github账号名称\n    git config --local user.email 'username@gmail.com' # github账号邮箱\n````\n或者直接 init 一个 git 库，配置后 github 的代码都在这个仓库下拉取。\n\n### 参考资料\n[如何在同一台电脑上使用github和gitlab](https://segmentfault.com/a/1190000014626841?utm_source=channel-hottest)\n[同时使用两个账号分别操作Github和Gitlab](https://blog.csdn.net/mycafe_/article/details/79231599)\n[由于SSH配置文件的不匹配，导致的Permission denied (publickey)及其解决方法](http://www.cnblogs.com/lpdi/p/6816380.html)","source":"_posts/同时使用两个账号分别操作Github和Gitlab.md","raw":"---\ntitle: 同时使用两个账号分别操作Github和Gitlab\ndate: 2018-11-17 14:06:50\ntags: [git]\ncategories: git\n---\n公司用 gitlab 存管代码，自己用 github 。懒得下班后用自己电脑提交到 github ，故学习一下如何在同一台电脑上使用两个 git 账号。在 SSH config 中为不同的域名指定不同的 SSH key，之后再将自己本地的 github 库的 git config -- local 设置成自己的 github 账号。\n<!--more-->\n### 一、生成SSH秘钥\n分别对githubn和gitlab生成对应的密钥\n* 用`ssh-keygen -t rsa -C \"公司邮箱地址\"`生成对应的gitlab密钥：id_rsa和id_rsa.pub\n* 将 gitlab 公钥(id_rsa.pub)中的内容配置到公司的gitlab上\n* 用`ssh-keygen -t rsa -C \"自己邮箱地址\" -f ~/.ssh/github_rsa`生成对应的github密钥：github_rsa 和 github_rsa.pub\n* 生成公私钥的过程中，会提示你输入`passphrase`，用作每次进行 ssh 连接时的确认密码。由于电脑和账号都是个人使用所以直接按回车设置为空就可以了\n![设置 passphrase](/enter-passphrase.png)\n* 将 github 公钥(github_rsa.pub)中的内容配置到自己的github上\n* 到目前为止本地 ~/.ssh 中已经存在 github_rsa、github_rsa.pub、id_rsa、id_rsa.pub 四个文件了，由于 github 和 gitlab 建立连接默认查找的都是~/.ssh/id_rsa，所以需要为 github 手动指明使用的私钥名称 github_rsa，否则会报错 <span style=\"color: #c7254e; background: #f2f2f2\"> Permission denied (publickey) </span>\n* 进入密钥生成的位置，创建一个 config 文件，添加配置：\n````\n    # githab\n    Host github.com\n        HostName github.com\n        User kuro-p\n        IdentityFile ~/.ssh/github_rsa\n````\n### 二、测试连接\n运行`ssh -T git@hostName`命令测试 ssh key 对 gitlab 与 github的连接\n![测试连接是否正常](/test-ssh-connect.png)\n如果能看到一些 Welcome 信息，说明是 OK 的。\n### 三、配置 git 库账号\n为了使 github / gitlab 知道提交的用户是谁，需要对账户名进行配置。由于全局配置是公司的账号，所以只需要对自己想要进行操作的 github 库进行本地配置即可。\n````\n    git config --local user.name 'username' # github账号名称\n    git config --local user.email 'username@gmail.com' # github账号邮箱\n````\n或者直接 init 一个 git 库，配置后 github 的代码都在这个仓库下拉取。\n\n### 参考资料\n[如何在同一台电脑上使用github和gitlab](https://segmentfault.com/a/1190000014626841?utm_source=channel-hottest)\n[同时使用两个账号分别操作Github和Gitlab](https://blog.csdn.net/mycafe_/article/details/79231599)\n[由于SSH配置文件的不匹配，导致的Permission denied (publickey)及其解决方法](http://www.cnblogs.com/lpdi/p/6816380.html)","slug":"同时使用两个账号分别操作Github和Gitlab","published":1,"updated":"2020-03-16T03:01:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7v8vssh001496fy1qxrn5ss","content":"<p>公司用 gitlab 存管代码，自己用 github 。懒得下班后用自己电脑提交到 github ，故学习一下如何在同一台电脑上使用两个 git 账号。在 SSH config 中为不同的域名指定不同的 SSH key，之后再将自己本地的 github 库的 git config – local 设置成自己的 github 账号。<br><a id=\"more\"></a></p>\n<h3 id=\"一、生成SSH秘钥\"><a href=\"#一、生成SSH秘钥\" class=\"headerlink\" title=\"一、生成SSH秘钥\"></a>一、生成SSH秘钥</h3><p>分别对githubn和gitlab生成对应的密钥</p>\n<ul>\n<li>用<code>ssh-keygen -t rsa -C &quot;公司邮箱地址&quot;</code>生成对应的gitlab密钥：id_rsa和id_rsa.pub</li>\n<li>将 gitlab 公钥(id_rsa.pub)中的内容配置到公司的gitlab上</li>\n<li>用<code>ssh-keygen -t rsa -C &quot;自己邮箱地址&quot; -f ~/.ssh/github_rsa</code>生成对应的github密钥：github_rsa 和 github_rsa.pub</li>\n<li>生成公私钥的过程中，会提示你输入<code>passphrase</code>，用作每次进行 ssh 连接时的确认密码。由于电脑和账号都是个人使用所以直接按回车设置为空就可以了<br><img src=\"/2018/11/17/同时使用两个账号分别操作Github和Gitlab/enter-passphrase.png\" alt=\"设置 passphrase\"></li>\n<li>将 github 公钥(github_rsa.pub)中的内容配置到自己的github上</li>\n<li>到目前为止本地 ~/.ssh 中已经存在 github_rsa、github_rsa.pub、id_rsa、id_rsa.pub 四个文件了，由于 github 和 gitlab 建立连接默认查找的都是~/.ssh/id_rsa，所以需要为 github 手动指明使用的私钥名称 github_rsa，否则会报错 <span style=\"color: #c7254e; background: #f2f2f2\"> Permission denied (publickey) </span></li>\n<li>进入密钥生成的位置，创建一个 config 文件，添加配置：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># githab</span><br><span class=\"line\">Host github.com</span><br><span class=\"line\">    HostName github.com</span><br><span class=\"line\">    User kuro-p</span><br><span class=\"line\">    IdentityFile ~/.ssh/github_rsa</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"二、测试连接\"><a href=\"#二、测试连接\" class=\"headerlink\" title=\"二、测试连接\"></a>二、测试连接</h3><p>运行<code>ssh -T git@hostName</code>命令测试 ssh key 对 gitlab 与 github的连接<br><img src=\"/2018/11/17/同时使用两个账号分别操作Github和Gitlab/test-ssh-connect.png\" alt=\"测试连接是否正常\"><br>如果能看到一些 Welcome 信息，说明是 OK 的。</p>\n<h3 id=\"三、配置-git-库账号\"><a href=\"#三、配置-git-库账号\" class=\"headerlink\" title=\"三、配置 git 库账号\"></a>三、配置 git 库账号</h3><p>为了使 github / gitlab 知道提交的用户是谁，需要对账户名进行配置。由于全局配置是公司的账号，所以只需要对自己想要进行操作的 github 库进行本地配置即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --local user.name &apos;username&apos; # github账号名称</span><br><span class=\"line\">git config --local user.email &apos;username@gmail.com&apos; # github账号邮箱</span><br></pre></td></tr></table></figure></p>\n<p>或者直接 init 一个 git 库，配置后 github 的代码都在这个仓库下拉取。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://segmentfault.com/a/1190000014626841?utm_source=channel-hottest\" target=\"_blank\" rel=\"noopener\">如何在同一台电脑上使用github和gitlab</a><br><a href=\"https://blog.csdn.net/mycafe_/article/details/79231599\" target=\"_blank\" rel=\"noopener\">同时使用两个账号分别操作Github和Gitlab</a><br><a href=\"http://www.cnblogs.com/lpdi/p/6816380.html\" target=\"_blank\" rel=\"noopener\">由于SSH配置文件的不匹配，导致的Permission denied (publickey)及其解决方法</a></p>\n","site":{"data":{}},"excerpt":"<p>公司用 gitlab 存管代码，自己用 github 。懒得下班后用自己电脑提交到 github ，故学习一下如何在同一台电脑上使用两个 git 账号。在 SSH config 中为不同的域名指定不同的 SSH key，之后再将自己本地的 github 库的 git config – local 设置成自己的 github 账号。<br></p>","more":"<p></p>\n<h3 id=\"一、生成SSH秘钥\"><a href=\"#一、生成SSH秘钥\" class=\"headerlink\" title=\"一、生成SSH秘钥\"></a>一、生成SSH秘钥</h3><p>分别对githubn和gitlab生成对应的密钥</p>\n<ul>\n<li>用<code>ssh-keygen -t rsa -C &quot;公司邮箱地址&quot;</code>生成对应的gitlab密钥：id_rsa和id_rsa.pub</li>\n<li>将 gitlab 公钥(id_rsa.pub)中的内容配置到公司的gitlab上</li>\n<li>用<code>ssh-keygen -t rsa -C &quot;自己邮箱地址&quot; -f ~/.ssh/github_rsa</code>生成对应的github密钥：github_rsa 和 github_rsa.pub</li>\n<li>生成公私钥的过程中，会提示你输入<code>passphrase</code>，用作每次进行 ssh 连接时的确认密码。由于电脑和账号都是个人使用所以直接按回车设置为空就可以了<br><img src=\"/2018/11/17/同时使用两个账号分别操作Github和Gitlab/enter-passphrase.png\" alt=\"设置 passphrase\"></li>\n<li>将 github 公钥(github_rsa.pub)中的内容配置到自己的github上</li>\n<li>到目前为止本地 ~/.ssh 中已经存在 github_rsa、github_rsa.pub、id_rsa、id_rsa.pub 四个文件了，由于 github 和 gitlab 建立连接默认查找的都是~/.ssh/id_rsa，所以需要为 github 手动指明使用的私钥名称 github_rsa，否则会报错 <span style=\"color: #c7254e; background: #f2f2f2\"> Permission denied (publickey) </span></li>\n<li>进入密钥生成的位置，创建一个 config 文件，添加配置：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># githab</span><br><span class=\"line\">Host github.com</span><br><span class=\"line\">    HostName github.com</span><br><span class=\"line\">    User kuro-p</span><br><span class=\"line\">    IdentityFile ~/.ssh/github_rsa</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"二、测试连接\"><a href=\"#二、测试连接\" class=\"headerlink\" title=\"二、测试连接\"></a>二、测试连接</h3><p>运行<code>ssh -T git@hostName</code>命令测试 ssh key 对 gitlab 与 github的连接<br><img src=\"/2018/11/17/同时使用两个账号分别操作Github和Gitlab/test-ssh-connect.png\" alt=\"测试连接是否正常\"><br>如果能看到一些 Welcome 信息，说明是 OK 的。</p>\n<h3 id=\"三、配置-git-库账号\"><a href=\"#三、配置-git-库账号\" class=\"headerlink\" title=\"三、配置 git 库账号\"></a>三、配置 git 库账号</h3><p>为了使 github / gitlab 知道提交的用户是谁，需要对账户名进行配置。由于全局配置是公司的账号，所以只需要对自己想要进行操作的 github 库进行本地配置即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --local user.name &apos;username&apos; # github账号名称</span><br><span class=\"line\">git config --local user.email &apos;username@gmail.com&apos; # github账号邮箱</span><br></pre></td></tr></table></figure></p>\n<p>或者直接 init 一个 git 库，配置后 github 的代码都在这个仓库下拉取。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://segmentfault.com/a/1190000014626841?utm_source=channel-hottest\" target=\"_blank\" rel=\"noopener\">如何在同一台电脑上使用github和gitlab</a><br><a href=\"https://blog.csdn.net/mycafe_/article/details/79231599\" target=\"_blank\" rel=\"noopener\">同时使用两个账号分别操作Github和Gitlab</a><br><a href=\"http://www.cnblogs.com/lpdi/p/6816380.html\" target=\"_blank\" rel=\"noopener\">由于SSH配置文件的不匹配，导致的Permission denied (publickey)及其解决方法</a></p>"},{"title":"微信授权流程","date":"2019-05-30T04:01:13.000Z","_content":"在公司制作H5页面的时候，有这样一个场景：在微信打开H5页面，已经绑定微信的用户直接免密登录，未绑定的用户使用传统账号密码的登录方式。其中免密登录的核心一环就是走一个微信授权流程，原理不难，弄懂它的流程比较重要。\n<!--more-->\n### [微信网页授权官方文档](https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140842)\n当用户在微信中访问第三方网页的时候，公众号可以通过微信网页授权机制来获取用户基本信息。在授权过程中，`openid`作为用户的唯一标识，同一个用户不同公众号的`openid`不同，反之亦然。\n* 在发起授权前，需要到微信公众平台开发的官网设置授权回调的域名；\n* openid: 用户唯一标识；\n* code: `code`作为换取`access_token`的票据，每次用户授权带上的`code`将不一样，`code`只能使用一次，5分钟未被使用自动过期；\n* access_token: 网页授权接口调用凭证；\n* scope：用户授权的作用域；\n  * 以`snsapi_base`为`scope`发起的网页授权，是用来获取进入页面的用户的openid的，并且是静默授权并自动跳转到回调页（往往是业务页面）。用户无感知。\n  * 以`snsapi_userinfo`为`scope`发起的网页授权，是用来获取用户的基本信息的。但这种授权需要用户手动同意，并且由于用户同意过，所以无须关注，就可在授权后获取该用户的基本信息。\n  \n### 微信免密登录流程图\n![微信免密登录流程图](/flowChart.png)","source":"_posts/微信授权流程.md","raw":"---\ntitle: 微信授权流程\ndate: 2019-05-30 12:01:13\ntags: [微信授权]\ncategories: 其他小结\n---\n在公司制作H5页面的时候，有这样一个场景：在微信打开H5页面，已经绑定微信的用户直接免密登录，未绑定的用户使用传统账号密码的登录方式。其中免密登录的核心一环就是走一个微信授权流程，原理不难，弄懂它的流程比较重要。\n<!--more-->\n### [微信网页授权官方文档](https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140842)\n当用户在微信中访问第三方网页的时候，公众号可以通过微信网页授权机制来获取用户基本信息。在授权过程中，`openid`作为用户的唯一标识，同一个用户不同公众号的`openid`不同，反之亦然。\n* 在发起授权前，需要到微信公众平台开发的官网设置授权回调的域名；\n* openid: 用户唯一标识；\n* code: `code`作为换取`access_token`的票据，每次用户授权带上的`code`将不一样，`code`只能使用一次，5分钟未被使用自动过期；\n* access_token: 网页授权接口调用凭证；\n* scope：用户授权的作用域；\n  * 以`snsapi_base`为`scope`发起的网页授权，是用来获取进入页面的用户的openid的，并且是静默授权并自动跳转到回调页（往往是业务页面）。用户无感知。\n  * 以`snsapi_userinfo`为`scope`发起的网页授权，是用来获取用户的基本信息的。但这种授权需要用户手动同意，并且由于用户同意过，所以无须关注，就可在授权后获取该用户的基本信息。\n  \n### 微信免密登录流程图\n![微信免密登录流程图](/flowChart.png)","slug":"微信授权流程","published":1,"updated":"2019-11-11T03:54:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7v8vssi001796fyyxkeiz2q","content":"<p>在公司制作H5页面的时候，有这样一个场景：在微信打开H5页面，已经绑定微信的用户直接免密登录，未绑定的用户使用传统账号密码的登录方式。其中免密登录的核心一环就是走一个微信授权流程，原理不难，弄懂它的流程比较重要。<br><a id=\"more\"></a></p>\n<h3 id=\"微信网页授权官方文档\"><a href=\"#微信网页授权官方文档\" class=\"headerlink\" title=\"微信网页授权官方文档\"></a><a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842\" target=\"_blank\" rel=\"noopener\">微信网页授权官方文档</a></h3><p>当用户在微信中访问第三方网页的时候，公众号可以通过微信网页授权机制来获取用户基本信息。在授权过程中，<code>openid</code>作为用户的唯一标识，同一个用户不同公众号的<code>openid</code>不同，反之亦然。</p>\n<ul>\n<li>在发起授权前，需要到微信公众平台开发的官网设置授权回调的域名；</li>\n<li>openid: 用户唯一标识；</li>\n<li>code: <code>code</code>作为换取<code>access_token</code>的票据，每次用户授权带上的<code>code</code>将不一样，<code>code</code>只能使用一次，5分钟未被使用自动过期；</li>\n<li>access_token: 网页授权接口调用凭证；</li>\n<li>scope：用户授权的作用域；<ul>\n<li>以<code>snsapi_base</code>为<code>scope</code>发起的网页授权，是用来获取进入页面的用户的openid的，并且是静默授权并自动跳转到回调页（往往是业务页面）。用户无感知。</li>\n<li>以<code>snsapi_userinfo</code>为<code>scope</code>发起的网页授权，是用来获取用户的基本信息的。但这种授权需要用户手动同意，并且由于用户同意过，所以无须关注，就可在授权后获取该用户的基本信息。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"微信免密登录流程图\"><a href=\"#微信免密登录流程图\" class=\"headerlink\" title=\"微信免密登录流程图\"></a>微信免密登录流程图</h3><p><img src=\"/2019/05/30/微信授权流程/flowChart.png\" alt=\"微信免密登录流程图\"></p>\n","site":{"data":{}},"excerpt":"<p>在公司制作H5页面的时候，有这样一个场景：在微信打开H5页面，已经绑定微信的用户直接免密登录，未绑定的用户使用传统账号密码的登录方式。其中免密登录的核心一环就是走一个微信授权流程，原理不难，弄懂它的流程比较重要。<br></p>","more":"<p></p>\n<h3 id=\"微信网页授权官方文档\"><a href=\"#微信网页授权官方文档\" class=\"headerlink\" title=\"微信网页授权官方文档\"></a><a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842\" target=\"_blank\" rel=\"noopener\">微信网页授权官方文档</a></h3><p>当用户在微信中访问第三方网页的时候，公众号可以通过微信网页授权机制来获取用户基本信息。在授权过程中，<code>openid</code>作为用户的唯一标识，同一个用户不同公众号的<code>openid</code>不同，反之亦然。</p>\n<ul>\n<li>在发起授权前，需要到微信公众平台开发的官网设置授权回调的域名；</li>\n<li>openid: 用户唯一标识；</li>\n<li>code: <code>code</code>作为换取<code>access_token</code>的票据，每次用户授权带上的<code>code</code>将不一样，<code>code</code>只能使用一次，5分钟未被使用自动过期；</li>\n<li>access_token: 网页授权接口调用凭证；</li>\n<li>scope：用户授权的作用域；<ul>\n<li>以<code>snsapi_base</code>为<code>scope</code>发起的网页授权，是用来获取进入页面的用户的openid的，并且是静默授权并自动跳转到回调页（往往是业务页面）。用户无感知。</li>\n<li>以<code>snsapi_userinfo</code>为<code>scope</code>发起的网页授权，是用来获取用户的基本信息的。但这种授权需要用户手动同意，并且由于用户同意过，所以无须关注，就可在授权后获取该用户的基本信息。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"微信免密登录流程图\"><a href=\"#微信免密登录流程图\" class=\"headerlink\" title=\"微信免密登录流程图\"></a>微信免密登录流程图</h3><p><img src=\"/2019/05/30/微信授权流程/flowChart.png\" alt=\"微信免密登录流程图\"></p>"},{"title":"正则表达式学习笔记","date":"2019-04-13T04:18:36.000Z","_content":"把2017年的笔记整理一下，方便查找。记录了js正则表达式常用的概念、字符、以及方法。\n<!--more--> \n\n### 一、RegExp对象\nJavaScript通过通过内置对象RegExp支持正则表达式，有两种方法实例化RegExp对象：\n1. 字面量：`var reg = /文本/g`\n2. 构造函数：`var reg = new RegExp(\"\\\\bis\\\\b\\\", 'g')`\n\n### 二、修饰符\n| 修饰符 | 含义 |\n| ---- | ----|\n| g: glogbal | 全文搜索（默认搜索到第一个匹配停止）|\n| i: ignore case | 忽略大小写（默认大小写敏感）|\n| m: multiple lines | 多行搜索 |\n\n### 三、[元字符](https://www.runoob.com/regexp/regexp-metachar.html)\n如（*+$^.|\\(){}[]）等，指在正则表达式中有特殊含义的非字母字符。一般情况下正则表达式的一个字符对应字符串的一个字符。\n__匹配`+`等特殊字符，可先转义，再匹配，如`string.replace(/[\\+]/g, \"\")`__\n\n1. 普通类`[]`\n若要对应多个字符，可用元字符`[]`来构建一个简单的类，所谓类是指符合某些特性的对象，一个泛指，而不是特指某个字符。  \n````javascript\n'a1b2c3d4'.replace(/[abc]/gi, 'X') //\"X1X2X3X4\"\n````\n2. 反向类`[^xx]`\n`[^..]`使用元字符`^`创建反向类，即不属于某类的内容。  \n````javascript\n'a1b2c3d4'.replace(/[^abc]/gi, 'X') //\"aXbXcXXX\"\n````\n3. 范围类`[x-x]`\n使用`[a-z]`来连接两个字符，表示从a到z的任意字符 （包含a，z本身）。在`[]`组成类的内部可以连写`[a-zA-Z]`\n4. 预定义类\n正则表达式提供预定义类来匹配常见字符类\n\n| 字符 | 等价类 | 含义 |\n| -- | -- | -- |\n| . | [^\\r\\n] | 除回车符和换行符之外的所有字符 |\n| \\d | [0-9] | 数字字符 |\n| \\D | [^0-9] | 非数字字符 |\n| \\s | [\\t\\n\\f\\r] | 空白符 |\n| \\S | [^\\t\\n\\f\\r] | 非空白符 |\n| \\w | [a-zA-Z_0-9] | 单词字符(字母、数字、下划线) |\n| \\W | [^a-zA-Z_0-9] | 非单词字符 |\n5. 边界\n常见的边界匹配字符如下\n\n| 字符 | 含义 |\n| -- | -- |\n| ^ | 以xxx开始（注意`^`要写在字符前面） |\n| $ | 以xxx结束（注意`$`要写在字符后面） |\n| \\b | 单词边界 |\n| \\B | 非单词边界 |\n````javascript\n'@123@abc@'.replace('^@', 'Q'); //\"Q123@abc@\" \n'@123@abc@'.replace('@$', 'Q'); //\"Q123@abcQ\" \n````\n6. 量词\n匹配连续出现多次的字符串（仅作用于紧挨着它的字符）\n\n| 字符 | 含义 |\n| -- | -- |\n| ? | 出现零或一次（最多出现一次）|\n| + | 出现一次或多次（至少出现一次） |\n| * | 出现零次或多次（任意次）|\n| {n} | 出现n次 |\n| {n,m} | 出现n到m次 |\n| {n,} | 至少出现n次 |\n| {0,m} | 至多出现m次 | \n* 贪婪模式\n尽可能多的匹配，直到匹配失败\n````javascript\n'12345678'.replace(/\\d{3,6}/g,'X'); //\"X78\"\n````\n* 非贪婪模式（在量词后边加`?`）\n尽可能少的匹配，一旦匹配成功，不再继续尝试；匹配前面的子表达式零次或一次，等价于 {0,1}\n````javascript\n'12345678'.replace(/\\d{3,6}？/g, 'X'); //\"XX78\"\n````\n7. 分组\n使用`()`可以达到分组的功能，使量词作用于分组\n````javascript\n'a1b2c3d4'.replace(/([a-z]\\d{3})g/, 'X') //\"Xd4\"\n````\n8. 反向引用\n使用`$1、$2、$3...`来表示和捕获分组后的内容\n````javascript\n'17741881234'.replace(/(.{3})(.{4})(.{4})/, '$1****$3') //\"177****1234\"\n````\n9. 忽略分组\n不希望捕获某些分组，只需要在分组内加上`?:`即可\n10. 或\n使用`|`可以达到或的效果\n11. 前瞻\n正则表达式从文本头部向文本尾部开始解析。 __文本尾部的方向，称为“前”，文本头部称为“后”。__ 前瞻就是在正则表达式匹配规则的时候，向前检查是否符合断言（条件），后顾/后瞻方向相反。JavaScirpt不支持后顾。__符合/不符合__ 特定断言称为 __肯定/正向匹配__ 和 __否定/负向匹配__。\n\n### 四、RegExp对象方法\n* __RegExp.prototype.test(str)__\n用于测试字符串参数中是否存在匹配正则表达式的字符串，若存在返回true，否则返回false\n* __RegExp.prototype.exec(str)__\n使用正则表达式模式对字符串执行搜索，并将更新全局RegExp对象的属性以反映匹配结果。如果没有匹配的文本则返回null，否则返回一个结果数组。\n\n### 五、String对象方法\n* __String.prototype.search(reg)__\n用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。方法返回第一个匹配结果的index，查找不到返回-1。search()方法不执行全局匹配，它将忽略标志g，并且总是从字符串的开始进行检索。\n* __String.prototype.match(reg)__\n用于检索字符串，以找到一个或者多个与正则表达式匹配的文本。如果匹配到了一个或多个字符串，则返回一个数组，若没有匹配到，则返回null。它不会忽略全局标志g。\n* __String.prototype.split(reg)__\n使用split方法把字符串分割为字符数组。\n* __String.prototype.replace(str/reg, str)__\n用于替换字符串中匹配正则表达式或字符串的文本。\n\n### 六、常用的正则表达式记录\n* [https://www.cnblogs.com/Kuro-P/p/8971349.html](https://www.cnblogs.com/Kuro-P/p/8971349.html)\n\n* [常用的元字符](https://www.runoob.com/regexp/regexp-metachar.html)","source":"_posts/正则表达式学习笔记.md","raw":"---\ntitle: 正则表达式学习笔记\ndate: 2019-04-13 12:18:36\ntags: [JavaScript]\ncategories: [前端, JavaScript]\n---\n把2017年的笔记整理一下，方便查找。记录了js正则表达式常用的概念、字符、以及方法。\n<!--more--> \n\n### 一、RegExp对象\nJavaScript通过通过内置对象RegExp支持正则表达式，有两种方法实例化RegExp对象：\n1. 字面量：`var reg = /文本/g`\n2. 构造函数：`var reg = new RegExp(\"\\\\bis\\\\b\\\", 'g')`\n\n### 二、修饰符\n| 修饰符 | 含义 |\n| ---- | ----|\n| g: glogbal | 全文搜索（默认搜索到第一个匹配停止）|\n| i: ignore case | 忽略大小写（默认大小写敏感）|\n| m: multiple lines | 多行搜索 |\n\n### 三、[元字符](https://www.runoob.com/regexp/regexp-metachar.html)\n如（*+$^.|\\(){}[]）等，指在正则表达式中有特殊含义的非字母字符。一般情况下正则表达式的一个字符对应字符串的一个字符。\n__匹配`+`等特殊字符，可先转义，再匹配，如`string.replace(/[\\+]/g, \"\")`__\n\n1. 普通类`[]`\n若要对应多个字符，可用元字符`[]`来构建一个简单的类，所谓类是指符合某些特性的对象，一个泛指，而不是特指某个字符。  \n````javascript\n'a1b2c3d4'.replace(/[abc]/gi, 'X') //\"X1X2X3X4\"\n````\n2. 反向类`[^xx]`\n`[^..]`使用元字符`^`创建反向类，即不属于某类的内容。  \n````javascript\n'a1b2c3d4'.replace(/[^abc]/gi, 'X') //\"aXbXcXXX\"\n````\n3. 范围类`[x-x]`\n使用`[a-z]`来连接两个字符，表示从a到z的任意字符 （包含a，z本身）。在`[]`组成类的内部可以连写`[a-zA-Z]`\n4. 预定义类\n正则表达式提供预定义类来匹配常见字符类\n\n| 字符 | 等价类 | 含义 |\n| -- | -- | -- |\n| . | [^\\r\\n] | 除回车符和换行符之外的所有字符 |\n| \\d | [0-9] | 数字字符 |\n| \\D | [^0-9] | 非数字字符 |\n| \\s | [\\t\\n\\f\\r] | 空白符 |\n| \\S | [^\\t\\n\\f\\r] | 非空白符 |\n| \\w | [a-zA-Z_0-9] | 单词字符(字母、数字、下划线) |\n| \\W | [^a-zA-Z_0-9] | 非单词字符 |\n5. 边界\n常见的边界匹配字符如下\n\n| 字符 | 含义 |\n| -- | -- |\n| ^ | 以xxx开始（注意`^`要写在字符前面） |\n| $ | 以xxx结束（注意`$`要写在字符后面） |\n| \\b | 单词边界 |\n| \\B | 非单词边界 |\n````javascript\n'@123@abc@'.replace('^@', 'Q'); //\"Q123@abc@\" \n'@123@abc@'.replace('@$', 'Q'); //\"Q123@abcQ\" \n````\n6. 量词\n匹配连续出现多次的字符串（仅作用于紧挨着它的字符）\n\n| 字符 | 含义 |\n| -- | -- |\n| ? | 出现零或一次（最多出现一次）|\n| + | 出现一次或多次（至少出现一次） |\n| * | 出现零次或多次（任意次）|\n| {n} | 出现n次 |\n| {n,m} | 出现n到m次 |\n| {n,} | 至少出现n次 |\n| {0,m} | 至多出现m次 | \n* 贪婪模式\n尽可能多的匹配，直到匹配失败\n````javascript\n'12345678'.replace(/\\d{3,6}/g,'X'); //\"X78\"\n````\n* 非贪婪模式（在量词后边加`?`）\n尽可能少的匹配，一旦匹配成功，不再继续尝试；匹配前面的子表达式零次或一次，等价于 {0,1}\n````javascript\n'12345678'.replace(/\\d{3,6}？/g, 'X'); //\"XX78\"\n````\n7. 分组\n使用`()`可以达到分组的功能，使量词作用于分组\n````javascript\n'a1b2c3d4'.replace(/([a-z]\\d{3})g/, 'X') //\"Xd4\"\n````\n8. 反向引用\n使用`$1、$2、$3...`来表示和捕获分组后的内容\n````javascript\n'17741881234'.replace(/(.{3})(.{4})(.{4})/, '$1****$3') //\"177****1234\"\n````\n9. 忽略分组\n不希望捕获某些分组，只需要在分组内加上`?:`即可\n10. 或\n使用`|`可以达到或的效果\n11. 前瞻\n正则表达式从文本头部向文本尾部开始解析。 __文本尾部的方向，称为“前”，文本头部称为“后”。__ 前瞻就是在正则表达式匹配规则的时候，向前检查是否符合断言（条件），后顾/后瞻方向相反。JavaScirpt不支持后顾。__符合/不符合__ 特定断言称为 __肯定/正向匹配__ 和 __否定/负向匹配__。\n\n### 四、RegExp对象方法\n* __RegExp.prototype.test(str)__\n用于测试字符串参数中是否存在匹配正则表达式的字符串，若存在返回true，否则返回false\n* __RegExp.prototype.exec(str)__\n使用正则表达式模式对字符串执行搜索，并将更新全局RegExp对象的属性以反映匹配结果。如果没有匹配的文本则返回null，否则返回一个结果数组。\n\n### 五、String对象方法\n* __String.prototype.search(reg)__\n用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。方法返回第一个匹配结果的index，查找不到返回-1。search()方法不执行全局匹配，它将忽略标志g，并且总是从字符串的开始进行检索。\n* __String.prototype.match(reg)__\n用于检索字符串，以找到一个或者多个与正则表达式匹配的文本。如果匹配到了一个或多个字符串，则返回一个数组，若没有匹配到，则返回null。它不会忽略全局标志g。\n* __String.prototype.split(reg)__\n使用split方法把字符串分割为字符数组。\n* __String.prototype.replace(str/reg, str)__\n用于替换字符串中匹配正则表达式或字符串的文本。\n\n### 六、常用的正则表达式记录\n* [https://www.cnblogs.com/Kuro-P/p/8971349.html](https://www.cnblogs.com/Kuro-P/p/8971349.html)\n\n* [常用的元字符](https://www.runoob.com/regexp/regexp-metachar.html)","slug":"正则表达式学习笔记","published":1,"updated":"2019-12-12T09:26:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7v8vssk001996fy26ek550b","content":"<p>把2017年的笔记整理一下，方便查找。记录了js正则表达式常用的概念、字符、以及方法。<br><a id=\"more\"></a> </p>\n<h3 id=\"一、RegExp对象\"><a href=\"#一、RegExp对象\" class=\"headerlink\" title=\"一、RegExp对象\"></a>一、RegExp对象</h3><p>JavaScript通过通过内置对象RegExp支持正则表达式，有两种方法实例化RegExp对象：</p>\n<ol>\n<li>字面量：<code>var reg = /文本/g</code></li>\n<li>构造函数：<code>var reg = new RegExp(&quot;\\\\bis\\\\b\\&quot;, &#39;g&#39;)</code></li>\n</ol>\n<h3 id=\"二、修饰符\"><a href=\"#二、修饰符\" class=\"headerlink\" title=\"二、修饰符\"></a>二、修饰符</h3><table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>g: glogbal</td>\n<td>全文搜索（默认搜索到第一个匹配停止）</td>\n</tr>\n<tr>\n<td>i: ignore case</td>\n<td>忽略大小写（默认大小写敏感）</td>\n</tr>\n<tr>\n<td>m: multiple lines</td>\n<td>多行搜索</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"三、元字符\"><a href=\"#三、元字符\" class=\"headerlink\" title=\"三、元字符\"></a>三、<a href=\"https://www.runoob.com/regexp/regexp-metachar.html\" target=\"_blank\" rel=\"noopener\">元字符</a></h3><p>如（*+$^.|(){}[]）等，指在正则表达式中有特殊含义的非字母字符。一般情况下正则表达式的一个字符对应字符串的一个字符。<br><strong>匹配<code>+</code>等特殊字符，可先转义，再匹配，如<code>string.replace(/[\\+]/g, &quot;&quot;)</code></strong></p>\n<ol>\n<li><p>普通类<code>[]</code><br>若要对应多个字符，可用元字符<code>[]</code>来构建一个简单的类，所谓类是指符合某些特性的对象，一个泛指，而不是特指某个字符。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a1b2c3d4'</span>.replace(<span class=\"regexp\">/[abc]/gi</span>, <span class=\"string\">'X'</span>) <span class=\"comment\">//\"X1X2X3X4\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>反向类<code>[^xx]</code><br><code>[^..]</code>使用元字符<code>^</code>创建反向类，即不属于某类的内容。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a1b2c3d4'</span>.replace(<span class=\"regexp\">/[^abc]/gi</span>, <span class=\"string\">'X'</span>) <span class=\"comment\">//\"aXbXcXXX\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>范围类<code>[x-x]</code><br>使用<code>[a-z]</code>来连接两个字符，表示从a到z的任意字符 （包含a，z本身）。在<code>[]</code>组成类的内部可以连写<code>[a-zA-Z]</code></p>\n</li>\n<li>预定义类<br>正则表达式提供预定义类来匹配常见字符类</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>等价类</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td>[^\\r\\n]</td>\n<td>除回车符和换行符之外的所有字符</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>[0-9]</td>\n<td>数字字符</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>[^0-9]</td>\n<td>非数字字符</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>[\\t\\n\\f\\r]</td>\n<td>空白符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>[^\\t\\n\\f\\r]</td>\n<td>非空白符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>[a-zA-Z_0-9]</td>\n<td>单词字符(字母、数字、下划线)</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>[^a-zA-Z_0-9]</td>\n<td>非单词字符</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"5\">\n<li>边界<br>常见的边界匹配字符如下</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^</td>\n<td>以xxx开始（注意<code>^</code>要写在字符前面）</td>\n</tr>\n<tr>\n<td>$</td>\n<td>以xxx结束（注意<code>$</code>要写在字符后面）</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>单词边界</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>非单词边界</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'@123@abc@'</span>.replace(<span class=\"string\">'^@'</span>, <span class=\"string\">'Q'</span>); <span class=\"comment\">//\"Q123@abc@\" </span></span><br><span class=\"line\"><span class=\"string\">'@123@abc@'</span>.replace(<span class=\"string\">'@$'</span>, <span class=\"string\">'Q'</span>); <span class=\"comment\">//\"Q123@abcQ\"</span></span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>量词<br>匹配连续出现多次的字符串（仅作用于紧挨着它的字符）</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>?</td>\n<td>出现零或一次（最多出现一次）</td>\n</tr>\n<tr>\n<td>+</td>\n<td>出现一次或多次（至少出现一次）</td>\n</tr>\n<tr>\n<td>*</td>\n<td>出现零次或多次（任意次）</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>出现n次</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>出现n到m次</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>至少出现n次</td>\n</tr>\n<tr>\n<td>{0,m}</td>\n<td>至多出现m次</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>贪婪模式<br>尽可能多的匹配，直到匹配失败</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'12345678'</span>.replace(<span class=\"regexp\">/\\d&#123;3,6&#125;/g</span>,<span class=\"string\">'X'</span>); <span class=\"comment\">//\"X78\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>非贪婪模式（在量词后边加<code>?</code>）<br>尽可能少的匹配，一旦匹配成功，不再继续尝试；匹配前面的子表达式零次或一次，等价于 {0,1}</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'12345678'</span>.replace(<span class=\"regexp\">/\\d&#123;3,6&#125;？/g</span>, <span class=\"string\">'X'</span>); <span class=\"comment\">//\"XX78\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"7\">\n<li><p>分组<br>使用<code>()</code>可以达到分组的功能，使量词作用于分组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a1b2c3d4'</span>.replace(<span class=\"regexp\">/([a-z]\\d&#123;3&#125;)g/</span>, <span class=\"string\">'X'</span>) <span class=\"comment\">//\"Xd4\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>反向引用<br>使用<code>$1、$2、$3...</code>来表示和捕获分组后的内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'17741881234'</span>.replace(<span class=\"regexp\">/(.&#123;3&#125;)(.&#123;4&#125;)(.&#123;4&#125;)/</span>, <span class=\"string\">'$1****$3'</span>) <span class=\"comment\">//\"177****1234\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>忽略分组<br>不希望捕获某些分组，只需要在分组内加上<code>?:</code>即可</p>\n</li>\n<li>或<br>使用<code>|</code>可以达到或的效果</li>\n<li>前瞻<br>正则表达式从文本头部向文本尾部开始解析。 <strong>文本尾部的方向，称为“前”，文本头部称为“后”。</strong> 前瞻就是在正则表达式匹配规则的时候，向前检查是否符合断言（条件），后顾/后瞻方向相反。JavaScirpt不支持后顾。<strong>符合/不符合</strong> 特定断言称为 <strong>肯定/正向匹配</strong> 和 <strong>否定/负向匹配</strong>。</li>\n</ol>\n<h3 id=\"四、RegExp对象方法\"><a href=\"#四、RegExp对象方法\" class=\"headerlink\" title=\"四、RegExp对象方法\"></a>四、RegExp对象方法</h3><ul>\n<li><strong>RegExp.prototype.test(str)</strong><br>用于测试字符串参数中是否存在匹配正则表达式的字符串，若存在返回true，否则返回false</li>\n<li><strong>RegExp.prototype.exec(str)</strong><br>使用正则表达式模式对字符串执行搜索，并将更新全局RegExp对象的属性以反映匹配结果。如果没有匹配的文本则返回null，否则返回一个结果数组。</li>\n</ul>\n<h3 id=\"五、String对象方法\"><a href=\"#五、String对象方法\" class=\"headerlink\" title=\"五、String对象方法\"></a>五、String对象方法</h3><ul>\n<li><strong>String.prototype.search(reg)</strong><br>用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。方法返回第一个匹配结果的index，查找不到返回-1。search()方法不执行全局匹配，它将忽略标志g，并且总是从字符串的开始进行检索。</li>\n<li><strong>String.prototype.match(reg)</strong><br>用于检索字符串，以找到一个或者多个与正则表达式匹配的文本。如果匹配到了一个或多个字符串，则返回一个数组，若没有匹配到，则返回null。它不会忽略全局标志g。</li>\n<li><strong>String.prototype.split(reg)</strong><br>使用split方法把字符串分割为字符数组。</li>\n<li><strong>String.prototype.replace(str/reg, str)</strong><br>用于替换字符串中匹配正则表达式或字符串的文本。</li>\n</ul>\n<h3 id=\"六、常用的正则表达式记录\"><a href=\"#六、常用的正则表达式记录\" class=\"headerlink\" title=\"六、常用的正则表达式记录\"></a>六、常用的正则表达式记录</h3><ul>\n<li><p><a href=\"https://www.cnblogs.com/Kuro-P/p/8971349.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Kuro-P/p/8971349.html</a></p>\n</li>\n<li><p><a href=\"https://www.runoob.com/regexp/regexp-metachar.html\" target=\"_blank\" rel=\"noopener\">常用的元字符</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>把2017年的笔记整理一下，方便查找。记录了js正则表达式常用的概念、字符、以及方法。<br></p>","more":"<p></p>\n<h3 id=\"一、RegExp对象\"><a href=\"#一、RegExp对象\" class=\"headerlink\" title=\"一、RegExp对象\"></a>一、RegExp对象</h3><p>JavaScript通过通过内置对象RegExp支持正则表达式，有两种方法实例化RegExp对象：</p>\n<ol>\n<li>字面量：<code>var reg = /文本/g</code></li>\n<li>构造函数：<code>var reg = new RegExp(&quot;\\\\bis\\\\b\\&quot;, &#39;g&#39;)</code></li>\n</ol>\n<h3 id=\"二、修饰符\"><a href=\"#二、修饰符\" class=\"headerlink\" title=\"二、修饰符\"></a>二、修饰符</h3><table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>g: glogbal</td>\n<td>全文搜索（默认搜索到第一个匹配停止）</td>\n</tr>\n<tr>\n<td>i: ignore case</td>\n<td>忽略大小写（默认大小写敏感）</td>\n</tr>\n<tr>\n<td>m: multiple lines</td>\n<td>多行搜索</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"三、元字符\"><a href=\"#三、元字符\" class=\"headerlink\" title=\"三、元字符\"></a>三、<a href=\"https://www.runoob.com/regexp/regexp-metachar.html\" target=\"_blank\" rel=\"noopener\">元字符</a></h3><p>如（*+$^.|(){}[]）等，指在正则表达式中有特殊含义的非字母字符。一般情况下正则表达式的一个字符对应字符串的一个字符。<br><strong>匹配<code>+</code>等特殊字符，可先转义，再匹配，如<code>string.replace(/[\\+]/g, &quot;&quot;)</code></strong></p>\n<ol>\n<li><p>普通类<code>[]</code><br>若要对应多个字符，可用元字符<code>[]</code>来构建一个简单的类，所谓类是指符合某些特性的对象，一个泛指，而不是特指某个字符。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a1b2c3d4'</span>.replace(<span class=\"regexp\">/[abc]/gi</span>, <span class=\"string\">'X'</span>) <span class=\"comment\">//\"X1X2X3X4\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>反向类<code>[^xx]</code><br><code>[^..]</code>使用元字符<code>^</code>创建反向类，即不属于某类的内容。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a1b2c3d4'</span>.replace(<span class=\"regexp\">/[^abc]/gi</span>, <span class=\"string\">'X'</span>) <span class=\"comment\">//\"aXbXcXXX\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>范围类<code>[x-x]</code><br>使用<code>[a-z]</code>来连接两个字符，表示从a到z的任意字符 （包含a，z本身）。在<code>[]</code>组成类的内部可以连写<code>[a-zA-Z]</code></p>\n</li>\n<li>预定义类<br>正则表达式提供预定义类来匹配常见字符类</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>等价类</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td>[^\\r\\n]</td>\n<td>除回车符和换行符之外的所有字符</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>[0-9]</td>\n<td>数字字符</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>[^0-9]</td>\n<td>非数字字符</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>[\\t\\n\\f\\r]</td>\n<td>空白符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>[^\\t\\n\\f\\r]</td>\n<td>非空白符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>[a-zA-Z_0-9]</td>\n<td>单词字符(字母、数字、下划线)</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>[^a-zA-Z_0-9]</td>\n<td>非单词字符</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"5\">\n<li>边界<br>常见的边界匹配字符如下</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^</td>\n<td>以xxx开始（注意<code>^</code>要写在字符前面）</td>\n</tr>\n<tr>\n<td>$</td>\n<td>以xxx结束（注意<code>$</code>要写在字符后面）</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>单词边界</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>非单词边界</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'@123@abc@'</span>.replace(<span class=\"string\">'^@'</span>, <span class=\"string\">'Q'</span>); <span class=\"comment\">//\"Q123@abc@\" </span></span><br><span class=\"line\"><span class=\"string\">'@123@abc@'</span>.replace(<span class=\"string\">'@$'</span>, <span class=\"string\">'Q'</span>); <span class=\"comment\">//\"Q123@abcQ\"</span></span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>量词<br>匹配连续出现多次的字符串（仅作用于紧挨着它的字符）</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>?</td>\n<td>出现零或一次（最多出现一次）</td>\n</tr>\n<tr>\n<td>+</td>\n<td>出现一次或多次（至少出现一次）</td>\n</tr>\n<tr>\n<td>*</td>\n<td>出现零次或多次（任意次）</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>出现n次</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>出现n到m次</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>至少出现n次</td>\n</tr>\n<tr>\n<td>{0,m}</td>\n<td>至多出现m次</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>贪婪模式<br>尽可能多的匹配，直到匹配失败</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'12345678'</span>.replace(<span class=\"regexp\">/\\d&#123;3,6&#125;/g</span>,<span class=\"string\">'X'</span>); <span class=\"comment\">//\"X78\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>非贪婪模式（在量词后边加<code>?</code>）<br>尽可能少的匹配，一旦匹配成功，不再继续尝试；匹配前面的子表达式零次或一次，等价于 {0,1}</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'12345678'</span>.replace(<span class=\"regexp\">/\\d&#123;3,6&#125;？/g</span>, <span class=\"string\">'X'</span>); <span class=\"comment\">//\"XX78\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"7\">\n<li><p>分组<br>使用<code>()</code>可以达到分组的功能，使量词作用于分组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'a1b2c3d4'</span>.replace(<span class=\"regexp\">/([a-z]\\d&#123;3&#125;)g/</span>, <span class=\"string\">'X'</span>) <span class=\"comment\">//\"Xd4\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>反向引用<br>使用<code>$1、$2、$3...</code>来表示和捕获分组后的内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'17741881234'</span>.replace(<span class=\"regexp\">/(.&#123;3&#125;)(.&#123;4&#125;)(.&#123;4&#125;)/</span>, <span class=\"string\">'$1****$3'</span>) <span class=\"comment\">//\"177****1234\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>忽略分组<br>不希望捕获某些分组，只需要在分组内加上<code>?:</code>即可</p>\n</li>\n<li>或<br>使用<code>|</code>可以达到或的效果</li>\n<li>前瞻<br>正则表达式从文本头部向文本尾部开始解析。 <strong>文本尾部的方向，称为“前”，文本头部称为“后”。</strong> 前瞻就是在正则表达式匹配规则的时候，向前检查是否符合断言（条件），后顾/后瞻方向相反。JavaScirpt不支持后顾。<strong>符合/不符合</strong> 特定断言称为 <strong>肯定/正向匹配</strong> 和 <strong>否定/负向匹配</strong>。</li>\n</ol>\n<h3 id=\"四、RegExp对象方法\"><a href=\"#四、RegExp对象方法\" class=\"headerlink\" title=\"四、RegExp对象方法\"></a>四、RegExp对象方法</h3><ul>\n<li><strong>RegExp.prototype.test(str)</strong><br>用于测试字符串参数中是否存在匹配正则表达式的字符串，若存在返回true，否则返回false</li>\n<li><strong>RegExp.prototype.exec(str)</strong><br>使用正则表达式模式对字符串执行搜索，并将更新全局RegExp对象的属性以反映匹配结果。如果没有匹配的文本则返回null，否则返回一个结果数组。</li>\n</ul>\n<h3 id=\"五、String对象方法\"><a href=\"#五、String对象方法\" class=\"headerlink\" title=\"五、String对象方法\"></a>五、String对象方法</h3><ul>\n<li><strong>String.prototype.search(reg)</strong><br>用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。方法返回第一个匹配结果的index，查找不到返回-1。search()方法不执行全局匹配，它将忽略标志g，并且总是从字符串的开始进行检索。</li>\n<li><strong>String.prototype.match(reg)</strong><br>用于检索字符串，以找到一个或者多个与正则表达式匹配的文本。如果匹配到了一个或多个字符串，则返回一个数组，若没有匹配到，则返回null。它不会忽略全局标志g。</li>\n<li><strong>String.prototype.split(reg)</strong><br>使用split方法把字符串分割为字符数组。</li>\n<li><strong>String.prototype.replace(str/reg, str)</strong><br>用于替换字符串中匹配正则表达式或字符串的文本。</li>\n</ul>\n<h3 id=\"六、常用的正则表达式记录\"><a href=\"#六、常用的正则表达式记录\" class=\"headerlink\" title=\"六、常用的正则表达式记录\"></a>六、常用的正则表达式记录</h3><ul>\n<li><p><a href=\"https://www.cnblogs.com/Kuro-P/p/8971349.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Kuro-P/p/8971349.html</a></p>\n</li>\n<li><p><a href=\"https://www.runoob.com/regexp/regexp-metachar.html\" target=\"_blank\" rel=\"noopener\">常用的元字符</a></p>\n</li>\n</ul>"},{"title":"PWA-Service Worker 小结（一）各类缓存对比","date":"2019-12-26T08:39:55.000Z","_content":"年底了，总结一下上半年探索的 PWA 的离线缓存技术。顺带总结了一下前端全流程每一步中都可能遇到的缓存，大部分都是概念、名词的理解和说明。涉及到的缓存有：HTTP 缓存、Manifest 缓存、CDN 缓存、Nginx 服务器缓存、Service Worker 缓存。\n\n<!--more-->\n\n缓存的好处：\n存储频繁访问的数据，降低服务器压力；\n减少网络延迟，加快页面打开速度；\n\n### 一、HTTP 缓存\n#### [浏览器缓存机制](https://www.cnblogs.com/slly/p/6732749.html)：\n1. [在未设置相应头缓存字段的时候，只有用户点击“回退”按钮的时候，页面才会从缓存中读取](https://segmentfault.com/a/1190000011286027)；\n2. __过期机制__：与服务器协商获取。对于浏览器来说，如何缓存一个资源是服务器端制定的策略，服务器对每个资源的 [HTTP 响应头设置属性和值](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ)，自己只负责执行。常用的为以下几种：\n    * Expires: 设置过期时间(单位日期)，某日期之前都不再询问；浏览器再次命中这个资源，直至XXX时间前都不会发起 HTTP 请求，而是直接从缓存（在硬盘中）读取。\n      * 如：200 (from cache) 这种缓存速度最快。\n    * Last-Modified: 设置资源上次修改时间(单位日期)，每次请求命中资源，都去询问资源是否过期；通过这种缓存方式，无论资源是否发生变更，都会发生至少一来一去的 HTTP 头传输和接收，速度比不上 Expires；\n      * 如：304，若文件发生变更，则返回200。\n    * Cache-Control:\n      * max-age=<seconds> 设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)；标准中规定 max-age 的值最大不能超过一年，且以秒为单位，所以值为 31536000；\n      * no-cache  字面意义“不缓存”。实际机制是对资源仍使用缓存，但每次使用前必须（MUST）向服务器对缓存资源进行验证；\n      * no-store 不使用任何缓存；\n3. __验证机制__：服务器返回资源的时候有时会在头信息中携带 __Etag（Entity Tag）__，它可作为浏览器再次请求过程的校验标识。如发现校验标识不匹配，说明资源已经修改或过期，浏览器需要重新获取资源内容。\nETag 可以保证每一个资源是唯一的，资源变化都会导致 ETag 变化。服务器根据浏览器上送的 ETag / If-None-Match 值来判断是否命中缓存。在精准度上，Etag 优于 Last-Modified。因为 Etag 是按照内容为资源增加标识，而 Last-Modified 是根据文件最后修改时间判断。\n![](/协商缓存命中过程.png \"协商缓存命中过程\")\n\n#### 常用的缓存策略：\n* 对于动态生成的 HTML 页面使用 HTTP 头: Cache-Control : no-cache;\n* 对于静态 HTML 页面使用 HTTP 头: Last-Modified;\n* 其他所有文件类型都设置 Cache-Control 头，并且在文件内容有所修改都时候修改文件名。\n\n#### 如何更新文件：\n按照 HTTP 规范，如果修改了请求资源的 Query String，就应该被视为一个新的文件。但是遇到运营商劫持时，会忽略 Query String，遇到这种情况只能修改文件名。\n\n#### 疑问：\n给 HTML 都设置了 Cache-Control: no-cache; 对 CSS 和 JS都用了 gulp 进行了打包编译处理，每次有变化都会变更文件名；那么此种情况下，是否还需要设置 Last-Modified？\n直接设置 Cache-Control max-age 或者 Expires 难道不会节省更多 HTTP 请求吗？避免服务器为做出应答返回大量 304。\n\n### 二、[Manifest 缓存](https://segmentfault.com/a/1190000019395237?utm_source=tag-newest)\nmanifest 在前端含义很多，常见的四个使用场景如下：\n1. HTML 标签的 manifest 属性，用来离线缓存 HTML 文档以及资源的；\n   * 如 <html manifest=\"xxx\"\\></html\\>，由于坑太多，现在已经被废弃；\n2. PWA 的 manifest 功能：将 web 应用程序安装到设备的主屏幕；\n   * 如 <link rel=\"manifest\" href=\"/manifest.json\"\\>；\n   * 在 manifest.json 中配置应用的图标、名称等信息；通过一系列配置，就可以为 Web App 添加一个图标到手机上，点击图标即可打开站点；\n3. webpack 打包时会生成个 manifest.json 的文件，用来分析打包后的文件；\n4. [gulp 处理静态资源时，使用 gulp 的 gulp-rev 插件生成 manifest.json，用来记录源文件与处理后的目标文件的对照](https://blog.csdn.net/wangjun5159/article/details/79287881)。\n\n### 三、CDN缓存\n即使为各类资源文件设置了 HTTP 头，当用户手动清除缓存 ，或者由于磁盘容量限制，先缓存的文件被挤出磁盘，此时依旧需要请求资源，为了快速响应用户请求，使用 CDN 加速。CDN的分流作用不仅减少了用户的访问延时，也减少了源站的负载。\n当用户手动清理本地缓存后，将去请求距离最近的 CDN 边缘节点。\nCDN 边缘节点缓存策略因服务商不同而不同，但一般会遵循 HTTP 标准协议。通过 HTTP 响应头中的 Cache-Control: max-age 的字段来设置CDN边缘节点数据缓存时间，若数据失效，则向源站发出回源请求，拉取最新的数据；当源站内容有更新的时候，源站主动把内容推到CDN节点。\n\n各家 CDN 缓存参考：[https://segmentfault.com/a/1190000006673084](https://segmentfault.com/a/1190000006673084)\n\nCDN 回源原理：[https://www.jianshu.com/p/e7751ecb6f21](https://www.jianshu.com/p/e7751ecb6f21)\n\n### 四、nginx 服务器缓存\n<del>这里又牵扯到了两个地方...就像家用路由器和企业级路由器虽然都叫路由器但是功能完全不一样...</del>\nnginx 大名 负载均衡服务器，它是服务器不是服务；CDN 加速是运营商提供的一种服务....，这俩玩意一点关系都没有。如果网站既使用了 CDN 加速，同时又使用了 Nginx 代理，那么 CDN 的位置相比于 Nginx 服务器更靠近用户。\n\n![](/CDN&&Nginx.jpg \"CDN && Nginx\")\n\n网站管理者可以通过为网站配置 Nginx 服务器来达到负载均衡的目的， Nginx 可以重写静态资源的 HTTP 头的缓存信息等，也可以用 Nginx 搭建自己的 CDN 节点（原理跟运营商 CDN 差不多，都是转发到合适的机器；只不过 CDN 是将静态资源存在运营商的机器上，Nginx 做 CDN 的话就缓存在自己的机器上）。具体选择时可通过银子的多少来判断是选 CDN 加速，还是 Nginx 搭建 CDN。\n\n综上，当 Nginx 服务器承载“CDN 加速”的功能时，可通过配置 proxy_cache 将文件缓存到本地的一个目录，缓存命中原理当与 CDN 相同；当 Nginx 服务器不充当 CDN，只是重写静态文件的响应头时，此时跟服务器写命令没差，缓存在浏览器中，原理见浏览器缓存命中机制，不再进行赘述。\n\n### 五、Service Worker 缓存\nService Worker  是一个位于浏览器和网络之间的客户端代理，可以拦截、处理流经的 HTTP 请求，使开发者可以从缓存中向 Web 应用提供资源。可以把它看成是用户设备中的缓存提供服务器，功能十分强大。它缓存的文件同样存储在客户端（用户设备）中：\n\n![](/web应用缓存位置图.png \"web应用缓存位置图\")\n\nService Worker 是 PWA 实现离线应用的核心技术。它可以：\n* 让网页可以离线访问；\n* 让网页在弱网情况，使用缓存快速打开应用，提升体验；\n* 同时在网络正常的情况下走网络缓存减少请求的带宽； \n* 对不支持的手机没有影响；\n\n__缓存有各自的优先级，当依次查找缓存且都没有命中的时候，才会去请求网络：__\n1. Service Worker\n2. Memory Cache\n3. Disk Cache\n4. 网络请求\n\n### 参考资料：\n* 《web全栈工程师的自我修养》\n* [由memoryCache和diskCache产生的浏览器缓存机制的思考](https://segmentfault.com/a/1190000011286027)\n* [HTTP强缓存和协商缓存](https://segmentfault.com/a/1190000008956069)\n* [Etag和Last-Modified](https://www.jianshu.com/p/b5c805f4e8d1)\n* [傻傻分不清的Manifest](https://segmentfault.com/a/1190000019395237?utm_source=tag-newest)\n* [定制修改gulp-rev返回的rev-manifest.json文件](https://blog.csdn.net/wangjun5159/article/details/79287881)\n* [从HTTP响应头看各家CDN缓存技术](https://segmentfault.com/a/1190000006673084)\n* [简述回源原理和CDN常见多级缓存](https://www.jianshu.com/p/e7751ecb6f21)\n* [渐进式网页应用(PWA)介绍](https://zhuanlan.zhihu.com/p/96934736)\n  ","source":"_posts/PWA-Service-Worker-小结（一）各类缓存对比.md","raw":"---\ntitle: PWA-Service Worker 小结（一）各类缓存对比\ndate: 2019-12-26 16:39:55\ntags: [Service Worker]\ncategories: [前端, PWA]\n---\n年底了，总结一下上半年探索的 PWA 的离线缓存技术。顺带总结了一下前端全流程每一步中都可能遇到的缓存，大部分都是概念、名词的理解和说明。涉及到的缓存有：HTTP 缓存、Manifest 缓存、CDN 缓存、Nginx 服务器缓存、Service Worker 缓存。\n\n<!--more-->\n\n缓存的好处：\n存储频繁访问的数据，降低服务器压力；\n减少网络延迟，加快页面打开速度；\n\n### 一、HTTP 缓存\n#### [浏览器缓存机制](https://www.cnblogs.com/slly/p/6732749.html)：\n1. [在未设置相应头缓存字段的时候，只有用户点击“回退”按钮的时候，页面才会从缓存中读取](https://segmentfault.com/a/1190000011286027)；\n2. __过期机制__：与服务器协商获取。对于浏览器来说，如何缓存一个资源是服务器端制定的策略，服务器对每个资源的 [HTTP 响应头设置属性和值](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ)，自己只负责执行。常用的为以下几种：\n    * Expires: 设置过期时间(单位日期)，某日期之前都不再询问；浏览器再次命中这个资源，直至XXX时间前都不会发起 HTTP 请求，而是直接从缓存（在硬盘中）读取。\n      * 如：200 (from cache) 这种缓存速度最快。\n    * Last-Modified: 设置资源上次修改时间(单位日期)，每次请求命中资源，都去询问资源是否过期；通过这种缓存方式，无论资源是否发生变更，都会发生至少一来一去的 HTTP 头传输和接收，速度比不上 Expires；\n      * 如：304，若文件发生变更，则返回200。\n    * Cache-Control:\n      * max-age=<seconds> 设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)；标准中规定 max-age 的值最大不能超过一年，且以秒为单位，所以值为 31536000；\n      * no-cache  字面意义“不缓存”。实际机制是对资源仍使用缓存，但每次使用前必须（MUST）向服务器对缓存资源进行验证；\n      * no-store 不使用任何缓存；\n3. __验证机制__：服务器返回资源的时候有时会在头信息中携带 __Etag（Entity Tag）__，它可作为浏览器再次请求过程的校验标识。如发现校验标识不匹配，说明资源已经修改或过期，浏览器需要重新获取资源内容。\nETag 可以保证每一个资源是唯一的，资源变化都会导致 ETag 变化。服务器根据浏览器上送的 ETag / If-None-Match 值来判断是否命中缓存。在精准度上，Etag 优于 Last-Modified。因为 Etag 是按照内容为资源增加标识，而 Last-Modified 是根据文件最后修改时间判断。\n![](/协商缓存命中过程.png \"协商缓存命中过程\")\n\n#### 常用的缓存策略：\n* 对于动态生成的 HTML 页面使用 HTTP 头: Cache-Control : no-cache;\n* 对于静态 HTML 页面使用 HTTP 头: Last-Modified;\n* 其他所有文件类型都设置 Cache-Control 头，并且在文件内容有所修改都时候修改文件名。\n\n#### 如何更新文件：\n按照 HTTP 规范，如果修改了请求资源的 Query String，就应该被视为一个新的文件。但是遇到运营商劫持时，会忽略 Query String，遇到这种情况只能修改文件名。\n\n#### 疑问：\n给 HTML 都设置了 Cache-Control: no-cache; 对 CSS 和 JS都用了 gulp 进行了打包编译处理，每次有变化都会变更文件名；那么此种情况下，是否还需要设置 Last-Modified？\n直接设置 Cache-Control max-age 或者 Expires 难道不会节省更多 HTTP 请求吗？避免服务器为做出应答返回大量 304。\n\n### 二、[Manifest 缓存](https://segmentfault.com/a/1190000019395237?utm_source=tag-newest)\nmanifest 在前端含义很多，常见的四个使用场景如下：\n1. HTML 标签的 manifest 属性，用来离线缓存 HTML 文档以及资源的；\n   * 如 <html manifest=\"xxx\"\\></html\\>，由于坑太多，现在已经被废弃；\n2. PWA 的 manifest 功能：将 web 应用程序安装到设备的主屏幕；\n   * 如 <link rel=\"manifest\" href=\"/manifest.json\"\\>；\n   * 在 manifest.json 中配置应用的图标、名称等信息；通过一系列配置，就可以为 Web App 添加一个图标到手机上，点击图标即可打开站点；\n3. webpack 打包时会生成个 manifest.json 的文件，用来分析打包后的文件；\n4. [gulp 处理静态资源时，使用 gulp 的 gulp-rev 插件生成 manifest.json，用来记录源文件与处理后的目标文件的对照](https://blog.csdn.net/wangjun5159/article/details/79287881)。\n\n### 三、CDN缓存\n即使为各类资源文件设置了 HTTP 头，当用户手动清除缓存 ，或者由于磁盘容量限制，先缓存的文件被挤出磁盘，此时依旧需要请求资源，为了快速响应用户请求，使用 CDN 加速。CDN的分流作用不仅减少了用户的访问延时，也减少了源站的负载。\n当用户手动清理本地缓存后，将去请求距离最近的 CDN 边缘节点。\nCDN 边缘节点缓存策略因服务商不同而不同，但一般会遵循 HTTP 标准协议。通过 HTTP 响应头中的 Cache-Control: max-age 的字段来设置CDN边缘节点数据缓存时间，若数据失效，则向源站发出回源请求，拉取最新的数据；当源站内容有更新的时候，源站主动把内容推到CDN节点。\n\n各家 CDN 缓存参考：[https://segmentfault.com/a/1190000006673084](https://segmentfault.com/a/1190000006673084)\n\nCDN 回源原理：[https://www.jianshu.com/p/e7751ecb6f21](https://www.jianshu.com/p/e7751ecb6f21)\n\n### 四、nginx 服务器缓存\n<del>这里又牵扯到了两个地方...就像家用路由器和企业级路由器虽然都叫路由器但是功能完全不一样...</del>\nnginx 大名 负载均衡服务器，它是服务器不是服务；CDN 加速是运营商提供的一种服务....，这俩玩意一点关系都没有。如果网站既使用了 CDN 加速，同时又使用了 Nginx 代理，那么 CDN 的位置相比于 Nginx 服务器更靠近用户。\n\n![](/CDN&&Nginx.jpg \"CDN && Nginx\")\n\n网站管理者可以通过为网站配置 Nginx 服务器来达到负载均衡的目的， Nginx 可以重写静态资源的 HTTP 头的缓存信息等，也可以用 Nginx 搭建自己的 CDN 节点（原理跟运营商 CDN 差不多，都是转发到合适的机器；只不过 CDN 是将静态资源存在运营商的机器上，Nginx 做 CDN 的话就缓存在自己的机器上）。具体选择时可通过银子的多少来判断是选 CDN 加速，还是 Nginx 搭建 CDN。\n\n综上，当 Nginx 服务器承载“CDN 加速”的功能时，可通过配置 proxy_cache 将文件缓存到本地的一个目录，缓存命中原理当与 CDN 相同；当 Nginx 服务器不充当 CDN，只是重写静态文件的响应头时，此时跟服务器写命令没差，缓存在浏览器中，原理见浏览器缓存命中机制，不再进行赘述。\n\n### 五、Service Worker 缓存\nService Worker  是一个位于浏览器和网络之间的客户端代理，可以拦截、处理流经的 HTTP 请求，使开发者可以从缓存中向 Web 应用提供资源。可以把它看成是用户设备中的缓存提供服务器，功能十分强大。它缓存的文件同样存储在客户端（用户设备）中：\n\n![](/web应用缓存位置图.png \"web应用缓存位置图\")\n\nService Worker 是 PWA 实现离线应用的核心技术。它可以：\n* 让网页可以离线访问；\n* 让网页在弱网情况，使用缓存快速打开应用，提升体验；\n* 同时在网络正常的情况下走网络缓存减少请求的带宽； \n* 对不支持的手机没有影响；\n\n__缓存有各自的优先级，当依次查找缓存且都没有命中的时候，才会去请求网络：__\n1. Service Worker\n2. Memory Cache\n3. Disk Cache\n4. 网络请求\n\n### 参考资料：\n* 《web全栈工程师的自我修养》\n* [由memoryCache和diskCache产生的浏览器缓存机制的思考](https://segmentfault.com/a/1190000011286027)\n* [HTTP强缓存和协商缓存](https://segmentfault.com/a/1190000008956069)\n* [Etag和Last-Modified](https://www.jianshu.com/p/b5c805f4e8d1)\n* [傻傻分不清的Manifest](https://segmentfault.com/a/1190000019395237?utm_source=tag-newest)\n* [定制修改gulp-rev返回的rev-manifest.json文件](https://blog.csdn.net/wangjun5159/article/details/79287881)\n* [从HTTP响应头看各家CDN缓存技术](https://segmentfault.com/a/1190000006673084)\n* [简述回源原理和CDN常见多级缓存](https://www.jianshu.com/p/e7751ecb6f21)\n* [渐进式网页应用(PWA)介绍](https://zhuanlan.zhihu.com/p/96934736)\n  ","slug":"PWA-Service-Worker-小结（一）各类缓存对比","published":1,"updated":"2020-03-17T02:42:26.000Z","_id":"ck7v8vsy6002e96fydvoccsb3","comments":1,"layout":"post","photos":[],"link":"","content":"<p>年底了，总结一下上半年探索的 PWA 的离线缓存技术。顺带总结了一下前端全流程每一步中都可能遇到的缓存，大部分都是概念、名词的理解和说明。涉及到的缓存有：HTTP 缓存、Manifest 缓存、CDN 缓存、Nginx 服务器缓存、Service Worker 缓存。</p>\n<a id=\"more\"></a>\n<p>缓存的好处：<br>存储频繁访问的数据，降低服务器压力；<br>减少网络延迟，加快页面打开速度；</p>\n<h3 id=\"一、HTTP-缓存\"><a href=\"#一、HTTP-缓存\" class=\"headerlink\" title=\"一、HTTP 缓存\"></a>一、HTTP 缓存</h3><h4 id=\"浏览器缓存机制：\"><a href=\"#浏览器缓存机制：\" class=\"headerlink\" title=\"浏览器缓存机制：\"></a><a href=\"https://www.cnblogs.com/slly/p/6732749.html\" target=\"_blank\" rel=\"noopener\">浏览器缓存机制</a>：</h4><ol>\n<li><a href=\"https://segmentfault.com/a/1190000011286027\" target=\"_blank\" rel=\"noopener\">在未设置相应头缓存字段的时候，只有用户点击“回退”按钮的时候，页面才会从缓存中读取</a>；</li>\n<li><strong>过期机制</strong>：与服务器协商获取。对于浏览器来说，如何缓存一个资源是服务器端制定的策略，服务器对每个资源的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ\" target=\"_blank\" rel=\"noopener\">HTTP 响应头设置属性和值</a>，自己只负责执行。常用的为以下几种：<ul>\n<li>Expires: 设置过期时间(单位日期)，某日期之前都不再询问；浏览器再次命中这个资源，直至XXX时间前都不会发起 HTTP 请求，而是直接从缓存（在硬盘中）读取。<ul>\n<li>如：200 (from cache) 这种缓存速度最快。</li>\n</ul>\n</li>\n<li>Last-Modified: 设置资源上次修改时间(单位日期)，每次请求命中资源，都去询问资源是否过期；通过这种缓存方式，无论资源是否发生变更，都会发生至少一来一去的 HTTP 头传输和接收，速度比不上 Expires；<ul>\n<li>如：304，若文件发生变更，则返回200。</li>\n</ul>\n</li>\n<li>Cache-Control:<ul>\n<li>max-age=<seconds> 设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)；标准中规定 max-age 的值最大不能超过一年，且以秒为单位，所以值为 31536000；</seconds></li>\n<li>no-cache  字面意义“不缓存”。实际机制是对资源仍使用缓存，但每次使用前必须（MUST）向服务器对缓存资源进行验证；</li>\n<li>no-store 不使用任何缓存；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>验证机制</strong>：服务器返回资源的时候有时会在头信息中携带 <strong>Etag（Entity Tag）</strong>，它可作为浏览器再次请求过程的校验标识。如发现校验标识不匹配，说明资源已经修改或过期，浏览器需要重新获取资源内容。<br>ETag 可以保证每一个资源是唯一的，资源变化都会导致 ETag 变化。服务器根据浏览器上送的 ETag / If-None-Match 值来判断是否命中缓存。在精准度上，Etag 优于 Last-Modified。因为 Etag 是按照内容为资源增加标识，而 Last-Modified 是根据文件最后修改时间判断。<br><img src=\"/2019/12/26/PWA-Service-Worker-小结（一）各类缓存对比/协商缓存命中过程.png\" alt=\"\" title=\"协商缓存命中过程\"></li>\n</ol>\n<h4 id=\"常用的缓存策略：\"><a href=\"#常用的缓存策略：\" class=\"headerlink\" title=\"常用的缓存策略：\"></a>常用的缓存策略：</h4><ul>\n<li>对于动态生成的 HTML 页面使用 HTTP 头: Cache-Control : no-cache;</li>\n<li>对于静态 HTML 页面使用 HTTP 头: Last-Modified;</li>\n<li>其他所有文件类型都设置 Cache-Control 头，并且在文件内容有所修改都时候修改文件名。</li>\n</ul>\n<h4 id=\"如何更新文件：\"><a href=\"#如何更新文件：\" class=\"headerlink\" title=\"如何更新文件：\"></a>如何更新文件：</h4><p>按照 HTTP 规范，如果修改了请求资源的 Query String，就应该被视为一个新的文件。但是遇到运营商劫持时，会忽略 Query String，遇到这种情况只能修改文件名。</p>\n<h4 id=\"疑问：\"><a href=\"#疑问：\" class=\"headerlink\" title=\"疑问：\"></a>疑问：</h4><p>给 HTML 都设置了 Cache-Control: no-cache; 对 CSS 和 JS都用了 gulp 进行了打包编译处理，每次有变化都会变更文件名；那么此种情况下，是否还需要设置 Last-Modified？<br>直接设置 Cache-Control max-age 或者 Expires 难道不会节省更多 HTTP 请求吗？避免服务器为做出应答返回大量 304。</p>\n<h3 id=\"二、Manifest-缓存\"><a href=\"#二、Manifest-缓存\" class=\"headerlink\" title=\"二、Manifest 缓存\"></a>二、<a href=\"https://segmentfault.com/a/1190000019395237?utm_source=tag-newest\" target=\"_blank\" rel=\"noopener\">Manifest 缓存</a></h3><p>manifest 在前端含义很多，常见的四个使用场景如下：</p>\n<ol>\n<li>HTML 标签的 manifest 属性，用来离线缓存 HTML 文档以及资源的；<ul>\n<li>如 &lt;html manifest=”xxx”>&lt;/html>，由于坑太多，现在已经被废弃；</li>\n</ul>\n</li>\n<li>PWA 的 manifest 功能：将 web 应用程序安装到设备的主屏幕；<ul>\n<li>如 &lt;link rel=”manifest” href=”/manifest.json”>；</li>\n<li>在 manifest.json 中配置应用的图标、名称等信息；通过一系列配置，就可以为 Web App 添加一个图标到手机上，点击图标即可打开站点；</li>\n</ul>\n</li>\n<li>webpack 打包时会生成个 manifest.json 的文件，用来分析打包后的文件；</li>\n<li><a href=\"https://blog.csdn.net/wangjun5159/article/details/79287881\" target=\"_blank\" rel=\"noopener\">gulp 处理静态资源时，使用 gulp 的 gulp-rev 插件生成 manifest.json，用来记录源文件与处理后的目标文件的对照</a>。</li>\n</ol>\n<h3 id=\"三、CDN缓存\"><a href=\"#三、CDN缓存\" class=\"headerlink\" title=\"三、CDN缓存\"></a>三、CDN缓存</h3><p>即使为各类资源文件设置了 HTTP 头，当用户手动清除缓存 ，或者由于磁盘容量限制，先缓存的文件被挤出磁盘，此时依旧需要请求资源，为了快速响应用户请求，使用 CDN 加速。CDN的分流作用不仅减少了用户的访问延时，也减少了源站的负载。<br>当用户手动清理本地缓存后，将去请求距离最近的 CDN 边缘节点。<br>CDN 边缘节点缓存策略因服务商不同而不同，但一般会遵循 HTTP 标准协议。通过 HTTP 响应头中的 Cache-Control: max-age 的字段来设置CDN边缘节点数据缓存时间，若数据失效，则向源站发出回源请求，拉取最新的数据；当源站内容有更新的时候，源站主动把内容推到CDN节点。</p>\n<p>各家 CDN 缓存参考：<a href=\"https://segmentfault.com/a/1190000006673084\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000006673084</a></p>\n<p>CDN 回源原理：<a href=\"https://www.jianshu.com/p/e7751ecb6f21\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/e7751ecb6f21</a></p>\n<h3 id=\"四、nginx-服务器缓存\"><a href=\"#四、nginx-服务器缓存\" class=\"headerlink\" title=\"四、nginx 服务器缓存\"></a>四、nginx 服务器缓存</h3><p><del>这里又牵扯到了两个地方…就像家用路由器和企业级路由器虽然都叫路由器但是功能完全不一样…</del><br>nginx 大名 负载均衡服务器，它是服务器不是服务；CDN 加速是运营商提供的一种服务….，这俩玩意一点关系都没有。如果网站既使用了 CDN 加速，同时又使用了 Nginx 代理，那么 CDN 的位置相比于 Nginx 服务器更靠近用户。</p>\n<p><img src=\"/2019/12/26/PWA-Service-Worker-小结（一）各类缓存对比/CDN&amp;&amp;Nginx.jpg\" alt=\"\" title=\"CDN &amp;&amp; Nginx\"></p>\n<p>网站管理者可以通过为网站配置 Nginx 服务器来达到负载均衡的目的， Nginx 可以重写静态资源的 HTTP 头的缓存信息等，也可以用 Nginx 搭建自己的 CDN 节点（原理跟运营商 CDN 差不多，都是转发到合适的机器；只不过 CDN 是将静态资源存在运营商的机器上，Nginx 做 CDN 的话就缓存在自己的机器上）。具体选择时可通过银子的多少来判断是选 CDN 加速，还是 Nginx 搭建 CDN。</p>\n<p>综上，当 Nginx 服务器承载“CDN 加速”的功能时，可通过配置 proxy_cache 将文件缓存到本地的一个目录，缓存命中原理当与 CDN 相同；当 Nginx 服务器不充当 CDN，只是重写静态文件的响应头时，此时跟服务器写命令没差，缓存在浏览器中，原理见浏览器缓存命中机制，不再进行赘述。</p>\n<h3 id=\"五、Service-Worker-缓存\"><a href=\"#五、Service-Worker-缓存\" class=\"headerlink\" title=\"五、Service Worker 缓存\"></a>五、Service Worker 缓存</h3><p>Service Worker  是一个位于浏览器和网络之间的客户端代理，可以拦截、处理流经的 HTTP 请求，使开发者可以从缓存中向 Web 应用提供资源。可以把它看成是用户设备中的缓存提供服务器，功能十分强大。它缓存的文件同样存储在客户端（用户设备）中：</p>\n<p><img src=\"/2019/12/26/PWA-Service-Worker-小结（一）各类缓存对比/web应用缓存位置图.png\" alt=\"\" title=\"web应用缓存位置图\"></p>\n<p>Service Worker 是 PWA 实现离线应用的核心技术。它可以：</p>\n<ul>\n<li>让网页可以离线访问；</li>\n<li>让网页在弱网情况，使用缓存快速打开应用，提升体验；</li>\n<li>同时在网络正常的情况下走网络缓存减少请求的带宽； </li>\n<li>对不支持的手机没有影响；</li>\n</ul>\n<p><strong>缓存有各自的优先级，当依次查找缓存且都没有命中的时候，才会去请求网络：</strong></p>\n<ol>\n<li>Service Worker</li>\n<li>Memory Cache</li>\n<li>Disk Cache</li>\n<li>网络请求</li>\n</ol>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><ul>\n<li>《web全栈工程师的自我修养》</li>\n<li><a href=\"https://segmentfault.com/a/1190000011286027\" target=\"_blank\" rel=\"noopener\">由memoryCache和diskCache产生的浏览器缓存机制的思考</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008956069\" target=\"_blank\" rel=\"noopener\">HTTP强缓存和协商缓存</a></li>\n<li><a href=\"https://www.jianshu.com/p/b5c805f4e8d1\" target=\"_blank\" rel=\"noopener\">Etag和Last-Modified</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000019395237?utm_source=tag-newest\" target=\"_blank\" rel=\"noopener\">傻傻分不清的Manifest</a></li>\n<li><a href=\"https://blog.csdn.net/wangjun5159/article/details/79287881\" target=\"_blank\" rel=\"noopener\">定制修改gulp-rev返回的rev-manifest.json文件</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000006673084\" target=\"_blank\" rel=\"noopener\">从HTTP响应头看各家CDN缓存技术</a></li>\n<li><a href=\"https://www.jianshu.com/p/e7751ecb6f21\" target=\"_blank\" rel=\"noopener\">简述回源原理和CDN常见多级缓存</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/96934736\" target=\"_blank\" rel=\"noopener\">渐进式网页应用(PWA)介绍</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>年底了，总结一下上半年探索的 PWA 的离线缓存技术。顺带总结了一下前端全流程每一步中都可能遇到的缓存，大部分都是概念、名词的理解和说明。涉及到的缓存有：HTTP 缓存、Manifest 缓存、CDN 缓存、Nginx 服务器缓存、Service Worker 缓存。</p>","more":"<p>缓存的好处：<br>存储频繁访问的数据，降低服务器压力；<br>减少网络延迟，加快页面打开速度；</p>\n<h3 id=\"一、HTTP-缓存\"><a href=\"#一、HTTP-缓存\" class=\"headerlink\" title=\"一、HTTP 缓存\"></a>一、HTTP 缓存</h3><h4 id=\"浏览器缓存机制：\"><a href=\"#浏览器缓存机制：\" class=\"headerlink\" title=\"浏览器缓存机制：\"></a><a href=\"https://www.cnblogs.com/slly/p/6732749.html\" target=\"_blank\" rel=\"noopener\">浏览器缓存机制</a>：</h4><ol>\n<li><a href=\"https://segmentfault.com/a/1190000011286027\" target=\"_blank\" rel=\"noopener\">在未设置相应头缓存字段的时候，只有用户点击“回退”按钮的时候，页面才会从缓存中读取</a>；</li>\n<li><strong>过期机制</strong>：与服务器协商获取。对于浏览器来说，如何缓存一个资源是服务器端制定的策略，服务器对每个资源的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ\" target=\"_blank\" rel=\"noopener\">HTTP 响应头设置属性和值</a>，自己只负责执行。常用的为以下几种：<ul>\n<li>Expires: 设置过期时间(单位日期)，某日期之前都不再询问；浏览器再次命中这个资源，直至XXX时间前都不会发起 HTTP 请求，而是直接从缓存（在硬盘中）读取。<ul>\n<li>如：200 (from cache) 这种缓存速度最快。</li>\n</ul>\n</li>\n<li>Last-Modified: 设置资源上次修改时间(单位日期)，每次请求命中资源，都去询问资源是否过期；通过这种缓存方式，无论资源是否发生变更，都会发生至少一来一去的 HTTP 头传输和接收，速度比不上 Expires；<ul>\n<li>如：304，若文件发生变更，则返回200。</li>\n</ul>\n</li>\n<li>Cache-Control:<ul>\n<li>max-age=<seconds> 设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)；标准中规定 max-age 的值最大不能超过一年，且以秒为单位，所以值为 31536000；</seconds></li>\n<li>no-cache  字面意义“不缓存”。实际机制是对资源仍使用缓存，但每次使用前必须（MUST）向服务器对缓存资源进行验证；</li>\n<li>no-store 不使用任何缓存；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>验证机制</strong>：服务器返回资源的时候有时会在头信息中携带 <strong>Etag（Entity Tag）</strong>，它可作为浏览器再次请求过程的校验标识。如发现校验标识不匹配，说明资源已经修改或过期，浏览器需要重新获取资源内容。<br>ETag 可以保证每一个资源是唯一的，资源变化都会导致 ETag 变化。服务器根据浏览器上送的 ETag / If-None-Match 值来判断是否命中缓存。在精准度上，Etag 优于 Last-Modified。因为 Etag 是按照内容为资源增加标识，而 Last-Modified 是根据文件最后修改时间判断。<br><img src=\"/2019/12/26/PWA-Service-Worker-小结（一）各类缓存对比/协商缓存命中过程.png\" alt=\"\" title=\"协商缓存命中过程\"></li>\n</ol>\n<h4 id=\"常用的缓存策略：\"><a href=\"#常用的缓存策略：\" class=\"headerlink\" title=\"常用的缓存策略：\"></a>常用的缓存策略：</h4><ul>\n<li>对于动态生成的 HTML 页面使用 HTTP 头: Cache-Control : no-cache;</li>\n<li>对于静态 HTML 页面使用 HTTP 头: Last-Modified;</li>\n<li>其他所有文件类型都设置 Cache-Control 头，并且在文件内容有所修改都时候修改文件名。</li>\n</ul>\n<h4 id=\"如何更新文件：\"><a href=\"#如何更新文件：\" class=\"headerlink\" title=\"如何更新文件：\"></a>如何更新文件：</h4><p>按照 HTTP 规范，如果修改了请求资源的 Query String，就应该被视为一个新的文件。但是遇到运营商劫持时，会忽略 Query String，遇到这种情况只能修改文件名。</p>\n<h4 id=\"疑问：\"><a href=\"#疑问：\" class=\"headerlink\" title=\"疑问：\"></a>疑问：</h4><p>给 HTML 都设置了 Cache-Control: no-cache; 对 CSS 和 JS都用了 gulp 进行了打包编译处理，每次有变化都会变更文件名；那么此种情况下，是否还需要设置 Last-Modified？<br>直接设置 Cache-Control max-age 或者 Expires 难道不会节省更多 HTTP 请求吗？避免服务器为做出应答返回大量 304。</p>\n<h3 id=\"二、Manifest-缓存\"><a href=\"#二、Manifest-缓存\" class=\"headerlink\" title=\"二、Manifest 缓存\"></a>二、<a href=\"https://segmentfault.com/a/1190000019395237?utm_source=tag-newest\" target=\"_blank\" rel=\"noopener\">Manifest 缓存</a></h3><p>manifest 在前端含义很多，常见的四个使用场景如下：</p>\n<ol>\n<li>HTML 标签的 manifest 属性，用来离线缓存 HTML 文档以及资源的；<ul>\n<li>如 &lt;html manifest=”xxx”>&lt;/html>，由于坑太多，现在已经被废弃；</li>\n</ul>\n</li>\n<li>PWA 的 manifest 功能：将 web 应用程序安装到设备的主屏幕；<ul>\n<li>如 &lt;link rel=”manifest” href=”/manifest.json”>；</li>\n<li>在 manifest.json 中配置应用的图标、名称等信息；通过一系列配置，就可以为 Web App 添加一个图标到手机上，点击图标即可打开站点；</li>\n</ul>\n</li>\n<li>webpack 打包时会生成个 manifest.json 的文件，用来分析打包后的文件；</li>\n<li><a href=\"https://blog.csdn.net/wangjun5159/article/details/79287881\" target=\"_blank\" rel=\"noopener\">gulp 处理静态资源时，使用 gulp 的 gulp-rev 插件生成 manifest.json，用来记录源文件与处理后的目标文件的对照</a>。</li>\n</ol>\n<h3 id=\"三、CDN缓存\"><a href=\"#三、CDN缓存\" class=\"headerlink\" title=\"三、CDN缓存\"></a>三、CDN缓存</h3><p>即使为各类资源文件设置了 HTTP 头，当用户手动清除缓存 ，或者由于磁盘容量限制，先缓存的文件被挤出磁盘，此时依旧需要请求资源，为了快速响应用户请求，使用 CDN 加速。CDN的分流作用不仅减少了用户的访问延时，也减少了源站的负载。<br>当用户手动清理本地缓存后，将去请求距离最近的 CDN 边缘节点。<br>CDN 边缘节点缓存策略因服务商不同而不同，但一般会遵循 HTTP 标准协议。通过 HTTP 响应头中的 Cache-Control: max-age 的字段来设置CDN边缘节点数据缓存时间，若数据失效，则向源站发出回源请求，拉取最新的数据；当源站内容有更新的时候，源站主动把内容推到CDN节点。</p>\n<p>各家 CDN 缓存参考：<a href=\"https://segmentfault.com/a/1190000006673084\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000006673084</a></p>\n<p>CDN 回源原理：<a href=\"https://www.jianshu.com/p/e7751ecb6f21\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/e7751ecb6f21</a></p>\n<h3 id=\"四、nginx-服务器缓存\"><a href=\"#四、nginx-服务器缓存\" class=\"headerlink\" title=\"四、nginx 服务器缓存\"></a>四、nginx 服务器缓存</h3><p><del>这里又牵扯到了两个地方…就像家用路由器和企业级路由器虽然都叫路由器但是功能完全不一样…</del><br>nginx 大名 负载均衡服务器，它是服务器不是服务；CDN 加速是运营商提供的一种服务….，这俩玩意一点关系都没有。如果网站既使用了 CDN 加速，同时又使用了 Nginx 代理，那么 CDN 的位置相比于 Nginx 服务器更靠近用户。</p>\n<p><img src=\"/2019/12/26/PWA-Service-Worker-小结（一）各类缓存对比/CDN&amp;&amp;Nginx.jpg\" alt=\"\" title=\"CDN &amp;&amp; Nginx\"></p>\n<p>网站管理者可以通过为网站配置 Nginx 服务器来达到负载均衡的目的， Nginx 可以重写静态资源的 HTTP 头的缓存信息等，也可以用 Nginx 搭建自己的 CDN 节点（原理跟运营商 CDN 差不多，都是转发到合适的机器；只不过 CDN 是将静态资源存在运营商的机器上，Nginx 做 CDN 的话就缓存在自己的机器上）。具体选择时可通过银子的多少来判断是选 CDN 加速，还是 Nginx 搭建 CDN。</p>\n<p>综上，当 Nginx 服务器承载“CDN 加速”的功能时，可通过配置 proxy_cache 将文件缓存到本地的一个目录，缓存命中原理当与 CDN 相同；当 Nginx 服务器不充当 CDN，只是重写静态文件的响应头时，此时跟服务器写命令没差，缓存在浏览器中，原理见浏览器缓存命中机制，不再进行赘述。</p>\n<h3 id=\"五、Service-Worker-缓存\"><a href=\"#五、Service-Worker-缓存\" class=\"headerlink\" title=\"五、Service Worker 缓存\"></a>五、Service Worker 缓存</h3><p>Service Worker  是一个位于浏览器和网络之间的客户端代理，可以拦截、处理流经的 HTTP 请求，使开发者可以从缓存中向 Web 应用提供资源。可以把它看成是用户设备中的缓存提供服务器，功能十分强大。它缓存的文件同样存储在客户端（用户设备）中：</p>\n<p><img src=\"/2019/12/26/PWA-Service-Worker-小结（一）各类缓存对比/web应用缓存位置图.png\" alt=\"\" title=\"web应用缓存位置图\"></p>\n<p>Service Worker 是 PWA 实现离线应用的核心技术。它可以：</p>\n<ul>\n<li>让网页可以离线访问；</li>\n<li>让网页在弱网情况，使用缓存快速打开应用，提升体验；</li>\n<li>同时在网络正常的情况下走网络缓存减少请求的带宽； </li>\n<li>对不支持的手机没有影响；</li>\n</ul>\n<p><strong>缓存有各自的优先级，当依次查找缓存且都没有命中的时候，才会去请求网络：</strong></p>\n<ol>\n<li>Service Worker</li>\n<li>Memory Cache</li>\n<li>Disk Cache</li>\n<li>网络请求</li>\n</ol>\n<h3 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h3><ul>\n<li>《web全栈工程师的自我修养》</li>\n<li><a href=\"https://segmentfault.com/a/1190000011286027\" target=\"_blank\" rel=\"noopener\">由memoryCache和diskCache产生的浏览器缓存机制的思考</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008956069\" target=\"_blank\" rel=\"noopener\">HTTP强缓存和协商缓存</a></li>\n<li><a href=\"https://www.jianshu.com/p/b5c805f4e8d1\" target=\"_blank\" rel=\"noopener\">Etag和Last-Modified</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000019395237?utm_source=tag-newest\" target=\"_blank\" rel=\"noopener\">傻傻分不清的Manifest</a></li>\n<li><a href=\"https://blog.csdn.net/wangjun5159/article/details/79287881\" target=\"_blank\" rel=\"noopener\">定制修改gulp-rev返回的rev-manifest.json文件</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000006673084\" target=\"_blank\" rel=\"noopener\">从HTTP响应头看各家CDN缓存技术</a></li>\n<li><a href=\"https://www.jianshu.com/p/e7751ecb6f21\" target=\"_blank\" rel=\"noopener\">简述回源原理和CDN常见多级缓存</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/96934736\" target=\"_blank\" rel=\"noopener\">渐进式网页应用(PWA)介绍</a></li>\n</ul>"}],"PostAsset":[{"_id":"source/_posts/Linux命令行与shell脚本学习/file-permissions.png","post":"ck7v8vsry000c96fy28vaf5yi","slug":"file-permissions.png","modified":1,"renderable":1},{"_id":"source/_posts/PWA-Service-Worker-小结（二）实践/Service-Worker-Lifecycle.png","post":"ck7v8vss0000e96fy1jivktz6","slug":"Service-Worker-Lifecycle.png","modified":1,"renderable":1},{"_id":"source/_posts/z-index小结/stacking-order.png","post":"ck7v8vss8000o96fyktcq7nzx","slug":"stacking-order.png","modified":1,"renderable":1},{"_id":"source/_posts/使用 Performance APi 进行前端性能监控/performance.png","post":"ck7v8vssf000z96fyjiur6g35","slug":"performance.png","modified":1,"renderable":1},{"_id":"source/_posts/微信授权流程/flowChart.png","slug":"flowChart.png","post":"ck7v8vssi001796fyyxkeiz2q","modified":1,"renderable":0},{"_id":"source/_posts/Prometheus监控应用性能/architecture.png","post":"ck7v8vss5000k96fyazr2sqc1","slug":"architecture.png","modified":1,"renderable":1},{"_id":"source/_posts/Prometheus监控应用性能/flowChart.png","post":"ck7v8vss5000k96fyazr2sqc1","slug":"flowChart.png","modified":1,"renderable":1},{"_id":"source/_posts/同时使用两个账号分别操作Github和Gitlab/enter-passphrase.png","post":"ck7v8vssh001496fy1qxrn5ss","slug":"enter-passphrase.png","modified":1,"renderable":1},{"_id":"source/_posts/同时使用两个账号分别操作Github和Gitlab/test-ssh-connect.png","post":"ck7v8vssh001496fy1qxrn5ss","slug":"test-ssh-connect.png","modified":1,"renderable":1},{"_id":"source/_posts/PWA-Service-Worker-小结（一）各类缓存对比/CDN&&Nginx.jpg","post":"ck7v8vsy6002e96fydvoccsb3","slug":"CDN&&Nginx.jpg","modified":1,"renderable":1},{"_id":"source/_posts/PWA-Service-Worker-小结（一）各类缓存对比/web应用缓存位置图.png","post":"ck7v8vsy6002e96fydvoccsb3","slug":"web应用缓存位置图.png","modified":1,"renderable":1},{"_id":"source/_posts/PWA-Service-Worker-小结（一）各类缓存对比/协商缓存命中过程.png","post":"ck7v8vsy6002e96fydvoccsb3","slug":"协商缓存命中过程.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ck7v8vsrw000996fy4tmfi59i","category_id":"ck7v8vsru000796fyqbnomr1s","_id":"ck7v8vss5000h96fykbx03qjm"},{"post_id":"ck7v8vsrn000296fy91i82fbi","category_id":"ck7v8vsru000796fyqbnomr1s","_id":"ck7v8vss6000l96fy6fb9hm3p"},{"post_id":"ck7v8vsrs000596fylpk57ia7","category_id":"ck7v8vss0000d96fyh2of5x8u","_id":"ck7v8vss9000p96fy9a1tq8uk"},{"post_id":"ck7v8vsrv000896fyvklwb8yt","category_id":"ck7v8vss5000j96fy42bu4uef","_id":"ck7v8vssd000w96fycu4f2408"},{"post_id":"ck7v8vsry000c96fy28vaf5yi","category_id":"ck7v8vss0000d96fyh2of5x8u","_id":"ck7v8vssh001196fyku5kzacb"},{"post_id":"ck7v8vssc000u96fyaeh9t6w5","category_id":"ck7v8vss0000d96fyh2of5x8u","_id":"ck7v8vssi001596fyvve492dl"},{"post_id":"ck7v8vssf000z96fyjiur6g35","category_id":"ck7v8vssd000v96fyva0aa04q","_id":"ck7v8vssl001a96fylz4ew99g"},{"post_id":"ck7v8vssi001796fyyxkeiz2q","category_id":"ck7v8vsru000796fyqbnomr1s","_id":"ck7v8vssn001e96fyk5ray6t3"},{"post_id":"ck7v8vss5000k96fyazr2sqc1","category_id":"ck7v8vssh001296fydcpqsmbb","_id":"ck7v8vssn001h96fyiz2i742h"},{"post_id":"ck7v8vssb000s96fybwu9jvjs","category_id":"ck7v8vssn001f96fyudpbmspu","_id":"ck7v8vssp001m96fyb3l44r48"},{"post_id":"ck7v8vssd000x96fye84mnmoo","category_id":"ck7v8vssd000v96fyva0aa04q","_id":"ck7v8vssp001q96fysmtt6fba"},{"post_id":"ck7v8vssd000x96fye84mnmoo","category_id":"ck7v8vsso001j96fyi7o3jhsa","_id":"ck7v8vssp001t96fyqfd0gatb"},{"post_id":"ck7v8vss0000e96fy1jivktz6","category_id":"ck7v8vssd000v96fyva0aa04q","_id":"ck7v8vssq001v96fyojneq0f0"},{"post_id":"ck7v8vss0000e96fy1jivktz6","category_id":"ck7v8vssp001n96fyi4conzw0","_id":"ck7v8vssq001y96fy7yy464p4"},{"post_id":"ck7v8vssh001496fy1qxrn5ss","category_id":"ck7v8vssp001r96fys232lo8x","_id":"ck7v8vssr002196fybbi8vluk"},{"post_id":"ck7v8vssk001996fy26ek550b","category_id":"ck7v8vssd000v96fyva0aa04q","_id":"ck7v8vsss002496fypn172u5h"},{"post_id":"ck7v8vssk001996fy26ek550b","category_id":"ck7v8vsso001j96fyi7o3jhsa","_id":"ck7v8vsss002696fyp0j4hjew"},{"post_id":"ck7v8vss8000o96fyktcq7nzx","category_id":"ck7v8vssd000v96fyva0aa04q","_id":"ck7v8vsss002896fyxnx4xmnp"},{"post_id":"ck7v8vss8000o96fyktcq7nzx","category_id":"ck7v8vssr002096fyy3k4yt6o","_id":"ck7v8vsss002a96fyeih335at"},{"post_id":"ck7v8vsy6002e96fydvoccsb3","category_id":"ck7v8vssd000v96fyva0aa04q","_id":"ck7v8vsya002g96fy7uwhc5ku"},{"post_id":"ck7v8vsy6002e96fydvoccsb3","category_id":"ck7v8vssp001n96fyi4conzw0","_id":"ck7v8vsya002h96fylyy5849j"}],"PostTag":[{"post_id":"ck7v8vsrh000096fykqfog49l","tag_id":"ck7v8vsrq000496fys01xxqor","_id":"ck7v8vsry000b96fy30w0b58z"},{"post_id":"ck7v8vsrn000296fy91i82fbi","tag_id":"ck7v8vsrx000a96fypo4arg37","_id":"ck7v8vss5000i96fyqexrg7u8"},{"post_id":"ck7v8vss4000g96fy3mk5xe2e","tag_id":"ck7v8vsrq000496fys01xxqor","_id":"ck7v8vss8000n96fy134tt06u"},{"post_id":"ck7v8vsrs000596fylpk57ia7","tag_id":"ck7v8vss2000f96fyyy55s0fa","_id":"ck7v8vss9000r96fy3m3qbkt7"},{"post_id":"ck7v8vssc000u96fyaeh9t6w5","tag_id":"ck7v8vss2000f96fyyy55s0fa","_id":"ck7v8vssf000y96fyolz2tjha"},{"post_id":"ck7v8vsrv000896fyvklwb8yt","tag_id":"ck7v8vss7000m96fyclcyqqwt","_id":"ck7v8vssh001396fykzv9f437"},{"post_id":"ck7v8vsrv000896fyvklwb8yt","tag_id":"ck7v8vssc000t96fy2t9q58l0","_id":"ck7v8vssi001696fymhwlb2od"},{"post_id":"ck7v8vsrw000996fy4tmfi59i","tag_id":"ck7v8vssg001096fym2xncdy2","_id":"ck7v8vssl001c96fywah4ad65"},{"post_id":"ck7v8vsry000c96fy28vaf5yi","tag_id":"ck7v8vssk001896fyq2zq449r","_id":"ck7v8vssn001g96fykg3vfidm"},{"post_id":"ck7v8vss0000e96fy1jivktz6","tag_id":"ck7v8vssn001d96fy92xmj404","_id":"ck7v8vsso001k96fyilvgt1np"},{"post_id":"ck7v8vss5000k96fyazr2sqc1","tag_id":"ck7v8vssn001i96fytxotcpjx","_id":"ck7v8vssp001o96fy1d1bzxys"},{"post_id":"ck7v8vss8000o96fyktcq7nzx","tag_id":"ck7v8vsso001l96fy2a48dtqx","_id":"ck7v8vssp001s96fyc24pufkn"},{"post_id":"ck7v8vssb000s96fybwu9jvjs","tag_id":"ck7v8vssp001p96fyiuwvvs8j","_id":"ck7v8vssq001x96fyexwb0o3v"},{"post_id":"ck7v8vssd000x96fye84mnmoo","tag_id":"ck7v8vssq001u96fyhbvyfllh","_id":"ck7v8vssr002296fyq8mupr7m"},{"post_id":"ck7v8vssf000z96fyjiur6g35","tag_id":"ck7v8vssn001i96fytxotcpjx","_id":"ck7v8vsss002596fy82fwtmx3"},{"post_id":"ck7v8vssh001496fy1qxrn5ss","tag_id":"ck7v8vssr002396fy1fsmp6zo","_id":"ck7v8vsss002996fy6m3ax0a2"},{"post_id":"ck7v8vssi001796fyyxkeiz2q","tag_id":"ck7v8vsss002796fy1bezn1rz","_id":"ck7v8vsst002c96fyw8tchc05"},{"post_id":"ck7v8vssk001996fy26ek550b","tag_id":"ck7v8vssq001u96fyhbvyfllh","_id":"ck7v8vsst002d96fyc1hbbsz4"},{"post_id":"ck7v8vsy6002e96fydvoccsb3","tag_id":"ck7v8vssn001d96fy92xmj404","_id":"ck7v8vsy9002f96fy9oyh8x62"}],"Tag":[{"name":"年度总结","_id":"ck7v8vsrq000496fys01xxqor"},{"name":"Hexo","_id":"ck7v8vsrx000a96fypo4arg37"},{"name":"计算机网络","_id":"ck7v8vss2000f96fyyy55s0fa"},{"name":"大数据","_id":"ck7v8vss7000m96fyclcyqqwt"},{"name":"流处理","_id":"ck7v8vssc000t96fy2t9q58l0"},{"name":"Markdown","_id":"ck7v8vssg001096fym2xncdy2"},{"name":"Linux&shell","_id":"ck7v8vssk001896fyq2zq449r"},{"name":"Service Worker","_id":"ck7v8vssn001d96fy92xmj404"},{"name":"性能监控","_id":"ck7v8vssn001i96fytxotcpjx"},{"name":"CSS","_id":"ck7v8vsso001l96fy2a48dtqx"},{"name":"读书小结","_id":"ck7v8vssp001p96fyiuwvvs8j"},{"name":"JavaScript","_id":"ck7v8vssq001u96fyhbvyfllh"},{"name":"git","_id":"ck7v8vssr002396fy1fsmp6zo"},{"name":"微信授权","_id":"ck7v8vsss002796fy1bezn1rz"}]}}